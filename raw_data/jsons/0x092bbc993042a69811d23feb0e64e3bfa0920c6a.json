{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"./contracts/GutterJuice.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport \\\"./ERC721A.sol\\\";\\n\\ncontract GutterJuice is Context, ERC721A, Ownable, ReentrancyGuard {\\n\\tusing Strings for uint256;\\n\\n\\tstring private _contractBaseURI = \\\"https://clonejuiceapi.guttercatgang.com/metadata/clone_juice/\\\";\\n\\tstring private _contractURI = \\\"ipfs://QmRbAP27dFmPwk3ghgtqC542VRp869tqGFVy9tSqW6CKMv\\\";\\n\\n\\taddress public cloneMintingContract; //the future clone contract\\n\\n\\t// Public sale params\\n\\tuint256 public publicSaleDuration = 4 hours;\\n\\tuint256 public publicSaleStartTime = 1646774400;\\n\\n    // Starting prices\\n\\tuint256 public publicSaleJuiceStartingPrice = 0.9 ether;\\n\\tuint256 public publicSaleJuiceStartingPriceGang = 100 ether;\\n\\n\\t// auction not less than 0.1 ETH or 10 $GANG\\n\\tuint256 public auctionEndingPrice = 0.1 ether;\\n\\tuint256 public auctionEndingPriceGang = 10 ether;\\n\\n\\t//flags for eth/gang sale\\n\\tbool public isETHSaleLive;\\n\\tbool public isGangSaleLive;\\n\\n\\taddress private airdropAccount;\\n\\n\\t//gang tokens\\n\\taddress public gangToken;\\n\\n\\t//increased on the next juices\\n\\tuint256 public maxSupply = 16000;\\n\\n\\tmodifier notContract() {\\n\\t\\trequire(!_isContract(msg.sender), \\\"Contract not allowed\\\");\\n\\t\\trequire(msg.sender == tx.origin, \\\"Proxy contract not allowed\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tconstructor() ERC721A(\\\"Gutter Juice\\\", \\\"JUICE\\\") {\\n\\t\\tairdropAccount = msg.sender;\\n\\t}\\n\\n\\t/**\\n\\t * @dev purchase a juice with ETH\\n\\t * @param qty - quantity of items\\n\\t */\\n\\tfunction buyJuice(uint256 qty) external payable notContract nonReentrant {\\n\\t\\trequire(block.timestamp >= publicSaleStartTime, \\\"not started yet\\\");\\n\\t\\trequire(isETHSaleLive, \\\"not started yet - flag\\\");\\n\\t\\trequire(qty <= 20, \\\"max 20 at once\\\");\\n\\t\\trequire(totalSupply() + qty <= maxSupply, \\\"out of stock\\\");\\n\\n\\t\\tuint256 costToMint = getMintPrice() * qty;\\n\\t\\trequire(msg.value >= costToMint, \\\"eth value incorrect\\\");\\n\\n\\t\\t_safeMint(msg.sender, qty);\\n\\t\\tif (msg.value > costToMint) {\\n\\t\\t\\t(bool success, ) = msg.sender.call{ value: msg.value - costToMint }(\\\"\\\");\\n\\t\\t\\trequire(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev purchase a juice with Gang. correct allowance must be set\\n\\t * @param qty - quantity of items\\n\\t */\\n\\tfunction buyJuiceWithGang(uint256 qty) external notContract nonReentrant {\\n\\t\\trequire(block.timestamp >= publicSaleStartTime, \\\"not started yet\\\");\\n\\t\\trequire(isGangSaleLive, \\\"not started yet - flag\\\");\\n\\t\\trequire(qty <= 20, \\\"max 20 at once\\\");\\n\\t\\trequire(totalSupply() + qty <= maxSupply, \\\"out of stock\\\");\\n\\n\\t\\tuint256 costToMint = getMintPriceGang() * qty;\\n\\n\\t\\t//transfer the market fee\\n\\t\\trequire(\\n\\t\\t\\tIERC20(gangToken).transferFrom(msg.sender, address(this), costToMint),\\n\\t\\t\\t\\\"failed transfer\\\"\\n\\t\\t);\\n\\n\\t\\t_safeMint(msg.sender, qty);\\n\\t}\\n\\n\\t/**\\n\\t * @dev don't go over 50...\\n\\t */\\n\\tfunction airdrop(address[] memory receivers) external {\\n\\t\\trequire(tx.origin == airdropAccount || msg.sender == airdropAccount, \\\"need airdrop account\\\");\\n\\t\\tfor (uint256 i = 0; i < receivers.length; i++) {\\n\\t\\t\\t_safeMint(receivers[i], 1);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev only calable from cloneMintingContract, verify ownership there\\n\\t */\\n\\tfunction burn(uint256 tokenID) external {\\n\\t\\trequire(\\n\\t\\t\\ttx.origin == cloneMintingContract || msg.sender == cloneMintingContract,\\n\\t\\t\\t\\\"only clone contract\\\"\\n\\t\\t);\\n\\t\\t_burn(tokenID);\\n\\t}\\n\\n\\tfunction getMintPrice() public view returns (uint256) {\\n\\t\\tuint256 elapsed = getElapsedSaleTime();\\n\\t\\tif (elapsed >= publicSaleDuration) {\\n\\t\\t\\treturn auctionEndingPrice;\\n\\t\\t} else {\\n\\t\\t\\tuint256 currentPrice = ((publicSaleDuration - elapsed) * publicSaleJuiceStartingPrice) /\\n\\t\\t\\t\\tpublicSaleDuration;\\n\\t\\t\\treturn currentPrice > auctionEndingPrice ? currentPrice : auctionEndingPrice;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction getMintPriceGang() public view returns (uint256) {\\n\\t\\tuint256 elapsed = getElapsedSaleTime();\\n\\t\\tif (elapsed >= publicSaleDuration) {\\n\\t\\t\\treturn auctionEndingPriceGang;\\n\\t\\t} else {\\n\\t\\t\\tuint256 currentPrice = ((publicSaleDuration - elapsed) * publicSaleJuiceStartingPriceGang) /\\n\\t\\t\\t\\tpublicSaleDuration;\\n\\t\\t\\treturn currentPrice > auctionEndingPriceGang ? currentPrice : auctionEndingPriceGang;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction getElapsedSaleTime() internal view returns (uint256) {\\n\\t\\treturn publicSaleStartTime > 0 ? block.timestamp - publicSaleStartTime : 0;\\n\\t}\\n\\n\\tfunction contractURI() public view returns (string memory) {\\n\\t\\treturn _contractURI;\\n\\t}\\n\\n\\tfunction exists(uint256 _tokenId) public view returns (bool) {\\n\\t\\treturn _exists(_tokenId);\\n\\t}\\n\\n\\tfunction tokenURI(uint256 _tokenId) public view override returns (string memory) {\\n\\t\\trequire(_exists(_tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\t\\treturn string(abi.encodePacked(_contractBaseURI, _tokenId.toString()));\\n\\t}\\n\\n\\t/** ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n\\t *  ~~~~~~~~~ ADMIN FUNCTIONS ~~~~~~~~~\\n\\t *  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n\\t */\\n\\n\\t/**\\n\\t@dev sets the contract address for gang token\\n\\t */\\n\\tfunction setGangTokenAddress(address cAddress) external onlyOwner {\\n\\t\\tgangToken = cAddress;\\n\\t}\\n\\n\\tfunction adminMint(uint256 qty, address to) external onlyOwner {\\n\\t\\trequire(totalSupply() + qty <= maxSupply, \\\"out of stock\\\");\\n\\t\\t_safeMint(to, qty);\\n\\t}\\n\\n\\tfunction withdrawEarnings() public onlyOwner {\\n\\t\\tpayable(msg.sender).transfer(address(this).balance);\\n\\t}\\n\\n\\t/**\\n\\t@dev setup the public sale\\n\\t* @param saleDuration - duration of the sale\\n\\t* @param saleStartPrice - price of the sale\\n\\t */\\n\\tfunction startPublicSale(\\n\\t\\tuint256 saleDuration,\\n\\t\\tuint256 saleStartPrice,\\n\\t\\tuint256 saleStartPriceGang\\n\\t) external onlyOwner {\\n\\t\\tpublicSaleDuration = saleDuration;\\n\\t\\tpublicSaleJuiceStartingPrice = saleStartPrice;\\n\\t\\tpublicSaleJuiceStartingPriceGang = saleStartPriceGang;\\n\\t\\tpublicSaleStartTime = block.timestamp;\\n\\t}\\n\\n\\t/**\\n\\t@dev setup the public sale\\n\\t* @param inETH - for eth sales\\n\\t* @param inGang - for gang sales\\n\\t */\\n\\tfunction setEndingPrices(uint256 inETH, uint256 inGang) external onlyOwner {\\n\\t\\tauctionEndingPrice = inETH;\\n\\t\\tauctionEndingPriceGang = inGang;\\n\\t}\\n\\n\\t/**\\n\\t@dev sets a new base URI\\n\\t* @param newBaseURI - new base URI\\n\\t */\\n\\tfunction setBaseURI(string memory newBaseURI) external onlyOwner {\\n\\t\\t_contractBaseURI = newBaseURI;\\n\\t}\\n\\n\\tfunction setContractURI(string memory newuri) external onlyOwner {\\n\\t\\t_contractURI = newuri;\\n\\t}\\n\\n\\t//sets the account that does the airdrop\\n\\tfunction setAirdropAccount(address newAddress) external onlyOwner {\\n\\t\\tairdropAccount = newAddress;\\n\\t}\\n\\n\\t//can be increased by admin for the next drops\\n\\tfunction setMaxSupply(uint256 newMaxSupply) external onlyOwner {\\n\\t\\tmaxSupply = newMaxSupply;\\n\\t}\\n\\n\\t/**\\n\\t@dev sets the clone minting contract\\n\\t* @param addr - address of the contract\\n\\t */\\n\\tfunction setCloneMintingContract(address addr) external onlyOwner {\\n\\t\\tcloneMintingContract = addr;\\n\\t}\\n\\n\\t/**\\n\\t * @dev sets the flags for eth/gang sales\\n\\t */\\n\\tfunction enableSales(bool enableETH, bool enableGang) external onlyOwner {\\n\\t\\tisETHSaleLive = enableETH;\\n\\t\\tisGangSaleLive = enableGang;\\n\\t}\\n\\n\\t/**\\n\\t@dev gets a token back + market fees\\n\\t */\\n\\tfunction reclaimERC20(address _tokenContract, uint256 _amount) external onlyOwner {\\n\\t\\trequire(IERC20(_tokenContract).transfer(msg.sender, _amount), \\\"transfer failed\\\");\\n\\t}\\n\\n\\t/**\\n\\t@dev gets back an ERC721 token\\n\\t */\\n\\tfunction reclaimERC721(IERC721 erc721Token, uint256 id) external onlyOwner {\\n\\t\\terc721Token.safeTransferFrom(address(this), msg.sender, id);\\n\\t}\\n\\n\\t/**\\n\\t@dev gets back an ERC1155 token(s)\\n\\t */\\n\\tfunction reclaimERC1155(\\n\\t\\tIERC1155 erc1155Token,\\n\\t\\tuint256 id,\\n\\t\\tuint256 amount\\n\\t) external onlyOwner {\\n\\t\\terc1155Token.safeTransferFrom(address(this), msg.sender, id, amount, \\\"\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @notice Check if an address is a contract\\n\\t */\\n\\tfunction _isContract(address _addr) internal view returns (bool) {\\n\\t\\tuint256 size;\\n\\t\\tassembly {\\n\\t\\t\\tsize := extcodesize(_addr)\\n\\t\\t}\\n\\t\\treturn size > 0;\\n\\t}\\n}\"\r\n    },\r\n    \"./contracts/ERC721A.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Creator: Chiru Labs\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nerror ApprovalCallerNotOwnerNorApproved();\\nerror ApprovalQueryForNonexistentToken();\\nerror ApproveToCaller();\\nerror ApprovalToCurrentOwner();\\nerror BalanceQueryForZeroAddress();\\nerror MintedQueryForZeroAddress();\\nerror BurnedQueryForZeroAddress();\\nerror AuxQueryForZeroAddress();\\nerror MintToZeroAddress();\\nerror MintZeroQuantity();\\nerror OwnerIndexOutOfBounds();\\nerror OwnerQueryForNonexistentToken();\\nerror TokenIndexOutOfBounds();\\nerror TransferCallerNotOwnerNorApproved();\\nerror TransferFromIncorrectOwner();\\nerror TransferToNonERC721ReceiverImplementer();\\nerror TransferToZeroAddress();\\nerror URIQueryForNonexistentToken();\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension. Built to optimize for lower gas during batch mints.\\n *\\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\\n *\\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n *\\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721A is Context, ERC165, IERC721, IERC721Metadata {\\n\\tusing Address for address;\\n\\tusing Strings for uint256;\\n\\n\\t// Compiler will pack this into a single 256bit word.\\n\\tstruct TokenOwnership {\\n\\t\\t// The address of the owner.\\n\\t\\taddress addr;\\n\\t\\t// Keeps track of the start time of ownership with minimal overhead for tokenomics.\\n\\t\\tuint64 startTimestamp;\\n\\t\\t// Whether the token has been burned.\\n\\t\\tbool burned;\\n\\t}\\n\\n\\t// Compiler will pack this into a single 256bit word.\\n\\tstruct AddressData {\\n\\t\\t// Realistically, 2**64-1 is more than enough.\\n\\t\\tuint64 balance;\\n\\t\\t// Keeps track of mint count with minimal overhead for tokenomics.\\n\\t\\tuint64 numberMinted;\\n\\t\\t// Keeps track of burn count with minimal overhead for tokenomics.\\n\\t\\tuint64 numberBurned;\\n\\t\\t// For miscellaneous variable(s) pertaining to the address\\n\\t\\t// (e.g. number of whitelist mint slots used).\\n\\t\\t// If there are multiple variables, please pack them into a uint64.\\n\\t\\tuint64 aux;\\n\\t}\\n\\n\\t// The tokenId of the next token to be minted.\\n\\tuint256 internal _currentIndex;\\n\\n\\t// The number of tokens burned.\\n\\tuint256 internal _burnCounter;\\n\\n\\t// Token name\\n\\tstring private _name;\\n\\n\\t// Token symbol\\n\\tstring private _symbol;\\n\\n\\t// Mapping from token ID to ownership details\\n\\t// An empty struct value does not necessarily mean the token is unowned. See ownershipOf implementation for details.\\n\\tmapping(uint256 => TokenOwnership) internal _ownerships;\\n\\n\\t// Mapping owner address to address data\\n\\tmapping(address => AddressData) private _addressData;\\n\\n\\t// Mapping from token ID to approved address\\n\\tmapping(uint256 => address) private _tokenApprovals;\\n\\n\\t// Mapping from owner to operator approvals\\n\\tmapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n\\tconstructor(string memory name_, string memory symbol_) {\\n\\t\\t_name = name_;\\n\\t\\t_symbol = symbol_;\\n\\t\\t_currentIndex = _startTokenId();\\n\\t}\\n\\n\\t/**\\n\\t * To change the starting tokenId, please override this function.\\n\\t */\\n\\tfunction _startTokenId() internal view virtual returns (uint256) {\\n\\t\\treturn 0;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Enumerable-totalSupply}.\\n\\t * @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\\n\\t */\\n\\tfunction totalSupply() public view returns (uint256) {\\n\\t\\t// Counter underflow is impossible as _burnCounter cannot be incremented\\n\\t\\t// more than _currentIndex - _startTokenId() times\\n\\t\\tunchecked {\\n\\t\\t\\treturn _currentIndex - _burnCounter - _startTokenId();\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Returns the total amount of tokens minted in the contract.\\n\\t */\\n\\tfunction _totalMinted() internal view returns (uint256) {\\n\\t\\t// Counter underflow is impossible as _currentIndex does not decrement,\\n\\t\\t// and it is initialized to _startTokenId()\\n\\t\\tunchecked {\\n\\t\\t\\treturn _currentIndex - _startTokenId();\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC165-supportsInterface}.\\n\\t */\\n\\tfunction supportsInterface(bytes4 interfaceId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride(ERC165, IERC165)\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\treturn\\n\\t\\t\\tinterfaceId == type(IERC721).interfaceId ||\\n\\t\\t\\tinterfaceId == type(IERC721Metadata).interfaceId ||\\n\\t\\t\\tsuper.supportsInterface(interfaceId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-balanceOf}.\\n\\t */\\n\\tfunction balanceOf(address owner) public view override returns (uint256) {\\n\\t\\tif (owner == address(0)) revert BalanceQueryForZeroAddress();\\n\\t\\treturn uint256(_addressData[owner].balance);\\n\\t}\\n\\n\\t/**\\n\\t * Returns the number of tokens minted by `owner`.\\n\\t */\\n\\tfunction _numberMinted(address owner) internal view returns (uint256) {\\n\\t\\tif (owner == address(0)) revert MintedQueryForZeroAddress();\\n\\t\\treturn uint256(_addressData[owner].numberMinted);\\n\\t}\\n\\n\\t/**\\n\\t * Returns the number of tokens burned by or on behalf of `owner`.\\n\\t */\\n\\tfunction _numberBurned(address owner) internal view returns (uint256) {\\n\\t\\tif (owner == address(0)) revert BurnedQueryForZeroAddress();\\n\\t\\treturn uint256(_addressData[owner].numberBurned);\\n\\t}\\n\\n\\t/**\\n\\t * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n\\t */\\n\\tfunction _getAux(address owner) internal view returns (uint64) {\\n\\t\\tif (owner == address(0)) revert AuxQueryForZeroAddress();\\n\\t\\treturn _addressData[owner].aux;\\n\\t}\\n\\n\\t/**\\n\\t * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n\\t * If there are multiple variables, please pack them into a uint64.\\n\\t */\\n\\tfunction _setAux(address owner, uint64 aux) internal {\\n\\t\\tif (owner == address(0)) revert AuxQueryForZeroAddress();\\n\\t\\t_addressData[owner].aux = aux;\\n\\t}\\n\\n\\t/**\\n\\t * Gas spent here starts off proportional to the maximum mint batch size.\\n\\t * It gradually moves to O(1) as tokens get transferred around in the collection over time.\\n\\t */\\n\\tfunction ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\\n\\t\\tuint256 curr = tokenId;\\n\\n\\t\\tunchecked {\\n\\t\\t\\tif (_startTokenId() <= curr && curr < _currentIndex) {\\n\\t\\t\\t\\tTokenOwnership memory ownership = _ownerships[curr];\\n\\t\\t\\t\\tif (!ownership.burned) {\\n\\t\\t\\t\\t\\tif (ownership.addr != address(0)) {\\n\\t\\t\\t\\t\\t\\treturn ownership;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t// Invariant:\\n\\t\\t\\t\\t\\t// There will always be an ownership that has an address and is not burned\\n\\t\\t\\t\\t\\t// before an ownership that does not have an address and is not burned.\\n\\t\\t\\t\\t\\t// Hence, curr will not underflow.\\n\\t\\t\\t\\t\\twhile (true) {\\n\\t\\t\\t\\t\\t\\tcurr--;\\n\\t\\t\\t\\t\\t\\townership = _ownerships[curr];\\n\\t\\t\\t\\t\\t\\tif (ownership.addr != address(0)) {\\n\\t\\t\\t\\t\\t\\t\\treturn ownership;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\trevert OwnerQueryForNonexistentToken();\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-ownerOf}.\\n\\t */\\n\\tfunction ownerOf(uint256 tokenId) public view override returns (address) {\\n\\t\\treturn ownershipOf(tokenId).addr;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Metadata-name}.\\n\\t */\\n\\tfunction name() public view virtual override returns (string memory) {\\n\\t\\treturn _name;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Metadata-symbol}.\\n\\t */\\n\\tfunction symbol() public view virtual override returns (string memory) {\\n\\t\\treturn _symbol;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Metadata-tokenURI}.\\n\\t */\\n\\tfunction tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n\\t\\tif (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n\\t\\tstring memory baseURI = _baseURI();\\n\\t\\treturn bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n\\t}\\n\\n\\t/**\\n\\t * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n\\t * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n\\t * by default, can be overriden in child contracts.\\n\\t */\\n\\tfunction _baseURI() internal view virtual returns (string memory) {\\n\\t\\treturn \\\"\\\";\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-approve}.\\n\\t */\\n\\tfunction approve(address to, uint256 tokenId) public override {\\n\\t\\taddress owner = ERC721A.ownerOf(tokenId);\\n\\t\\tif (to == owner) revert ApprovalToCurrentOwner();\\n\\n\\t\\tif (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {\\n\\t\\t\\trevert ApprovalCallerNotOwnerNorApproved();\\n\\t\\t}\\n\\n\\t\\t_approve(to, tokenId, owner);\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-getApproved}.\\n\\t */\\n\\tfunction getApproved(uint256 tokenId) public view override returns (address) {\\n\\t\\tif (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n\\t\\treturn _tokenApprovals[tokenId];\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-setApprovalForAll}.\\n\\t */\\n\\tfunction setApprovalForAll(address operator, bool approved) public override {\\n\\t\\tif (operator == _msgSender()) revert ApproveToCaller();\\n\\n\\t\\t_operatorApprovals[_msgSender()][operator] = approved;\\n\\t\\temit ApprovalForAll(_msgSender(), operator, approved);\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-isApprovedForAll}.\\n\\t */\\n\\tfunction isApprovedForAll(address owner, address operator)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\treturn _operatorApprovals[owner][operator];\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-transferFrom}.\\n\\t */\\n\\tfunction transferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) public virtual override {\\n\\t\\t_transfer(from, to, tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-safeTransferFrom}.\\n\\t */\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) public virtual override {\\n\\t\\tsafeTransferFrom(from, to, tokenId, \\\"\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721-safeTransferFrom}.\\n\\t */\\n\\tfunction safeTransferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId,\\n\\t\\tbytes memory _data\\n\\t) public virtual override {\\n\\t\\t_transfer(from, to, tokenId);\\n\\t\\tif (to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n\\t\\t\\trevert TransferToNonERC721ReceiverImplementer();\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns whether `tokenId` exists.\\n\\t *\\n\\t * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n\\t *\\n\\t * Tokens start existing when they are minted (`_mint`),\\n\\t */\\n\\tfunction _exists(uint256 tokenId) internal view returns (bool) {\\n\\t\\treturn _startTokenId() <= tokenId && tokenId < _currentIndex && !_ownerships[tokenId].burned;\\n\\t}\\n\\n\\tfunction _safeMint(address to, uint256 quantity) internal {\\n\\t\\t_safeMint(to, quantity, \\\"\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n\\t * - `quantity` must be greater than 0.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction _safeMint(\\n\\t\\taddress to,\\n\\t\\tuint256 quantity,\\n\\t\\tbytes memory _data\\n\\t) internal {\\n\\t\\t_mint(to, quantity, _data, true);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Mints `quantity` tokens and transfers them to `to`.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `to` cannot be the zero address.\\n\\t * - `quantity` must be greater than 0.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction _mint(\\n\\t\\taddress to,\\n\\t\\tuint256 quantity,\\n\\t\\tbytes memory _data,\\n\\t\\tbool safe\\n\\t) internal {\\n\\t\\tuint256 startTokenId = _currentIndex;\\n\\t\\tif (to == address(0)) revert MintToZeroAddress();\\n\\t\\tif (quantity == 0) revert MintZeroQuantity();\\n\\n\\t\\t_beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n\\t\\t// Overflows are incredibly unrealistic.\\n\\t\\t// balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\\n\\t\\t// updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\\n\\t\\tunchecked {\\n\\t\\t\\t_addressData[to].balance += uint64(quantity);\\n\\t\\t\\t_addressData[to].numberMinted += uint64(quantity);\\n\\n\\t\\t\\t_ownerships[startTokenId].addr = to;\\n\\t\\t\\t_ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\\n\\n\\t\\t\\tuint256 updatedIndex = startTokenId;\\n\\t\\t\\tuint256 end = updatedIndex + quantity;\\n\\n\\t\\t\\tif (safe && to.isContract()) {\\n\\t\\t\\t\\tdo {\\n\\t\\t\\t\\t\\temit Transfer(address(0), to, updatedIndex);\\n\\t\\t\\t\\t\\tif (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {\\n\\t\\t\\t\\t\\t\\trevert TransferToNonERC721ReceiverImplementer();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} while (updatedIndex != end);\\n\\t\\t\\t\\t// Reentrancy protection\\n\\t\\t\\t\\tif (_currentIndex != startTokenId) revert();\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tdo {\\n\\t\\t\\t\\t\\temit Transfer(address(0), to, updatedIndex++);\\n\\t\\t\\t\\t} while (updatedIndex != end);\\n\\t\\t\\t}\\n\\t\\t\\t_currentIndex = updatedIndex;\\n\\t\\t}\\n\\t\\t_afterTokenTransfers(address(0), to, startTokenId, quantity);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Transfers `tokenId` from `from` to `to`.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `to` cannot be the zero address.\\n\\t * - `tokenId` token must be owned by `from`.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction _transfer(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) private {\\n\\t\\tTokenOwnership memory prevOwnership = ownershipOf(tokenId);\\n\\n\\t\\tbool isApprovedOrOwner = (_msgSender() == prevOwnership.addr ||\\n\\t\\t\\tisApprovedForAll(prevOwnership.addr, _msgSender()) ||\\n\\t\\t\\tgetApproved(tokenId) == _msgSender());\\n\\n\\t\\tif (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n\\t\\tif (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\\n\\t\\tif (to == address(0)) revert TransferToZeroAddress();\\n\\n\\t\\t_beforeTokenTransfers(from, to, tokenId, 1);\\n\\n\\t\\t// Clear approvals from the previous owner\\n\\t\\t_approve(address(0), tokenId, prevOwnership.addr);\\n\\n\\t\\t// Underflow of the sender's balance is impossible because we check for\\n\\t\\t// ownership above and the recipient's balance can't realistically overflow.\\n\\t\\t// Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n\\t\\tunchecked {\\n\\t\\t\\t_addressData[from].balance -= 1;\\n\\t\\t\\t_addressData[to].balance += 1;\\n\\n\\t\\t\\t_ownerships[tokenId].addr = to;\\n\\t\\t\\t_ownerships[tokenId].startTimestamp = uint64(block.timestamp);\\n\\n\\t\\t\\t// If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\n\\t\\t\\t// Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n\\t\\t\\tuint256 nextTokenId = tokenId + 1;\\n\\t\\t\\tif (_ownerships[nextTokenId].addr == address(0)) {\\n\\t\\t\\t\\t// This will suffice for checking _exists(nextTokenId),\\n\\t\\t\\t\\t// as a burned slot cannot contain the zero address.\\n\\t\\t\\t\\tif (nextTokenId < _currentIndex) {\\n\\t\\t\\t\\t\\t_ownerships[nextTokenId].addr = prevOwnership.addr;\\n\\t\\t\\t\\t\\t_ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\temit Transfer(from, to, tokenId);\\n\\t\\t_afterTokenTransfers(from, to, tokenId, 1);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Destroys `tokenId`.\\n\\t * The approval is cleared when the token is burned.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `tokenId` must exist.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction _burn(uint256 tokenId) internal virtual {\\n\\t\\tTokenOwnership memory prevOwnership = ownershipOf(tokenId);\\n\\n\\t\\t_beforeTokenTransfers(prevOwnership.addr, address(0), tokenId, 1);\\n\\n\\t\\t// Clear approvals from the previous owner\\n\\t\\t_approve(address(0), tokenId, prevOwnership.addr);\\n\\n\\t\\t// Underflow of the sender's balance is impossible because we check for\\n\\t\\t// ownership above and the recipient's balance can't realistically overflow.\\n\\t\\t// Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n\\t\\tunchecked {\\n\\t\\t\\t_addressData[prevOwnership.addr].balance -= 1;\\n\\t\\t\\t_addressData[prevOwnership.addr].numberBurned += 1;\\n\\n\\t\\t\\t// Keep track of who burned the token, and the timestamp of burning.\\n\\t\\t\\t_ownerships[tokenId].addr = prevOwnership.addr;\\n\\t\\t\\t_ownerships[tokenId].startTimestamp = uint64(block.timestamp);\\n\\t\\t\\t_ownerships[tokenId].burned = true;\\n\\n\\t\\t\\t// If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\\n\\t\\t\\t// Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n\\t\\t\\tuint256 nextTokenId = tokenId + 1;\\n\\t\\t\\tif (_ownerships[nextTokenId].addr == address(0)) {\\n\\t\\t\\t\\t// This will suffice for checking _exists(nextTokenId),\\n\\t\\t\\t\\t// as a burned slot cannot contain the zero address.\\n\\t\\t\\t\\tif (nextTokenId < _currentIndex) {\\n\\t\\t\\t\\t\\t_ownerships[nextTokenId].addr = prevOwnership.addr;\\n\\t\\t\\t\\t\\t_ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\temit Transfer(prevOwnership.addr, address(0), tokenId);\\n\\t\\t_afterTokenTransfers(prevOwnership.addr, address(0), tokenId, 1);\\n\\n\\t\\t// Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n\\t\\tunchecked {\\n\\t\\t\\t_burnCounter++;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Approve `to` to operate on `tokenId`\\n\\t *\\n\\t * Emits a {Approval} event.\\n\\t */\\n\\tfunction _approve(\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId,\\n\\t\\taddress owner\\n\\t) private {\\n\\t\\t_tokenApprovals[tokenId] = to;\\n\\t\\temit Approval(owner, to, tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n\\t *\\n\\t * @param from address representing the previous owner of the given token ID\\n\\t * @param to target address that will receive the tokens\\n\\t * @param tokenId uint256 ID of the token to be transferred\\n\\t * @param _data bytes optional data to send along with the call\\n\\t * @return bool whether the call correctly returned the expected magic value\\n\\t */\\n\\tfunction _checkContractOnERC721Received(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId,\\n\\t\\tbytes memory _data\\n\\t) private returns (bool) {\\n\\t\\ttry IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (\\n\\t\\t\\tbytes4 retval\\n\\t\\t) {\\n\\t\\t\\treturn retval == IERC721Receiver(to).onERC721Received.selector;\\n\\t\\t} catch (bytes memory reason) {\\n\\t\\t\\tif (reason.length == 0) {\\n\\t\\t\\t\\trevert TransferToNonERC721ReceiverImplementer();\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tassembly {\\n\\t\\t\\t\\t\\trevert(add(32, reason), mload(reason))\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\n\\t * And also called before burning one token.\\n\\t *\\n\\t * startTokenId - the first token id to be transferred\\n\\t * quantity - the amount to be transferred\\n\\t *\\n\\t * Calling conditions:\\n\\t *\\n\\t * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n\\t * transferred to `to`.\\n\\t * - When `from` is zero, `tokenId` will be minted for `to`.\\n\\t * - When `to` is zero, `tokenId` will be burned by `from`.\\n\\t * - `from` and `to` are never both zero.\\n\\t */\\n\\tfunction _beforeTokenTransfers(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 startTokenId,\\n\\t\\tuint256 quantity\\n\\t) internal virtual {}\\n\\n\\t/**\\n\\t * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\n\\t * minting.\\n\\t * And also called after one token has been burned.\\n\\t *\\n\\t * startTokenId - the first token id to be transferred\\n\\t * quantity - the amount to be transferred\\n\\t *\\n\\t * Calling conditions:\\n\\t *\\n\\t * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n\\t * transferred to `to`.\\n\\t * - When `from` is zero, `tokenId` has been minted for `to`.\\n\\t * - When `to` is zero, `tokenId` has been burned by `from`.\\n\\t * - `from` and `to` are never both zero.\\n\\t */\\n\\tfunction _afterTokenTransfers(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 startTokenId,\\n\\t\\tuint256 quantity\\n\\t) internal virtual {}\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"qty\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"adminMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionEndingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionEndingPriceGang\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"qty\",\"type\":\"uint256\"}],\"name\":\"buyJuice\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"qty\",\"type\":\"uint256\"}],\"name\":\"buyJuiceWithGang\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cloneMintingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enableETH\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableGang\",\"type\":\"bool\"}],\"name\":\"enableSales\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gangToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMintPriceGang\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isETHSaleLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isGangSaleLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleJuiceStartingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleJuiceStartingPriceGang\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC1155\",\"name\":\"erc1155Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"reclaimERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"reclaimERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"erc721Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"reclaimERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setAirdropAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setCloneMintingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newuri\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inGang\",\"type\":\"uint256\"}],\"name\":\"setEndingPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cAddress\",\"type\":\"address\"}],\"name\":\"setGangTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxSupply\",\"type\":\"uint256\"}],\"name\":\"setMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"saleDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleStartPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleStartPriceGang\",\"type\":\"uint256\"}],\"name\":\"startPublicSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEarnings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GutterJuice", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://de4da80e8da9fb44ce0088186ef925c3ecd2bd6489d87e455886159b33e23384"}