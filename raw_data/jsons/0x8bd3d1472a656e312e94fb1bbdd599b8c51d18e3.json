{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity 0.8.9;\r\n\r\n/* This contract is a subsidiary of the Hedron contract. The Hedron      *\r\n *  contract can be found at 0x3819f64f282bf135d62168C1e513280dAF905e06. */\r\n\r\n/* Hedron is a collection of Ethereum / PulseChain smart contracts that  *\r\n * build upon the HEX smart contract to provide additional functionality */\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        _setApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `operator` to operate on all of `owner` tokens\r\n     *\r\n     * Emits a {ApprovalForAll} event.\r\n     */\r\n    function _setApprovalForAll(\r\n        address owner,\r\n        address operator,\r\n        bool approved\r\n    ) internal virtual {\r\n        require(owner != operator, \"ERC721: approve to caller\");\r\n        _operatorApprovals[owner][operator] = approved;\r\n        emit ApprovalForAll(owner, operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver.onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n}\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\n/**\r\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\r\n * enumerability of all the token ids in the contract as well as all token ids owned by each\r\n * account.\r\n */\r\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\r\n    // Mapping from owner to list of owned token IDs\r\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\r\n\r\n    // Mapping from token ID to index of the owner tokens list\r\n    mapping(uint256 => uint256) private _ownedTokensIndex;\r\n\r\n    // Array with all token ids, used for enumeration\r\n    uint256[] private _allTokens;\r\n\r\n    // Mapping from token id to position in the allTokens array\r\n    mapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\r\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\r\n        return _ownedTokens[owner][index];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _allTokens.length;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenByIndex}.\r\n     */\r\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\r\n        return _allTokens[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n\r\n        if (from == address(0)) {\r\n            _addTokenToAllTokensEnumeration(tokenId);\r\n        } else if (from != to) {\r\n            _removeTokenFromOwnerEnumeration(from, tokenId);\r\n        }\r\n        if (to == address(0)) {\r\n            _removeTokenFromAllTokensEnumeration(tokenId);\r\n        } else if (to != from) {\r\n            _addTokenToOwnerEnumeration(to, tokenId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\r\n     * @param to address representing the new owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n     */\r\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\r\n        uint256 length = ERC721.balanceOf(to);\r\n        _ownedTokens[to][length] = tokenId;\r\n        _ownedTokensIndex[tokenId] = length;\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's token tracking data structures.\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list\r\n     */\r\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\r\n        _allTokensIndex[tokenId] = _allTokens.length;\r\n        _allTokens.push(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\r\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\r\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\r\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n     */\r\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\r\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\r\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary\r\n        if (tokenIndex != lastTokenIndex) {\r\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n\r\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n        }\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _ownedTokensIndex[tokenId];\r\n        delete _ownedTokens[from][lastTokenIndex];\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's token tracking data structures.\r\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\r\n     */\r\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\r\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = _allTokens.length - 1;\r\n        uint256 tokenIndex = _allTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\r\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\r\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\r\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\r\n\r\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _allTokensIndex[tokenId];\r\n        _allTokens.pop();\r\n    }\r\n}\r\n\r\n/**\r\n * @title Counters\r\n * @author Matt Condon (@shrugs)\r\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n *\r\n * Include with `using Counters for Counters.Counter;`\r\n */\r\nlibrary Counters {\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        unchecked {\r\n            counter._value += 1;\r\n        }\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        uint256 value = counter._value;\r\n        require(value > 0, \"Counter: decrement overflow\");\r\n        unchecked {\r\n            counter._value = value - 1;\r\n        }\r\n    }\r\n\r\n    function reset(Counter storage counter) internal {\r\n        counter._value = 0;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\r\n * deploying minimal proxy contracts, also known as \"clones\".\r\n *\r\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\r\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\r\n *\r\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\r\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\r\n * deterministic method.\r\n *\r\n * _Available since v3.4._\r\n */\r\nlibrary Clones {\r\n    /**\r\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\r\n     *\r\n     * This function uses the create opcode, which should never revert.\r\n     */\r\n    function clone(address implementation) internal returns (address instance) {\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\r\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n            instance := create(0, ptr, 0x37)\r\n        }\r\n        require(instance != address(0), \"ERC1167: create failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\r\n     *\r\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\r\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\r\n     * the clones cannot be deployed twice at the same address.\r\n     */\r\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\r\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n            instance := create2(0, ptr, 0x37, salt)\r\n        }\r\n        require(instance != address(0), \"ERC1167: create2 failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\r\n     */\r\n    function predictDeterministicAddress(\r\n        address implementation,\r\n        bytes32 salt,\r\n        address deployer\r\n    ) internal pure returns (address predicted) {\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\r\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\r\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\r\n            mstore(add(ptr, 0x4c), salt)\r\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\r\n            predicted := keccak256(add(ptr, 0x37), 0x55)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\r\n     */\r\n    function predictDeterministicAddress(address implementation, bytes32 salt)\r\n        internal\r\n        view\r\n        returns (address predicted)\r\n    {\r\n        return predictDeterministicAddress(implementation, salt, address(this));\r\n    }\r\n}\r\n\r\ninterface IHEX {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Claim(\r\n        uint256 data0,\r\n        uint256 data1,\r\n        bytes20 indexed btcAddr,\r\n        address indexed claimToAddr,\r\n        address indexed referrerAddr\r\n    );\r\n    event ClaimAssist(\r\n        uint256 data0,\r\n        uint256 data1,\r\n        uint256 data2,\r\n        address indexed senderAddr\r\n    );\r\n    event DailyDataUpdate(uint256 data0, address indexed updaterAddr);\r\n    event ShareRateChange(uint256 data0, uint40 indexed stakeId);\r\n    event StakeEnd(\r\n        uint256 data0,\r\n        uint256 data1,\r\n        address indexed stakerAddr,\r\n        uint40 indexed stakeId\r\n    );\r\n    event StakeGoodAccounting(\r\n        uint256 data0,\r\n        uint256 data1,\r\n        address indexed stakerAddr,\r\n        uint40 indexed stakeId,\r\n        address indexed senderAddr\r\n    );\r\n    event StakeStart(\r\n        uint256 data0,\r\n        address indexed stakerAddr,\r\n        uint40 indexed stakeId\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event XfLobbyEnter(\r\n        uint256 data0,\r\n        address indexed memberAddr,\r\n        uint256 indexed entryId,\r\n        address indexed referrerAddr\r\n    );\r\n    event XfLobbyExit(\r\n        uint256 data0,\r\n        address indexed memberAddr,\r\n        uint256 indexed entryId,\r\n        address indexed referrerAddr\r\n    );\r\n\r\n    fallback() external payable;\r\n\r\n    function allocatedSupply() external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function btcAddressClaim(\r\n        uint256 rawSatoshis,\r\n        bytes32[] memory proof,\r\n        address claimToAddr,\r\n        bytes32 pubKeyX,\r\n        bytes32 pubKeyY,\r\n        uint8 claimFlags,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        uint256 autoStakeDays,\r\n        address referrerAddr\r\n    ) external returns (uint256);\r\n\r\n    function btcAddressClaims(bytes20) external view returns (bool);\r\n\r\n    function btcAddressIsClaimable(\r\n        bytes20 btcAddr,\r\n        uint256 rawSatoshis,\r\n        bytes32[] memory proof\r\n    ) external view returns (bool);\r\n\r\n    function btcAddressIsValid(\r\n        bytes20 btcAddr,\r\n        uint256 rawSatoshis,\r\n        bytes32[] memory proof\r\n    ) external pure returns (bool);\r\n\r\n    function claimMessageMatchesSignature(\r\n        address claimToAddr,\r\n        bytes32 claimParamHash,\r\n        bytes32 pubKeyX,\r\n        bytes32 pubKeyY,\r\n        uint8 claimFlags,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external pure returns (bool);\r\n\r\n    function currentDay() external view returns (uint256);\r\n\r\n    function dailyData(uint256)\r\n        external\r\n        view\r\n        returns (\r\n            uint72 dayPayoutTotal,\r\n            uint72 dayStakeSharesTotal,\r\n            uint56 dayUnclaimedSatoshisTotal\r\n        );\r\n\r\n    function dailyDataRange(uint256 beginDay, uint256 endDay)\r\n        external\r\n        view\r\n        returns (uint256[] memory list);\r\n\r\n    function dailyDataUpdate(uint256 beforeDay) external;\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        external\r\n        returns (bool);\r\n\r\n    function globalInfo() external view returns (uint256[13] memory);\r\n\r\n    function globals()\r\n        external\r\n        view\r\n        returns (\r\n            uint72 lockedHeartsTotal,\r\n            uint72 nextStakeSharesTotal,\r\n            uint40 shareRate,\r\n            uint72 stakePenaltyTotal,\r\n            uint16 dailyDataCount,\r\n            uint72 stakeSharesTotal,\r\n            uint40 latestStakeId,\r\n            uint128 claimStats\r\n        );\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        external\r\n        returns (bool);\r\n\r\n    function merkleProofIsValid(bytes32 merkleLeaf, bytes32[] memory proof)\r\n        external\r\n        pure\r\n        returns (bool);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function pubKeyToBtcAddress(\r\n        bytes32 pubKeyX,\r\n        bytes32 pubKeyY,\r\n        uint8 claimFlags\r\n    ) external pure returns (bytes20);\r\n\r\n    function pubKeyToEthAddress(bytes32 pubKeyX, bytes32 pubKeyY)\r\n        external\r\n        pure\r\n        returns (address);\r\n\r\n    function stakeCount(address stakerAddr) external view returns (uint256);\r\n\r\n    function stakeEnd(uint256 stakeIndex, uint40 stakeIdParam) external;\r\n\r\n    function stakeGoodAccounting(\r\n        address stakerAddr,\r\n        uint256 stakeIndex,\r\n        uint40 stakeIdParam\r\n    ) external;\r\n\r\n    function stakeLists(address, uint256)\r\n        external\r\n        view\r\n        returns (\r\n            uint40 stakeId,\r\n            uint72 stakedHearts,\r\n            uint72 stakeShares,\r\n            uint16 lockedDay,\r\n            uint16 stakedDays,\r\n            uint16 unlockedDay,\r\n            bool isAutoStake\r\n        );\r\n\r\n    function stakeStart(uint256 newStakedHearts, uint256 newStakedDays)\r\n        external;\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function xfLobby(uint256) external view returns (uint256);\r\n\r\n    function xfLobbyEnter(address referrerAddr) external payable;\r\n\r\n    function xfLobbyEntry(address memberAddr, uint256 entryId)\r\n        external\r\n        view\r\n        returns (uint256 rawAmount, address referrerAddr);\r\n\r\n    function xfLobbyExit(uint256 enterDay, uint256 count) external;\r\n\r\n    function xfLobbyFlush() external;\r\n\r\n    function xfLobbyMembers(uint256, address)\r\n        external\r\n        view\r\n        returns (uint40 headIndex, uint40 tailIndex);\r\n\r\n    function xfLobbyPendingDays(address memberAddr)\r\n        external\r\n        view\r\n        returns (uint256[2] memory words);\r\n\r\n    function xfLobbyRange(uint256 beginDay, uint256 endDay)\r\n        external\r\n        view\r\n        returns (uint256[] memory list);\r\n}\r\n\r\nstruct HEXDailyData {\r\n    uint72 dayPayoutTotal;\r\n    uint72 dayStakeSharesTotal;\r\n    uint56 dayUnclaimedSatoshisTotal;\r\n}\r\n\r\nstruct HEXGlobals {\r\n    uint72 lockedHeartsTotal;\r\n    uint72 nextStakeSharesTotal;\r\n    uint40 shareRate;\r\n    uint72 stakePenaltyTotal;\r\n    uint16 dailyDataCount;\r\n    uint72 stakeSharesTotal;\r\n    uint40 latestStakeId;\r\n    uint128 claimStats;\r\n}\r\n\r\nstruct HEXStake {\r\n    uint40 stakeId;\r\n    uint72 stakedHearts;\r\n    uint72 stakeShares;\r\n    uint16 lockedDay;\r\n    uint16 stakedDays;\r\n    uint16 unlockedDay;\r\n    bool   isAutoStake;\r\n}\r\n\r\nstruct HEXStakeMinimal {\r\n    uint40 stakeId;\r\n    uint72 stakeShares;\r\n    uint16 lockedDay;\r\n    uint16 stakedDays;\r\n}\r\n\r\nstruct ShareStore {\r\n    HEXStakeMinimal stake;\r\n    uint16          mintedDays;\r\n    uint8           launchBonus;\r\n    uint16          loanStart;\r\n    uint16          loanedDays;\r\n    uint32          interestRate;\r\n    uint8           paymentsMade;\r\n    bool            isLoaned;\r\n}\r\n\r\nstruct ShareCache {\r\n    HEXStakeMinimal _stake;\r\n    uint256         _mintedDays;\r\n    uint256         _launchBonus;\r\n    uint256         _loanStart;\r\n    uint256         _loanedDays;\r\n    uint256         _interestRate;\r\n    uint256         _paymentsMade;\r\n    bool            _isLoaned;\r\n}\r\n\r\naddress constant _hdrnSourceAddress = address(0x9d73Ced2e36C89E5d167151809eeE218a189f801);\r\naddress constant _hdrnFlowAddress   = address(0xF447BE386164dADfB5d1e7622613f289F17024D8);\r\nuint256 constant _hdrnLaunch        = 1645833600;\r\n\r\ncontract HEXStakeInstance {\r\n    \r\n    IHEX       private _hx;\r\n    address    private _creator;\r\n    ShareStore public  share;\r\n\r\n    /**\r\n     * @dev Updates the HSI's internal HEX stake data.\r\n     */\r\n    function _stakeDataUpdate(\r\n    )\r\n        internal\r\n    {\r\n        uint40 stakeId;\r\n        uint72 stakedHearts;\r\n        uint72 stakeShares;\r\n        uint16 lockedDay;\r\n        uint16 stakedDays;\r\n        uint16 unlockedDay;\r\n        bool   isAutoStake;\r\n        \r\n        (stakeId,\r\n         stakedHearts,\r\n         stakeShares,\r\n         lockedDay,\r\n         stakedDays,\r\n         unlockedDay,\r\n         isAutoStake\r\n        ) = _hx.stakeLists(address(this), 0);\r\n\r\n        share.stake.stakeId = stakeId;\r\n        share.stake.stakeShares = stakeShares;\r\n        share.stake.lockedDay = lockedDay;\r\n        share.stake.stakedDays = stakedDays;\r\n    }\r\n\r\n    function initialize(\r\n        address hexAddress\r\n    ) \r\n        external \r\n    {\r\n        require(_creator == address(0),\r\n            \"HSI: Initialization already performed\");\r\n\r\n        /* _creator is not an admin key. It is set at contsruction to be a link\r\n           to the parent contract. In this case HSIM */\r\n        _creator = msg.sender;\r\n\r\n        // set HEX contract address\r\n        _hx = IHEX(payable(hexAddress));\r\n    }\r\n\r\n    /**\r\n     * @dev Creates a new HEX stake using all HEX ERC20 tokens assigned\r\n     *      to the HSI's contract address. This is a privileged operation only\r\n     *      HEXStakeInstanceManager.sol can call.\r\n     * @param stakeLength Number of days the HEX ERC20 tokens will be staked.\r\n     */\r\n    function create(\r\n        uint256 stakeLength\r\n    )\r\n        external\r\n    {\r\n        uint256 hexBalance = _hx.balanceOf(address(this));\r\n\r\n        require(msg.sender == _creator,\r\n            \"HSI: Caller must be contract creator\");\r\n        require(share.stake.stakedDays == 0,\r\n            \"HSI: Creation already performed\");\r\n        require(hexBalance > 0,\r\n            \"HSI: Creation requires a non-zero HEX balance\");\r\n\r\n        _hx.stakeStart(\r\n            hexBalance,\r\n            stakeLength\r\n        );\r\n\r\n        _stakeDataUpdate();\r\n    }\r\n\r\n    /**\r\n     * @dev Calls the HEX function \"stakeGoodAccounting\" against the\r\n     *      HEX stake held within the HSI.\r\n     */\r\n    function goodAccounting(\r\n    )\r\n        external\r\n    {\r\n        require(share.stake.stakedDays > 0,\r\n            \"HSI: Creation not yet performed\");\r\n\r\n        _hx.stakeGoodAccounting(address(this), 0, share.stake.stakeId);\r\n\r\n        _stakeDataUpdate();\r\n    }\r\n\r\n    /**\r\n     * @dev Ends the HEX stake, approves the \"_creator\" address to transfer\r\n     *      all HEX ERC20 tokens, and self-destructs the HSI. This is a \r\n     *      privileged operation only HEXStakeInstanceManager.sol can call.\r\n     */\r\n    function destroy(\r\n    )\r\n        external\r\n    {\r\n        require(msg.sender == _creator,\r\n            \"HSI: Caller must be contract creator\");\r\n        require(share.stake.stakedDays > 0,\r\n            \"HSI: Creation not yet performed\");\r\n\r\n        _hx.stakeEnd(0, share.stake.stakeId);\r\n        \r\n        uint256 hexBalance = _hx.balanceOf(address(this));\r\n\r\n        if (_hx.approve(_creator, hexBalance)) {\r\n            selfdestruct(payable(_creator));\r\n        }\r\n        else {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Updates the HSI's internal share data. This is a privileged \r\n     *      operation only HEXStakeInstanceManager.sol can call.\r\n     * @param _share \"ShareCache\" object containing updated share data.\r\n     */\r\n    function update(\r\n        ShareCache memory _share\r\n    )\r\n        external \r\n    {\r\n        require(msg.sender == _creator,\r\n            \"HSI: Caller must be contract creator\");\r\n\r\n        share.mintedDays   = uint16(_share._mintedDays);\r\n        share.launchBonus  = uint8 (_share._launchBonus);\r\n        share.loanStart    = uint16(_share._loanStart);\r\n        share.loanedDays   = uint16(_share._loanedDays);\r\n        share.interestRate = uint32(_share._interestRate);\r\n        share.paymentsMade = uint8 (_share._paymentsMade);\r\n        share.isLoaned     = _share._isLoaned;\r\n    }\r\n\r\n    /**\r\n     * @dev Fetches stake data from the HEX contract.\r\n     * @return A \"HEXStake\" object containg the HEX stake data. \r\n     */\r\n    function stakeDataFetch(\r\n    ) \r\n        external\r\n        view\r\n        returns(HEXStake memory)\r\n    {\r\n        uint40 stakeId;\r\n        uint72 stakedHearts;\r\n        uint72 stakeShares;\r\n        uint16 lockedDay;\r\n        uint16 stakedDays;\r\n        uint16 unlockedDay;\r\n        bool   isAutoStake;\r\n        \r\n        (stakeId,\r\n         stakedHearts,\r\n         stakeShares,\r\n         lockedDay,\r\n         stakedDays,\r\n         unlockedDay,\r\n         isAutoStake\r\n        ) = _hx.stakeLists(address(this), 0);\r\n\r\n        return HEXStake(\r\n            stakeId,\r\n            stakedHearts,\r\n            stakeShares,\r\n            lockedDay,\r\n            stakedDays,\r\n            unlockedDay,\r\n            isAutoStake\r\n        );\r\n    }\r\n}\r\n\r\ninterface IHedron {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Claim(uint256 data, address indexed claimant, uint40 indexed stakeId);\r\n    event LoanEnd(\r\n        uint256 data,\r\n        address indexed borrower,\r\n        uint40 indexed stakeId\r\n    );\r\n    event LoanLiquidateBid(\r\n        uint256 data,\r\n        address indexed bidder,\r\n        uint40 indexed stakeId,\r\n        uint40 indexed liquidationId\r\n    );\r\n    event LoanLiquidateExit(\r\n        uint256 data,\r\n        address indexed liquidator,\r\n        uint40 indexed stakeId,\r\n        uint40 indexed liquidationId\r\n    );\r\n    event LoanLiquidateStart(\r\n        uint256 data,\r\n        address indexed borrower,\r\n        uint40 indexed stakeId,\r\n        uint40 indexed liquidationId\r\n    );\r\n    event LoanPayment(\r\n        uint256 data,\r\n        address indexed borrower,\r\n        uint40 indexed stakeId\r\n    );\r\n    event LoanStart(\r\n        uint256 data,\r\n        address indexed borrower,\r\n        uint40 indexed stakeId\r\n    );\r\n    event Mint(uint256 data, address indexed minter, uint40 indexed stakeId);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function calcLoanPayment(\r\n        address borrower,\r\n        uint256 hsiIndex,\r\n        address hsiAddress\r\n    ) external view returns (uint256, uint256);\r\n\r\n    function calcLoanPayoff(\r\n        address borrower,\r\n        uint256 hsiIndex,\r\n        address hsiAddress\r\n    ) external view returns (uint256, uint256);\r\n\r\n    function claimInstanced(\r\n        uint256 hsiIndex,\r\n        address hsiAddress,\r\n        address hsiStarterAddress\r\n    ) external;\r\n\r\n    function claimNative(uint256 stakeIndex, uint40 stakeId)\r\n        external\r\n        returns (uint256);\r\n\r\n    function currentDay() external view returns (uint256);\r\n\r\n    function dailyDataList(uint256)\r\n        external\r\n        view\r\n        returns (\r\n            uint72 dayMintedTotal,\r\n            uint72 dayLoanedTotal,\r\n            uint72 dayBurntTotal,\r\n            uint32 dayInterestRate,\r\n            uint8 dayMintMultiplier\r\n        );\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        external\r\n        returns (bool);\r\n\r\n    function hsim() external view returns (address);\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        external\r\n        returns (bool);\r\n\r\n    function liquidationList(uint256)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 liquidationStart,\r\n            address hsiAddress,\r\n            uint96 bidAmount,\r\n            address liquidator,\r\n            uint88 endOffset,\r\n            bool isActive\r\n        );\r\n\r\n    function loanInstanced(uint256 hsiIndex, address hsiAddress)\r\n        external\r\n        returns (uint256);\r\n\r\n    function loanLiquidate(\r\n        address owner,\r\n        uint256 hsiIndex,\r\n        address hsiAddress\r\n    ) external returns (uint256);\r\n\r\n    function loanLiquidateBid(uint256 liquidationId, uint256 liquidationBid)\r\n        external\r\n        returns (uint256);\r\n\r\n    function loanLiquidateExit(uint256 hsiIndex, uint256 liquidationId)\r\n        external\r\n        returns (address);\r\n\r\n    function loanPayment(uint256 hsiIndex, address hsiAddress)\r\n        external\r\n        returns (uint256);\r\n\r\n    function loanPayoff(uint256 hsiIndex, address hsiAddress)\r\n        external\r\n        returns (uint256);\r\n\r\n    function loanedSupply() external view returns (uint256);\r\n\r\n    function mintInstanced(uint256 hsiIndex, address hsiAddress)\r\n        external\r\n        returns (uint256);\r\n\r\n    function mintNative(uint256 stakeIndex, uint40 stakeId)\r\n        external\r\n        returns (uint256);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function proofOfBenevolence(uint256 amount) external;\r\n\r\n    function shareList(uint256)\r\n        external\r\n        view\r\n        returns (\r\n            HEXStakeMinimal memory stake,\r\n            uint16 mintedDays,\r\n            uint8 launchBonus,\r\n            uint16 loanStart,\r\n            uint16 loanedDays,\r\n            uint32 interestRate,\r\n            uint8 paymentsMade,\r\n            bool isLoaned\r\n        );\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\nlibrary LibPart {\r\n    bytes32 public constant TYPE_HASH = keccak256(\"Part(address account,uint96 value)\");\r\n\r\n    struct Part {\r\n        address payable account;\r\n        uint96 value;\r\n    }\r\n\r\n    function hash(Part memory part) internal pure returns (bytes32) {\r\n        return keccak256(abi.encode(TYPE_HASH, part.account, part.value));\r\n    }\r\n}\r\n\r\nabstract contract AbstractRoyalties {\r\n    mapping (uint256 => LibPart.Part[]) internal royalties;\r\n\r\n    function _saveRoyalties(uint256 id, LibPart.Part[] memory _royalties) internal {\r\n        uint256 totalValue;\r\n        for (uint i = 0; i < _royalties.length; i++) {\r\n            require(_royalties[i].account != address(0x0), \"Recipient should be present\");\r\n            require(_royalties[i].value != 0, \"Royalty value should be positive\");\r\n            totalValue += _royalties[i].value;\r\n            royalties[id].push(_royalties[i]);\r\n        }\r\n        require(totalValue < 10000, \"Royalty total value should be < 10000\");\r\n        _onRoyaltiesSet(id, _royalties);\r\n    }\r\n\r\n    function _updateAccount(uint256 _id, address _from, address _to) internal {\r\n        uint length = royalties[_id].length;\r\n        for(uint i = 0; i < length; i++) {\r\n            if (royalties[_id][i].account == _from) {\r\n                royalties[_id][i].account = payable(address(uint160(_to)));\r\n            }\r\n        }\r\n    }\r\n\r\n    function _onRoyaltiesSet(uint256 id, LibPart.Part[] memory _royalties) virtual internal;\r\n}\r\n\r\ninterface RoyaltiesV2 {\r\n    event RoyaltiesSet(uint256 tokenId, LibPart.Part[] royalties);\r\n\r\n    function getRaribleV2Royalties(uint256 id) external view returns (LibPart.Part[] memory);\r\n}\r\n\r\ncontract RoyaltiesV2Impl is AbstractRoyalties, RoyaltiesV2 {\r\n\r\n    function getRaribleV2Royalties(uint256 id) override external view returns (LibPart.Part[] memory) {\r\n        return royalties[id];\r\n    }\r\n\r\n    function _onRoyaltiesSet(uint256 id, LibPart.Part[] memory _royalties) override internal {\r\n        emit RoyaltiesSet(id, _royalties);\r\n    }\r\n}\r\n\r\nlibrary LibRoyaltiesV2 {\r\n    /*\r\n     * bytes4(keccak256('getRaribleV2Royalties(uint256)')) == 0xcad96cca\r\n     */\r\n    bytes4 constant _INTERFACE_ID_ROYALTIES = 0xcad96cca;\r\n}\r\n\r\ncontract HEXStakeInstanceManager is ERC721, ERC721Enumerable, RoyaltiesV2Impl {\r\n\r\n    using Counters for Counters.Counter;\r\n\r\n    bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\r\n    uint96 private constant _hsimRoyaltyBasis = 15; // Rarible V2 royalty basis\r\n    string private constant _hostname = \"https://api.hedron.pro/\";\r\n    string private constant _endpoint = \"/hsi/\";\r\n    \r\n    Counters.Counter private _tokenIds;\r\n    address          private _creator;\r\n    IHEX             private _hx;\r\n    address          private _hxAddress;\r\n    address          private _hsiImplementation;\r\n\r\n    mapping(address => address[]) public  hsiLists;\r\n    mapping(uint256 => address)   public  hsiToken;\r\n \r\n    constructor(\r\n        address hexAddress\r\n    )\r\n        ERC721(\"HEX Stake Instance\", \"HSI\")\r\n    {\r\n        /* _creator is not an admin key. It is set at contsruction to be a link\r\n           to the parent contract. In this case Hedron */\r\n        _creator = msg.sender;\r\n\r\n        // set HEX contract address\r\n        _hx = IHEX(payable(hexAddress));\r\n        _hxAddress = hexAddress;\r\n\r\n        // create HSI implementation\r\n        _hsiImplementation = address(new HEXStakeInstance());\r\n        \r\n        // initialize the HSI just in case\r\n        HEXStakeInstance hsi = HEXStakeInstance(_hsiImplementation);\r\n        hsi.initialize(hexAddress);\r\n    }\r\n\r\n    function _baseURI(\r\n    )\r\n        internal\r\n        view\r\n        virtual\r\n        override\r\n        returns (string memory)\r\n    {\r\n        string memory chainid = Strings.toString(block.chainid);\r\n        return string(abi.encodePacked(_hostname, chainid, _endpoint));\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    )\r\n        internal\r\n        override(ERC721, ERC721Enumerable) \r\n    {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n    }\r\n\r\n    event HSIStart(\r\n        uint256         timestamp,\r\n        address indexed hsiAddress,\r\n        address indexed staker\r\n    );\r\n\r\n    event HSIEnd(\r\n        uint256         timestamp,\r\n        address indexed hsiAddress,\r\n        address indexed staker\r\n    );\r\n\r\n    event HSITransfer(\r\n        uint256         timestamp,\r\n        address indexed hsiAddress,\r\n        address indexed oldStaker,\r\n        address indexed newStaker\r\n    );\r\n\r\n    event HSITokenize(\r\n        uint256         timestamp,\r\n        uint256 indexed hsiTokenId,\r\n        address indexed hsiAddress,\r\n        address indexed staker\r\n    );\r\n\r\n    event HSIDetokenize(\r\n        uint256         timestamp,\r\n        uint256 indexed hsiTokenId,\r\n        address indexed hsiAddress,\r\n        address indexed staker\r\n    );\r\n\r\n    /**\r\n     * @dev Removes a HEX stake instance (HSI) contract address from an address mapping.\r\n     * @param hsiList A mapped list of HSI contract addresses.\r\n     * @param hsiIndex The index of the HSI contract address which will be removed.\r\n     */\r\n    function _pruneHSI(\r\n        address[] storage hsiList,\r\n        uint256 hsiIndex\r\n    )\r\n        internal\r\n    {\r\n        uint256 lastIndex = hsiList.length - 1;\r\n\r\n        if (hsiIndex != lastIndex) {\r\n            hsiList[hsiIndex] = hsiList[lastIndex];\r\n        }\r\n\r\n        hsiList.pop();\r\n    }\r\n\r\n    /**\r\n     * @dev Loads share data from a HEX stake instance (HSI) into a \"ShareCache\" object.\r\n     * @param hsi A HSI contract object from which share data will be loaded.\r\n     * @return \"ShareCache\" object containing the loaded share data.\r\n     */\r\n    function _hsiLoad(\r\n        HEXStakeInstance hsi\r\n    ) \r\n        internal\r\n        view\r\n        returns (ShareCache memory)\r\n    {\r\n        HEXStakeMinimal memory stake;\r\n        uint16                 mintedDays;\r\n        uint8                  launchBonus;\r\n        uint16                 loanStart;\r\n        uint16                 loanedDays;\r\n        uint32                 interestRate;\r\n        uint8                  paymentsMade;\r\n        bool                   isLoaned;\r\n\r\n        (stake,\r\n         mintedDays,\r\n         launchBonus,\r\n         loanStart,\r\n         loanedDays,\r\n         interestRate,\r\n         paymentsMade,\r\n         isLoaned) = hsi.share();\r\n\r\n        return ShareCache(\r\n            stake,\r\n            mintedDays,\r\n            launchBonus,\r\n            loanStart,\r\n            loanedDays,\r\n            interestRate,\r\n            paymentsMade,\r\n            isLoaned\r\n        );\r\n    }\r\n\r\n    // Internal NFT Marketplace Glue\r\n\r\n    /** @dev Sets the Rarible V2 royalties on a specific token\r\n     *  @param tokenId Unique ID of the HSI NFT token.\r\n     */\r\n    function _setRoyalties(\r\n        uint256 tokenId\r\n    )\r\n        internal\r\n    {\r\n        LibPart.Part[] memory _royalties = new LibPart.Part[](1);\r\n        _royalties[0].value = _hsimRoyaltyBasis;\r\n        _royalties[0].account = payable(_hdrnFlowAddress);\r\n        _saveRoyalties(tokenId, _royalties);\r\n    }\r\n\r\n    /**\r\n     * @dev Retreives the number of HSI elements in an addresses HSI list.\r\n     * @param user Address to retrieve the HSI list for.\r\n     * @return Number of HSI elements found within the HSI list.\r\n     */\r\n    function hsiCount(\r\n        address user\r\n    )\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return hsiLists[user].length;\r\n    }\r\n\r\n    /**\r\n     * @dev Wrapper function for hsiCount to allow HEX based applications to pull stake data.\r\n     * @param user Address to retrieve the HSI list for.\r\n     * @return Number of HSI elements found within the HSI list. \r\n     */\r\n    function stakeCount(\r\n        address user\r\n    )\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return hsiCount(user);\r\n    }\r\n\r\n    /**\r\n     * @dev Wrapper function for hsiLists to allow HEX based applications to pull stake data.\r\n     * @param user Address to retrieve the HSI list for.\r\n     * @param hsiIndex The index of the HSI contract address which will returned. \r\n     * @return \"HEXStake\" object containing HEX stake data. \r\n     */\r\n    function stakeLists(\r\n        address user,\r\n        uint256 hsiIndex\r\n    )\r\n        external\r\n        view\r\n        returns (HEXStake memory)\r\n    {\r\n        address[] storage hsiList = hsiLists[user];\r\n\r\n        HEXStakeInstance hsi = HEXStakeInstance(hsiList[hsiIndex]);\r\n\r\n        return hsi.stakeDataFetch();\r\n    }\r\n\r\n    /**\r\n     * @dev Creates a new HEX stake instance (HSI), transfers HEX ERC20 tokens to the\r\n     *      HSI's contract address, and calls the \"initialize\" function.\r\n     * @param amount Number of HEX ERC20 tokens to be staked.\r\n     * @param length Number of days the HEX ERC20 tokens will be staked.\r\n     * @return Address of the newly created HSI contract.\r\n     */\r\n    function hexStakeStart (\r\n        uint256 amount,\r\n        uint256 length\r\n    )\r\n        external\r\n        returns (address)\r\n    {\r\n        require(amount <= _hx.balanceOf(msg.sender),\r\n            \"HSIM: Insufficient HEX to facilitate stake\");\r\n\r\n        address[] storage hsiList = hsiLists[msg.sender];\r\n\r\n        address hsiAddress = Clones.clone(_hsiImplementation);\r\n        HEXStakeInstance hsi = HEXStakeInstance(hsiAddress);\r\n        hsi.initialize(_hxAddress);\r\n\r\n        hsiList.push(hsiAddress);\r\n        uint256 hsiIndex = hsiList.length - 1;\r\n\r\n        require(_hx.transferFrom(msg.sender, hsiAddress, amount),\r\n            \"HSIM: HEX transfer from message sender to HSIM failed\");\r\n\r\n        hsi.create(length);\r\n\r\n        IHedron hedron = IHedron(_creator);\r\n        hedron.claimInstanced(hsiIndex, hsiAddress, msg.sender);\r\n\r\n        emit HSIStart(block.timestamp, hsiAddress, msg.sender);\r\n\r\n        return hsiAddress;\r\n    }\r\n\r\n    /**\r\n     * @dev Calls the HEX stake instance (HSI) function \"destroy\", transfers HEX ERC20 tokens\r\n     *      from the HSI's contract address to the senders address.\r\n     * @param hsiIndex Index of the HSI contract's address in the caller's HSI list.\r\n     * @param hsiAddress Address of the HSI contract in which to call the \"destroy\" function.\r\n     * @return Amount of HEX ERC20 tokens awarded via ending the HEX stake.\r\n     */\r\n    function hexStakeEnd (\r\n        uint256 hsiIndex,\r\n        address hsiAddress\r\n    )\r\n        external\r\n        returns (uint256)\r\n    {\r\n        address[] storage hsiList = hsiLists[msg.sender];\r\n\r\n        require(hsiAddress == hsiList[hsiIndex],\r\n            \"HSIM: HSI index address mismatch\");\r\n\r\n        HEXStakeInstance hsi = HEXStakeInstance(hsiAddress);\r\n        ShareCache memory share = _hsiLoad(hsi);\r\n\r\n        require (share._isLoaned == false,\r\n            \"HSIM: Cannot call stakeEnd against a loaned stake\");\r\n\r\n        hsi.destroy();\r\n\r\n        emit HSIEnd(block.timestamp, hsiAddress, msg.sender);\r\n\r\n        uint256 hsiBalance = _hx.balanceOf(hsiAddress);\r\n\r\n        if (hsiBalance > 0) {\r\n            require(_hx.transferFrom(hsiAddress, msg.sender, hsiBalance),\r\n                \"HSIM: HEX transfer from HSI failed\");\r\n        }\r\n\r\n        _pruneHSI(hsiList, hsiIndex);\r\n\r\n        return hsiBalance;\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a HEX stake instance (HSI) contract address mapping into a\r\n     *      HSI ERC721 token.\r\n     * @param hsiIndex Index of the HSI contract's address in the caller's HSI list.\r\n     * @param hsiAddress Address of the HSI contract to be converted.\r\n     * @return Token ID of the newly minted HSI ERC721 token.\r\n     */\r\n    function hexStakeTokenize (\r\n        uint256 hsiIndex,\r\n        address hsiAddress\r\n    )\r\n        external\r\n        returns (uint256)\r\n    {\r\n        address[] storage hsiList = hsiLists[msg.sender];\r\n\r\n        require(hsiAddress == hsiList[hsiIndex],\r\n            \"HSIM: HSI index address mismatch\");\r\n\r\n        HEXStakeInstance hsi = HEXStakeInstance(hsiAddress);\r\n        ShareCache memory share = _hsiLoad(hsi);\r\n\r\n        require (share._isLoaned == false,\r\n            \"HSIM: Cannot tokenize a loaned stake\");\r\n\r\n        _tokenIds.increment();\r\n\r\n        uint256 newTokenId = _tokenIds.current();\r\n\r\n        _mint(msg.sender, newTokenId);\r\n         hsiToken[newTokenId] = hsiAddress;\r\n\r\n        _setRoyalties(newTokenId);\r\n\r\n        _pruneHSI(hsiList, hsiIndex);\r\n\r\n        emit HSITokenize(\r\n            block.timestamp,\r\n            newTokenId,\r\n            hsiAddress,\r\n            msg.sender\r\n        );\r\n\r\n        return newTokenId;\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a HEX stake instance (HSI) ERC721 token into an address mapping.\r\n     * @param tokenId ID of the HSI ERC721 token to be converted.\r\n     * @return Address of the detokenized HSI contract.\r\n     */\r\n    function hexStakeDetokenize (\r\n        uint256 tokenId\r\n    )\r\n        external\r\n        returns (address)\r\n    {\r\n        require(ownerOf(tokenId) == msg.sender,\r\n            \"HSIM: Detokenization requires token ownership\");\r\n\r\n        address hsiAddress = hsiToken[tokenId];\r\n        address[] storage hsiList = hsiLists[msg.sender];\r\n\r\n        hsiList.push(hsiAddress);\r\n        hsiToken[tokenId] = address(0);\r\n\r\n        _burn(tokenId);\r\n\r\n        emit HSIDetokenize(\r\n            block.timestamp,\r\n            tokenId, \r\n            hsiAddress,\r\n            msg.sender\r\n        );\r\n\r\n        return hsiAddress;\r\n    }\r\n\r\n    /**\r\n     * @dev Updates the share data of a HEX stake instance (HSI) contract.\r\n     *      This is a pivileged operation only Hedron.sol can call.\r\n     * @param holder Address of the HSI contract owner.\r\n     * @param hsiIndex Index of the HSI contract's address in the holder's HSI list.\r\n     * @param hsiAddress Address of the HSI contract to be updated.\r\n     * @param share \"ShareCache\" object containing updated share data.\r\n     */\r\n    function hsiUpdate (\r\n        address holder,\r\n        uint256 hsiIndex,\r\n        address hsiAddress,\r\n        ShareCache memory share\r\n    )\r\n        external\r\n    {\r\n        require(msg.sender == _creator,\r\n            \"HSIM: Caller must be contract creator\");\r\n\r\n        address[] storage hsiList = hsiLists[holder];\r\n\r\n        require(hsiAddress == hsiList[hsiIndex],\r\n            \"HSIM: HSI index address mismatch\");\r\n\r\n        HEXStakeInstance hsi = HEXStakeInstance(hsiAddress);\r\n        hsi.update(share);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of a HEX stake instance (HSI) contract to a new address.\r\n     *      This is a pivileged operation only Hedron.sol can call. End users can use\r\n     *      the NFT tokenize / detokenize to handle HSI transfers.\r\n     * @param currentHolder Address to transfer the HSI contract from.\r\n     * @param hsiIndex Index of the HSI contract's address in the currentHolder's HSI list.\r\n     * @param hsiAddress Address of the HSI contract to be transfered.\r\n     * @param newHolder Address to transfer to HSI contract to.\r\n     */\r\n    function hsiTransfer (\r\n        address currentHolder,\r\n        uint256 hsiIndex,\r\n        address hsiAddress,\r\n        address newHolder\r\n    )\r\n        external\r\n    {\r\n        require(msg.sender == _creator,\r\n            \"HSIM: Caller must be contract creator\");\r\n\r\n        address[] storage hsiListCurrent = hsiLists[currentHolder];\r\n        address[] storage hsiListNew = hsiLists[newHolder];\r\n\r\n        require(hsiAddress == hsiListCurrent[hsiIndex],\r\n            \"HSIM: HSI index address mismatch\");\r\n\r\n        hsiListNew.push(hsiAddress);\r\n        _pruneHSI(hsiListCurrent, hsiIndex);\r\n\r\n        emit HSITransfer(\r\n                    block.timestamp,\r\n                    hsiAddress,\r\n                    currentHolder,\r\n                    newHolder\r\n                );\r\n    }\r\n\r\n    // External NFT Marketplace Glue\r\n\r\n    /**\r\n     * @dev Implements ERC2981 royalty functionality. We just read the royalty data from\r\n     *      the Rarible V2 implementation. \r\n     * @param tokenId Unique ID of the HSI NFT token.\r\n     * @param salePrice Price the HSI NFT token was sold for.\r\n     * @return receiver address to send the royalties to as well as the royalty amount.\r\n     */\r\n    function royaltyInfo(\r\n        uint256 tokenId,\r\n        uint256 salePrice\r\n    )\r\n        external\r\n        view\r\n        returns (address receiver, uint256 royaltyAmount)\r\n    {\r\n        LibPart.Part[] memory _royalties = royalties[tokenId];\r\n        \r\n        if (_royalties.length > 0) {\r\n            return (_royalties[0].account, (salePrice * _royalties[0].value) / 10000);\r\n        }\r\n\r\n        return (address(0), 0);\r\n    }\r\n\r\n    /**\r\n     * @dev returns _hdrnFlowAddress, needed for some NFT marketplaces. This is not\r\n     *       an admin key.\r\n     * @return _hdrnFlowAddress\r\n     */\r\n    function owner(\r\n    )\r\n        external\r\n        pure\r\n        returns (address) \r\n    {\r\n        return _hdrnFlowAddress;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds Rarible V2 and ERC2981 interface support.\r\n     * @param interfaceId Unique contract interface identifier.\r\n     * @return True if the interface is supported, false if not.\r\n     */\r\n    function supportsInterface(\r\n        bytes4 interfaceId\r\n    )\r\n        public\r\n        view\r\n        virtual\r\n        override(ERC721, ERC721Enumerable)\r\n        returns (bool)\r\n    {\r\n        if (interfaceId == LibRoyaltiesV2._INTERFACE_ID_ROYALTIES) {\r\n            return true;\r\n        }\r\n\r\n        if (interfaceId == _INTERFACE_ID_ERC2981) {\r\n            return true;\r\n        }\r\n\r\n        return super.supportsInterface(interfaceId);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hexAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"hsiTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"hsiAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"HSIDetokenize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"hsiAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"HSIEnd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"hsiAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"HSIStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"hsiTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"hsiAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"HSITokenize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"hsiAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldStaker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newStaker\",\"type\":\"address\"}],\"name\":\"HSITransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"}],\"indexed\":false,\"internalType\":\"struct LibPart.Part[]\",\"name\":\"royalties\",\"type\":\"tuple[]\"}],\"name\":\"RoyaltiesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getRaribleV2Royalties\",\"outputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"}],\"internalType\":\"struct LibPart.Part[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"hexStakeDetokenize\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"hsiIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"hsiAddress\",\"type\":\"address\"}],\"name\":\"hexStakeEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"hexStakeStart\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"hsiIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"hsiAddress\",\"type\":\"address\"}],\"name\":\"hexStakeTokenize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"hsiCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hsiLists\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hsiToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currentHolder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"hsiIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"hsiAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newHolder\",\"type\":\"address\"}],\"name\":\"hsiTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"hsiIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"hsiAddress\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"uint40\",\"name\":\"stakeId\",\"type\":\"uint40\"},{\"internalType\":\"uint72\",\"name\":\"stakeShares\",\"type\":\"uint72\"},{\"internalType\":\"uint16\",\"name\":\"lockedDay\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"stakedDays\",\"type\":\"uint16\"}],\"internalType\":\"struct HEXStakeMinimal\",\"name\":\"_stake\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_mintedDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_launchBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loanStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loanedDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_paymentsMade\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLoaned\",\"type\":\"bool\"}],\"internalType\":\"struct ShareCache\",\"name\":\"share\",\"type\":\"tuple\"}],\"name\":\"hsiUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"stakeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"hsiIndex\",\"type\":\"uint256\"}],\"name\":\"stakeLists\",\"outputs\":[{\"components\":[{\"internalType\":\"uint40\",\"name\":\"stakeId\",\"type\":\"uint40\"},{\"internalType\":\"uint72\",\"name\":\"stakedHearts\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"stakeShares\",\"type\":\"uint72\"},{\"internalType\":\"uint16\",\"name\":\"lockedDay\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"stakedDays\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"unlockedDay\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isAutoStake\",\"type\":\"bool\"}],\"internalType\":\"struct HEXStake\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "HEXStakeInstanceManager", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "369", "ConstructorArguments": "0000000000000000000000002b591e99afe9f32eaa6214f7b7629768c40eeb39", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://55e7b705b10f2b2c963984150458d56028c6a362cfda89761c00dbc65cff4c51"}