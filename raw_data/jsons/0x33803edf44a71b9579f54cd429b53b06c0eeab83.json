{"SourceCode": "pragma solidity ^0.4.15;\r\n\r\n/**\r\n* GoldGate Token Contract\r\n* Copyright \u00a9 2017 by GoldGate https://goldgate.io\r\n*/\r\n\r\n/**\r\n * @title ERC20Basic\r\n * Simpler version of ERC20 interface\r\n * https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * transfer token for a specified address\r\n  */\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * Gets the balance of the specified address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * The Ownable contract has an owner address, and provides basic authorization control\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * Allows the current owner to transfer control of the contract to a newOwner.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    require(newOwner != address(0));      \r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n */\r\ncontract GGOwnable is Ownable {\r\n\r\n  address public newOwner;\r\n\r\n  /**\r\n   * Allows the current owner to transfer control of the contract to an otherOwner.\r\n   */\r\n  function transferOwnership(address otherOwner) onlyOwner {\r\n    require(otherOwner != address(0));      \r\n    newOwner = otherOwner;\r\n  }\r\n\r\n  /**\r\n   * Finish ownership transfer.\r\n   */\r\n  function approveOwnership() {\r\n    require(msg.sender == newOwner);\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n    newOwner = address(0);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Moderated\r\n * Moderator can make transfers from and to any account (including frozen).\r\n */\r\ncontract GGModerated is GGOwnable {\r\n\r\n  address public moderator;\r\n  address public newModerator;\r\n\r\n  /**\r\n   * Throws if called by any account other than the moderator.\r\n   */\r\n  modifier onlyModerator() {\r\n    require(msg.sender == moderator);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * Throws if called by any account other than the owner or moderator.\r\n   */\r\n  modifier onlyOwnerOrModerator() {\r\n    require((msg.sender == moderator) || (msg.sender == owner));\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * Moderator same as owner\r\n   */\r\n  function GGModerated(){\r\n    moderator = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * Allows the current moderator to transfer control of the contract to an otherModerator.\r\n   */\r\n  function transferModeratorship(address otherModerator) onlyModerator {\r\n    newModerator = otherModerator;\r\n  }\r\n\r\n  /**\r\n   * Complete moderatorship transfer.\r\n   */\r\n  function approveModeratorship() {\r\n    require(msg.sender == newModerator);\r\n    moderator = newModerator;\r\n    newModerator = address(0);\r\n  }\r\n\r\n  /**\r\n   * Removes moderator from the contract.\r\n   */\r\n  function removeModeratorship() onlyOwner {\r\n      moderator = address(0);\r\n  }\r\n\r\n  function hasModerator() constant returns(bool) {\r\n      return (moderator != address(0));\r\n  }\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n */\r\ncontract GGPausable is Pausable, GGModerated {\r\n  /**\r\n   * called by the owner or moderator to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwnerOrModerator whenNotPaused {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * called by the owner or moderator to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwnerOrModerator whenPaused {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n * Implementation of the basic standard token.\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n  /**\r\n   * transfer tokens from one address to another\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   */\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n    // to change the approve amount you first have to reduce the addresses`\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * function to check the amount of tokens that an owner allowed to a spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n  \r\n  function increaseApproval (address _spender, uint _addedValue) \r\n    returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue) \r\n    returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * Pausable token with moderator role and freeze address implementation\r\n **/\r\ncontract ModToken is StandardToken, GGPausable {\r\n\r\n  mapping(address => bool) frozen;\r\n\r\n  /**\r\n   * check if given address is frozen. Freeze works only if moderator role is active\r\n   */\r\n  function isFrozen(address _addr) constant returns (bool){\r\n      return frozen[_addr] && hasModerator();\r\n  }\r\n\r\n  /**\r\n   * Freezes address (no transfer can be made from or to this address).\r\n   */\r\n  function freeze(address _addr) onlyModerator {\r\n      frozen[_addr] = true;\r\n  }\r\n\r\n  /**\r\n   * Unfreezes frozen address.\r\n   */\r\n  function unfreeze(address _addr) onlyModerator {\r\n      frozen[_addr] = false;\r\n  }\r\n\r\n  /**\r\n   * Declines transfers from/to frozen addresses.\r\n   */\r\n  function transfer(address _to, uint256 _value) whenNotPaused returns (bool) {\r\n    require(!isFrozen(msg.sender));\r\n    require(!isFrozen(_to));\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  /**\r\n   * Declines transfers from/to/by frozen addresses.\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) whenNotPaused returns (bool) {\r\n    require(!isFrozen(msg.sender));\r\n    require(!isFrozen(_from));\r\n    require(!isFrozen(_to));\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  /**\r\n   * Allows moderator to transfer tokens from one address to another.\r\n   */\r\n  function moderatorTransferFrom(address _from, address _to, uint256 _value) onlyModerator returns (bool) {\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract GoldGate is ModToken {\r\n  string public constant version = \"1.0.0\";\r\n  string public constant name = \"GoldGate\";\r\n  string public constant symbol = \"BGG\";\r\n  uint256 public constant decimals = 8;\r\n\r\n  function GoldGate(uint256 _initialSupply) {   \r\n    totalSupply = _initialSupply;\r\n    balances[msg.sender] = _initialSupply;\r\n  }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"moderatorTransferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"moderator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"removeModeratorship\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"unfreeze\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"approveOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"otherModerator\",\"type\":\"address\"}],\"name\":\"transferModeratorship\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"freeze\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasModerator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"approveModeratorship\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newModerator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isFrozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"otherOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_initialSupply\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "ContractName": "GoldGate", "CompilerVersion": "v0.4.15+commit.bbb8e64f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000093cafac6a8000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://c0174ba34ccf95f255f16a8c9f6f60c132cd99cbd284aa7fc62d07cf5b62d69b"}