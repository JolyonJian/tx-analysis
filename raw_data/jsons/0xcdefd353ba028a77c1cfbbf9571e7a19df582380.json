{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/LockLeash.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/ILockLeash.sol\\\";\\nimport \\\"./interfaces/ILandAuction.sol\\\";\\n\\ncontract LockLeash is ILockLeash, Ownable {\\n    uint256 public immutable AMOUNT_MIN;\\n    uint256 public immutable AMOUNT_MAX;\\n    uint256 public immutable DAYS_MIN;\\n    uint256 public immutable DAYS_MAX;\\n\\n    IERC20 public immutable LEASH;\\n    IERC20 public immutable BONE;\\n\\n    ILandAuction public landAuction;\\n\\n    bool public isLockEnabled;\\n\\n    uint256 public totalWeight;\\n    uint256 public totalBoneRewards;\\n\\n    struct Lock {\\n        uint256 amount;\\n        uint256 startTime;\\n        uint256 numDays;\\n        address ogUser;\\n    }\\n\\n    mapping(address => Lock) private _lockOf;\\n\\n    constructor(\\n        address _leash,\\n        address _bone,\\n        uint256 amountMin,\\n        uint256 amountMax,\\n        uint256 daysMin,\\n        uint256 daysMax\\n    ) {\\n        LEASH = IERC20(_leash);\\n        BONE = IERC20(_bone);\\n        AMOUNT_MIN = amountMin;\\n        AMOUNT_MAX = amountMax;\\n        DAYS_MIN = daysMin;\\n        DAYS_MAX = daysMax;\\n    }\\n\\n    function lockInfoOf(address user)\\n        public\\n        view\\n        returns (\\n            uint256 amount,\\n            uint256 startTime,\\n            uint256 numDays,\\n            address ogUser\\n        )\\n    {\\n        return (\\n            _lockOf[user].amount,\\n            _lockOf[user].startTime,\\n            _lockOf[user].numDays,\\n            _lockOf[user].ogUser\\n        );\\n    }\\n\\n    function weightOf(address user) public view returns (uint256) {\\n        return _lockOf[user].amount * _lockOf[user].numDays;\\n    }\\n\\n    function extraLeashNeeded(address user, uint256 targetWeight)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        uint256 currentWeight = weightOf(user);\\n\\n        if (currentWeight >= targetWeight) {\\n            return 0;\\n        }\\n\\n        return (targetWeight - currentWeight) / _lockOf[user].numDays;\\n    }\\n\\n    function extraDaysNeeded(address user, uint256 targetWeight)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        uint256 currentWeight = weightOf(user);\\n\\n        if (currentWeight >= targetWeight) {\\n            return 0;\\n        }\\n\\n        return (targetWeight - currentWeight) / _lockOf[user].amount;\\n    }\\n\\n    function isWinner(address user) public view returns (bool) {\\n        return landAuction.winningsBidsOf(user) > 0;\\n    }\\n\\n    function unlockAt(address user) public view returns (uint256) {\\n        Lock memory s = _lockOf[user];\\n\\n        if (isWinner(user)) {\\n            return s.startTime + s.numDays * 1 days;\\n        }\\n\\n        return s.startTime + 15 days + (s.numDays * 1 days) / 3;\\n    }\\n\\n    function setLandAuction(address sale) external onlyOwner {\\n        landAuction = ILandAuction(sale);\\n    }\\n\\n    function addBoneRewards(uint256 rewardAmount) external onlyOwner {\\n        totalBoneRewards += rewardAmount;\\n        BONE.transferFrom(msg.sender, address(this), rewardAmount);\\n    }\\n\\n    function toggleLockEnabled() external onlyOwner {\\n        isLockEnabled = !isLockEnabled;\\n    }\\n\\n    function lock(uint256 amount, uint256 numDaysToAdd) external {\\n        require(isLockEnabled, \\\"Locking not enabled\\\");\\n\\n        Lock storage s = _lockOf[msg.sender];\\n\\n        uint256 oldWeight = s.amount * s.numDays;\\n\\n        s.amount += amount;\\n        require(\\n            AMOUNT_MIN <= s.amount && s.amount <= AMOUNT_MAX,\\n            \\\"LEASH amount outside of limits\\\"\\n        );\\n\\n        if (s.numDays == 0) {\\n            // no existing lock\\n            s.startTime = block.timestamp;\\n            s.ogUser = msg.sender;\\n        }\\n\\n        if (numDaysToAdd > 0) {\\n            s.numDays += numDaysToAdd;\\n        }\\n\\n        uint256 numDays = s.numDays;\\n\\n        require(\\n            DAYS_MIN <= numDays && numDays <= DAYS_MAX,\\n            \\\"Days outside of limits\\\"\\n        );\\n\\n        totalWeight += s.amount * s.numDays - oldWeight;\\n        LEASH.transferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    function unlock() external {\\n        Lock storage s = _lockOf[msg.sender];\\n\\n        uint256 amount = s.amount;\\n        uint256 numDays = s.numDays;\\n\\n        require(amount > 0, \\\"No LEASH locked\\\");\\n        require(unlockAt(msg.sender) <= block.timestamp, \\\"Not unlocked yet\\\");\\n        delete _lockOf[msg.sender];\\n\\n        LEASH.transfer(msg.sender, amount);\\n        BONE.transfer(\\n            msg.sender,\\n            (totalBoneRewards * amount * numDays) / totalWeight\\n        );\\n    }\\n\\n    function transferLock(address newOwner) external {\\n        require(_lockOf[msg.sender].numDays != 0, \\\"Lock does not exist\\\");\\n        require(_lockOf[newOwner].numDays == 0, \\\"New owner already has a lock\\\");\\n        _lockOf[newOwner] = _lockOf[msg.sender];\\n        delete _lockOf[msg.sender];\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILockLeash.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\ninterface ILockLeash {\\n    function lockInfoOf(address user)\\n        external\\n        view\\n        returns (\\n            uint256 amount,\\n            uint256 startTime,\\n            uint256 numDays,\\n            address ogUser\\n        );\\n\\n    function weightOf(address user) external view returns (uint256);\\n\\n    function extraLeashNeeded(address user, uint256 targetWeight)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function extraDaysNeeded(address user, uint256 targetWeight)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function isWinner(address user) external view returns (bool);\\n\\n    function unlockAt(address user) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILandAuction.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\ninterface ILandAuction {\\n    function winningsBidsOf(address user) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_leash\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bone\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daysMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daysMax\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AMOUNT_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AMOUNT_MIN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BONE\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAYS_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAYS_MIN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LEASH\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"addBoneRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"targetWeight\",\"type\":\"uint256\"}],\"name\":\"extraDaysNeeded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"targetWeight\",\"type\":\"uint256\"}],\"name\":\"extraLeashNeeded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLockEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isWinner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"landAuction\",\"outputs\":[{\"internalType\":\"contract ILandAuction\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numDaysToAdd\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"lockInfoOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numDays\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ogUser\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sale\",\"type\":\"address\"}],\"name\":\"setLandAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleLockEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBoneRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"unlockAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"weightOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LockLeash", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000027c70cd1946795b66be9d954418546998b5466340000000000000000000000009813037ee2218799597d83d4a5b6f3b6778218d900000000000000000000000000000000000000000000000002c68af0bb1400000000000000000000000000000000000000000000000000004563918244f40000000000000000000000000000000000000000000000000000000000000000002d000000000000000000000000000000000000000000000000000000000000005a", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}