{"SourceCode": "// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: erc721a/contracts/IERC721A.sol\r\n\r\n\r\n// ERC721A Contracts v4.1.0\r\n// Creator: Chiru Labs\r\n\r\npragma solidity ^0.8.4;\r\n\r\n/**\r\n * @dev Interface of an ERC721A compliant contract.\r\n */\r\ninterface IERC721A {\r\n    /**\r\n     * The caller must own the token or be an approved operator.\r\n     */\r\n    error ApprovalCallerNotOwnerNorApproved();\r\n\r\n    /**\r\n     * The token does not exist.\r\n     */\r\n    error ApprovalQueryForNonexistentToken();\r\n\r\n    /**\r\n     * The caller cannot approve to their own address.\r\n     */\r\n    error ApproveToCaller();\r\n\r\n    /**\r\n     * Cannot query the balance for the zero address.\r\n     */\r\n    error BalanceQueryForZeroAddress();\r\n\r\n    /**\r\n     * Cannot mint to the zero address.\r\n     */\r\n    error MintToZeroAddress();\r\n\r\n    /**\r\n     * The quantity of tokens minted must be more than zero.\r\n     */\r\n    error MintZeroQuantity();\r\n\r\n    /**\r\n     * The token does not exist.\r\n     */\r\n    error OwnerQueryForNonexistentToken();\r\n\r\n    /**\r\n     * The caller must own the token or be an approved operator.\r\n     */\r\n    error TransferCallerNotOwnerNorApproved();\r\n\r\n    /**\r\n     * The token must be owned by `from`.\r\n     */\r\n    error TransferFromIncorrectOwner();\r\n\r\n    /**\r\n     * Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\r\n     */\r\n    error TransferToNonERC721ReceiverImplementer();\r\n\r\n    /**\r\n     * Cannot transfer to the zero address.\r\n     */\r\n    error TransferToZeroAddress();\r\n\r\n    /**\r\n     * The token does not exist.\r\n     */\r\n    error URIQueryForNonexistentToken();\r\n\r\n    /**\r\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\r\n     */\r\n    error MintERC2309QuantityExceedsLimit();\r\n\r\n    /**\r\n     * The `extraData` cannot be set on an unintialized ownership slot.\r\n     */\r\n    error OwnershipNotInitializedForExtraData();\r\n\r\n    struct TokenOwnership {\r\n        // The address of the owner.\r\n        address addr;\r\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\r\n        uint64 startTimestamp;\r\n        // Whether the token has been burned.\r\n        bool burned;\r\n        // Arbitrary data similar to `startTimestamp` that can be set through `_extraData`.\r\n        uint24 extraData;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     *\r\n     * Burned tokens are calculated here, use `_totalMinted()` if you want to count just minted tokens.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    // ==============================\r\n    //            IERC165\r\n    // ==============================\r\n\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n\r\n    // ==============================\r\n    //            IERC721\r\n    // ==============================\r\n\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    // ==============================\r\n    //        IERC721Metadata\r\n    // ==============================\r\n\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n\r\n    // ==============================\r\n    //            IERC2309\r\n    // ==============================\r\n\r\n    /**\r\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId` (inclusive) is transferred from `from` to `to`,\r\n     * as defined in the ERC2309 standard. See `_mintERC2309` for more details.\r\n     */\r\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\r\n}\r\n\r\n// File: erc721a/contracts/ERC721A.sol\r\n\r\n\r\n// ERC721A Contracts v4.1.0\r\n// Creator: Chiru Labs\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n/**\r\n * @dev ERC721 token receiver interface.\r\n */\r\ninterface ERC721A__IERC721Receiver {\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard,\r\n * including the Metadata extension. Built to optimize for lower gas during batch mints.\r\n *\r\n * Assumes serials are sequentially minted starting at `_startTokenId()`\r\n * (defaults to 0, e.g. 0, 1, 2, 3..).\r\n *\r\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\r\n *\r\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\r\n */\r\ncontract ERC721A is IERC721A {\r\n    // Mask of an entry in packed address data.\r\n    uint256 private constant BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\r\n\r\n    // The bit position of `numberMinted` in packed address data.\r\n    uint256 private constant BITPOS_NUMBER_MINTED = 64;\r\n\r\n    // The bit position of `numberBurned` in packed address data.\r\n    uint256 private constant BITPOS_NUMBER_BURNED = 128;\r\n\r\n    // The bit position of `aux` in packed address data.\r\n    uint256 private constant BITPOS_AUX = 192;\r\n\r\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\r\n    uint256 private constant BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\r\n\r\n    // The bit position of `startTimestamp` in packed ownership.\r\n    uint256 private constant BITPOS_START_TIMESTAMP = 160;\r\n\r\n    // The bit mask of the `burned` bit in packed ownership.\r\n    uint256 private constant BITMASK_BURNED = 1 << 224;\r\n\r\n    // The bit position of the `nextInitialized` bit in packed ownership.\r\n    uint256 private constant BITPOS_NEXT_INITIALIZED = 225;\r\n\r\n    // The bit mask of the `nextInitialized` bit in packed ownership.\r\n    uint256 private constant BITMASK_NEXT_INITIALIZED = 1 << 225;\r\n\r\n    // The bit position of `extraData` in packed ownership.\r\n    uint256 private constant BITPOS_EXTRA_DATA = 232;\r\n\r\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\r\n    uint256 private constant BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\r\n\r\n    // The mask of the lower 160 bits for addresses.\r\n    uint256 private constant BITMASK_ADDRESS = (1 << 160) - 1;\r\n\r\n    // The maximum `quantity` that can be minted with `_mintERC2309`.\r\n    // This limit is to prevent overflows on the address data entries.\r\n    // For a limit of 5000, a total of 3.689e15 calls to `_mintERC2309`\r\n    // is required to cause an overflow, which is unrealistic.\r\n    uint256 private constant MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\r\n\r\n    // The tokenId of the next token to be minted.\r\n    uint256 private _currentIndex;\r\n\r\n    // The number of tokens burned.\r\n    uint256 private _burnCounter;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to ownership details\r\n    // An empty struct value does not necessarily mean the token is unowned.\r\n    // See `_packedOwnershipOf` implementation for details.\r\n    //\r\n    // Bits Layout:\r\n    // - [0..159]   `addr`\r\n    // - [160..223] `startTimestamp`\r\n    // - [224]      `burned`\r\n    // - [225]      `nextInitialized`\r\n    // - [232..255] `extraData`\r\n    mapping(uint256 => uint256) private _packedOwnerships;\r\n\r\n    // Mapping owner address to address data.\r\n    //\r\n    // Bits Layout:\r\n    // - [0..63]    `balance`\r\n    // - [64..127]  `numberMinted`\r\n    // - [128..191] `numberBurned`\r\n    // - [192..255] `aux`\r\n    mapping(address => uint256) private _packedAddressData;\r\n\r\n    // Mapping from token ID to approved address.\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _currentIndex = _startTokenId();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the starting token ID.\r\n     * To change the starting token ID, please override this function.\r\n     */\r\n    function _startTokenId() internal view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the next token ID to be minted.\r\n     */\r\n    function _nextTokenId() internal view returns (uint256) {\r\n        return _currentIndex;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the total number of tokens in existence.\r\n     * Burned tokens will reduce the count.\r\n     * To get the total number of tokens minted, please see `_totalMinted`.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        // Counter underflow is impossible as _burnCounter cannot be incremented\r\n        // more than `_currentIndex - _startTokenId()` times.\r\n        unchecked {\r\n            return _currentIndex - _burnCounter - _startTokenId();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the total amount of tokens minted in the contract.\r\n     */\r\n    function _totalMinted() internal view returns (uint256) {\r\n        // Counter underflow is impossible as _currentIndex does not decrement,\r\n        // and it is initialized to `_startTokenId()`\r\n        unchecked {\r\n            return _currentIndex - _startTokenId();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the total number of tokens burned.\r\n     */\r\n    function _totalBurned() internal view returns (uint256) {\r\n        return _burnCounter;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        // The interface IDs are constants representing the first 4 bytes of the XOR of\r\n        // all function selectors in the interface. See: https://eips.ethereum.org/EIPS/eip-165\r\n        // e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`\r\n        return\r\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\r\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\r\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view override returns (uint256) {\r\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\r\n        return _packedAddressData[owner] & BITMASK_ADDRESS_DATA_ENTRY;\r\n    }\r\n\r\n    /**\r\n     * Returns the number of tokens minted by `owner`.\r\n     */\r\n    function _numberMinted(address owner) internal view returns (uint256) {\r\n        return (_packedAddressData[owner] >> BITPOS_NUMBER_MINTED) & BITMASK_ADDRESS_DATA_ENTRY;\r\n    }\r\n\r\n    /**\r\n     * Returns the number of tokens burned by or on behalf of `owner`.\r\n     */\r\n    function _numberBurned(address owner) internal view returns (uint256) {\r\n        return (_packedAddressData[owner] >> BITPOS_NUMBER_BURNED) & BITMASK_ADDRESS_DATA_ENTRY;\r\n    }\r\n\r\n    /**\r\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\r\n     */\r\n    function _getAux(address owner) internal view returns (uint64) {\r\n        return uint64(_packedAddressData[owner] >> BITPOS_AUX);\r\n    }\r\n\r\n    /**\r\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\r\n     * If there are multiple variables, please pack them into a uint64.\r\n     */\r\n    function _setAux(address owner, uint64 aux) internal {\r\n        uint256 packed = _packedAddressData[owner];\r\n        uint256 auxCasted;\r\n        // Cast `aux` with assembly to avoid redundant masking.\r\n        assembly {\r\n            auxCasted := aux\r\n        }\r\n        packed = (packed & BITMASK_AUX_COMPLEMENT) | (auxCasted << BITPOS_AUX);\r\n        _packedAddressData[owner] = packed;\r\n    }\r\n\r\n    /**\r\n     * Returns the packed ownership data of `tokenId`.\r\n     */\r\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\r\n        uint256 curr = tokenId;\r\n\r\n        unchecked {\r\n            if (_startTokenId() <= curr)\r\n                if (curr < _currentIndex) {\r\n                    uint256 packed = _packedOwnerships[curr];\r\n                    // If not burned.\r\n                    if (packed & BITMASK_BURNED == 0) {\r\n                        // Invariant:\r\n                        // There will always be an ownership that has an address and is not burned\r\n                        // before an ownership that does not have an address and is not burned.\r\n                        // Hence, curr will not underflow.\r\n                        //\r\n                        // We can directly compare the packed value.\r\n                        // If the address is zero, packed is zero.\r\n                        while (packed == 0) {\r\n                            packed = _packedOwnerships[--curr];\r\n                        }\r\n                        return packed;\r\n                    }\r\n                }\r\n        }\r\n        revert OwnerQueryForNonexistentToken();\r\n    }\r\n\r\n    /**\r\n     * Returns the unpacked `TokenOwnership` struct from `packed`.\r\n     */\r\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\r\n        ownership.addr = address(uint160(packed));\r\n        ownership.startTimestamp = uint64(packed >> BITPOS_START_TIMESTAMP);\r\n        ownership.burned = packed & BITMASK_BURNED != 0;\r\n        ownership.extraData = uint24(packed >> BITPOS_EXTRA_DATA);\r\n    }\r\n\r\n    /**\r\n     * Returns the unpacked `TokenOwnership` struct at `index`.\r\n     */\r\n    function _ownershipAt(uint256 index) internal view returns (TokenOwnership memory) {\r\n        return _unpackedOwnership(_packedOwnerships[index]);\r\n    }\r\n\r\n    /**\r\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\r\n     */\r\n    function _initializeOwnershipAt(uint256 index) internal {\r\n        if (_packedOwnerships[index] == 0) {\r\n            _packedOwnerships[index] = _packedOwnershipOf(index);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gas spent here starts off proportional to the maximum mint batch size.\r\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\r\n     */\r\n    function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\r\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\r\n    }\r\n\r\n    /**\r\n     * @dev Packs ownership data into a single uint256.\r\n     */\r\n    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\r\n        assembly {\r\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\r\n            owner := and(owner, BITMASK_ADDRESS)\r\n            // `owner | (block.timestamp << BITPOS_START_TIMESTAMP) | flags`.\r\n            result := or(owner, or(shl(BITPOS_START_TIMESTAMP, timestamp()), flags))\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view override returns (address) {\r\n        return address(uint160(_packedOwnershipOf(tokenId)));\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, it can be overridden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return '';\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\r\n     */\r\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\r\n        // For branchless setting of the `nextInitialized` flag.\r\n        assembly {\r\n            // `(quantity == 1) << BITPOS_NEXT_INITIALIZED`.\r\n            result := shl(BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public override {\r\n        address owner = ownerOf(tokenId);\r\n\r\n        if (_msgSenderERC721A() != owner)\r\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\r\n                revert ApprovalCallerNotOwnerNorApproved();\r\n            }\r\n\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(owner, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view override returns (address) {\r\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        if (operator == _msgSenderERC721A()) revert ApproveToCaller();\r\n\r\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\r\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, '');\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        transferFrom(from, to, tokenId);\r\n        if (to.code.length != 0)\r\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\r\n                revert TransferToNonERC721ReceiverImplementer();\r\n            }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     */\r\n    function _exists(uint256 tokenId) internal view returns (bool) {\r\n        return\r\n            _startTokenId() <= tokenId &&\r\n            tokenId < _currentIndex && // If within bounds,\r\n            _packedOwnerships[tokenId] & BITMASK_BURNED == 0; // and not burned.\r\n    }\r\n\r\n    /**\r\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\r\n     */\r\n    function _safeMint(address to, uint256 quantity) internal {\r\n        _safeMint(to, quantity, '');\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - If `to` refers to a smart contract, it must implement\r\n     *   {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\r\n     * - `quantity` must be greater than 0.\r\n     *\r\n     * See {_mint}.\r\n     *\r\n     * Emits a {Transfer} event for each mint.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 quantity,\r\n        bytes memory _data\r\n    ) internal {\r\n        _mint(to, quantity);\r\n\r\n        unchecked {\r\n            if (to.code.length != 0) {\r\n                uint256 end = _currentIndex;\r\n                uint256 index = end - quantity;\r\n                do {\r\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\r\n                        revert TransferToNonERC721ReceiverImplementer();\r\n                    }\r\n                } while (index < end);\r\n                // Reentrancy protection.\r\n                if (_currentIndex != end) revert();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `quantity` tokens and transfers them to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `quantity` must be greater than 0.\r\n     *\r\n     * Emits a {Transfer} event for each mint.\r\n     */\r\n    function _mint(address to, uint256 quantity) internal {\r\n        uint256 startTokenId = _currentIndex;\r\n        if (to == address(0)) revert MintToZeroAddress();\r\n        if (quantity == 0) revert MintZeroQuantity();\r\n\r\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\r\n\r\n        // Overflows are incredibly unrealistic.\r\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\r\n        // `tokenId` has a maximum limit of 2**256.\r\n        unchecked {\r\n            // Updates:\r\n            // - `balance += quantity`.\r\n            // - `numberMinted += quantity`.\r\n            //\r\n            // We can directly add to the `balance` and `numberMinted`.\r\n            _packedAddressData[to] += quantity * ((1 << BITPOS_NUMBER_MINTED) | 1);\r\n\r\n            // Updates:\r\n            // - `address` to the owner.\r\n            // - `startTimestamp` to the timestamp of minting.\r\n            // - `burned` to `false`.\r\n            // - `nextInitialized` to `quantity == 1`.\r\n            _packedOwnerships[startTokenId] = _packOwnershipData(\r\n                to,\r\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\r\n            );\r\n\r\n            uint256 tokenId = startTokenId;\r\n            uint256 end = startTokenId + quantity;\r\n            do {\r\n                emit Transfer(address(0), to, tokenId++);\r\n            } while (tokenId < end);\r\n\r\n            _currentIndex = end;\r\n        }\r\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `quantity` tokens and transfers them to `to`.\r\n     *\r\n     * This function is intended for efficient minting only during contract creation.\r\n     *\r\n     * It emits only one {ConsecutiveTransfer} as defined in\r\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\r\n     * instead of a sequence of {Transfer} event(s).\r\n     *\r\n     * Calling this function outside of contract creation WILL make your contract\r\n     * non-compliant with the ERC721 standard.\r\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\r\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `quantity` must be greater than 0.\r\n     *\r\n     * Emits a {ConsecutiveTransfer} event.\r\n     */\r\n    function _mintERC2309(address to, uint256 quantity) internal {\r\n        uint256 startTokenId = _currentIndex;\r\n        if (to == address(0)) revert MintToZeroAddress();\r\n        if (quantity == 0) revert MintZeroQuantity();\r\n        if (quantity > MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();\r\n\r\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\r\n\r\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\r\n        unchecked {\r\n            // Updates:\r\n            // - `balance += quantity`.\r\n            // - `numberMinted += quantity`.\r\n            //\r\n            // We can directly add to the `balance` and `numberMinted`.\r\n            _packedAddressData[to] += quantity * ((1 << BITPOS_NUMBER_MINTED) | 1);\r\n\r\n            // Updates:\r\n            // - `address` to the owner.\r\n            // - `startTimestamp` to the timestamp of minting.\r\n            // - `burned` to `false`.\r\n            // - `nextInitialized` to `quantity == 1`.\r\n            _packedOwnerships[startTokenId] = _packOwnershipData(\r\n                to,\r\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\r\n            );\r\n\r\n            emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\r\n\r\n            _currentIndex = startTokenId + quantity;\r\n        }\r\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\r\n     */\r\n    function _getApprovedAddress(uint256 tokenId)\r\n        private\r\n        view\r\n        returns (uint256 approvedAddressSlot, address approvedAddress)\r\n    {\r\n        mapping(uint256 => address) storage tokenApprovalsPtr = _tokenApprovals;\r\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId]`.\r\n        assembly {\r\n            // Compute the slot.\r\n            mstore(0x00, tokenId)\r\n            mstore(0x20, tokenApprovalsPtr.slot)\r\n            approvedAddressSlot := keccak256(0x00, 0x40)\r\n            // Load the slot's value from storage.\r\n            approvedAddress := sload(approvedAddressSlot)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether the `approvedAddress` is equals to `from` or `msgSender`.\r\n     */\r\n    function _isOwnerOrApproved(\r\n        address approvedAddress,\r\n        address from,\r\n        address msgSender\r\n    ) private pure returns (bool result) {\r\n        assembly {\r\n            // Mask `from` to the lower 160 bits, in case the upper bits somehow aren't clean.\r\n            from := and(from, BITMASK_ADDRESS)\r\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\r\n            msgSender := and(msgSender, BITMASK_ADDRESS)\r\n            // `msgSender == from || msgSender == approvedAddress`.\r\n            result := or(eq(msgSender, from), eq(msgSender, approvedAddress))\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\r\n\r\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\r\n\r\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedAddress(tokenId);\r\n\r\n        // The nested ifs save around 20+ gas over a compound boolean condition.\r\n        if (!_isOwnerOrApproved(approvedAddress, from, _msgSenderERC721A()))\r\n            if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\r\n\r\n        if (to == address(0)) revert TransferToZeroAddress();\r\n\r\n        _beforeTokenTransfers(from, to, tokenId, 1);\r\n\r\n        // Clear approvals from the previous owner.\r\n        assembly {\r\n            if approvedAddress {\r\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\r\n                sstore(approvedAddressSlot, 0)\r\n            }\r\n        }\r\n\r\n        // Underflow of the sender's balance is impossible because we check for\r\n        // ownership above and the recipient's balance can't realistically overflow.\r\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\r\n        unchecked {\r\n            // We can directly increment and decrement the balances.\r\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\r\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\r\n\r\n            // Updates:\r\n            // - `address` to the next owner.\r\n            // - `startTimestamp` to the timestamp of transfering.\r\n            // - `burned` to `false`.\r\n            // - `nextInitialized` to `true`.\r\n            _packedOwnerships[tokenId] = _packOwnershipData(\r\n                to,\r\n                BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\r\n            );\r\n\r\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\r\n            if (prevOwnershipPacked & BITMASK_NEXT_INITIALIZED == 0) {\r\n                uint256 nextTokenId = tokenId + 1;\r\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\r\n                if (_packedOwnerships[nextTokenId] == 0) {\r\n                    // If the next slot is within bounds.\r\n                    if (nextTokenId != _currentIndex) {\r\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\r\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        emit Transfer(from, to, tokenId);\r\n        _afterTokenTransfers(from, to, tokenId, 1);\r\n    }\r\n\r\n    /**\r\n     * @dev Equivalent to `_burn(tokenId, false)`.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        _burn(tokenId, false);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\r\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\r\n\r\n        address from = address(uint160(prevOwnershipPacked));\r\n\r\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedAddress(tokenId);\r\n\r\n        if (approvalCheck) {\r\n            // The nested ifs save around 20+ gas over a compound boolean condition.\r\n            if (!_isOwnerOrApproved(approvedAddress, from, _msgSenderERC721A()))\r\n                if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\r\n        }\r\n\r\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\r\n\r\n        // Clear approvals from the previous owner.\r\n        assembly {\r\n            if approvedAddress {\r\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\r\n                sstore(approvedAddressSlot, 0)\r\n            }\r\n        }\r\n\r\n        // Underflow of the sender's balance is impossible because we check for\r\n        // ownership above and the recipient's balance can't realistically overflow.\r\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\r\n        unchecked {\r\n            // Updates:\r\n            // - `balance -= 1`.\r\n            // - `numberBurned += 1`.\r\n            //\r\n            // We can directly decrement the balance, and increment the number burned.\r\n            // This is equivalent to `packed -= 1; packed += 1 << BITPOS_NUMBER_BURNED;`.\r\n            _packedAddressData[from] += (1 << BITPOS_NUMBER_BURNED) - 1;\r\n\r\n            // Updates:\r\n            // - `address` to the last owner.\r\n            // - `startTimestamp` to the timestamp of burning.\r\n            // - `burned` to `true`.\r\n            // - `nextInitialized` to `true`.\r\n            _packedOwnerships[tokenId] = _packOwnershipData(\r\n                from,\r\n                (BITMASK_BURNED | BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked)\r\n            );\r\n\r\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\r\n            if (prevOwnershipPacked & BITMASK_NEXT_INITIALIZED == 0) {\r\n                uint256 nextTokenId = tokenId + 1;\r\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\r\n                if (_packedOwnerships[nextTokenId] == 0) {\r\n                    // If the next slot is within bounds.\r\n                    if (nextTokenId != _currentIndex) {\r\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\r\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        emit Transfer(from, address(0), tokenId);\r\n        _afterTokenTransfers(from, address(0), tokenId, 1);\r\n\r\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\r\n        unchecked {\r\n            _burnCounter++;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkContractOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\r\n            bytes4 retval\r\n        ) {\r\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\r\n        } catch (bytes memory reason) {\r\n            if (reason.length == 0) {\r\n                revert TransferToNonERC721ReceiverImplementer();\r\n            } else {\r\n                assembly {\r\n                    revert(add(32, reason), mload(reason))\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Directly sets the extra data for the ownership data `index`.\r\n     */\r\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal {\r\n        uint256 packed = _packedOwnerships[index];\r\n        if (packed == 0) revert OwnershipNotInitializedForExtraData();\r\n        uint256 extraDataCasted;\r\n        // Cast `extraData` with assembly to avoid redundant masking.\r\n        assembly {\r\n            extraDataCasted := extraData\r\n        }\r\n        packed = (packed & BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << BITPOS_EXTRA_DATA);\r\n        _packedOwnerships[index] = packed;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the next extra data for the packed ownership data.\r\n     * The returned result is shifted into position.\r\n     */\r\n    function _nextExtraData(\r\n        address from,\r\n        address to,\r\n        uint256 prevOwnershipPacked\r\n    ) private view returns (uint256) {\r\n        uint24 extraData = uint24(prevOwnershipPacked >> BITPOS_EXTRA_DATA);\r\n        return uint256(_extraData(from, to, extraData)) << BITPOS_EXTRA_DATA;\r\n    }\r\n\r\n    /**\r\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\r\n     * Intended to be overridden by the cosumer contract.\r\n     *\r\n     * `previousExtraData` - the value of `extraData` before transfer.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, `tokenId` will be burned by `from`.\r\n     * - `from` and `to` are never both zero.\r\n     */\r\n    function _extraData(\r\n        address from,\r\n        address to,\r\n        uint24 previousExtraData\r\n    ) internal view virtual returns (uint24) {}\r\n\r\n    /**\r\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred.\r\n     * This includes minting.\r\n     * And also called before burning one token.\r\n     *\r\n     * startTokenId - the first token id to be transferred\r\n     * quantity - the amount to be transferred\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, `tokenId` will be burned by `from`.\r\n     * - `from` and `to` are never both zero.\r\n     */\r\n    function _beforeTokenTransfers(\r\n        address from,\r\n        address to,\r\n        uint256 startTokenId,\r\n        uint256 quantity\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred.\r\n     * This includes minting.\r\n     * And also called after one token has been burned.\r\n     *\r\n     * startTokenId - the first token id to be transferred\r\n     * quantity - the amount to be transferred\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` has been minted for `to`.\r\n     * - When `to` is zero, `tokenId` has been burned by `from`.\r\n     * - `from` and `to` are never both zero.\r\n     */\r\n    function _afterTokenTransfers(\r\n        address from,\r\n        address to,\r\n        uint256 startTokenId,\r\n        uint256 quantity\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Returns the message sender (defaults to `msg.sender`).\r\n     *\r\n     * If you are writing GSN compatible contracts, you need to override this function.\r\n     */\r\n    function _msgSenderERC721A() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function _toString(uint256 value) internal pure returns (string memory ptr) {\r\n        assembly {\r\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit),\r\n            // but we allocate 128 bytes to keep the free memory pointer 32-byte word aliged.\r\n            // We will need 1 32-byte word to store the length,\r\n            // and 3 32-byte words to store a maximum of 78 digits. Total: 32 + 3 * 32 = 128.\r\n            ptr := add(mload(0x40), 128)\r\n            // Update the free memory pointer to allocate.\r\n            mstore(0x40, ptr)\r\n\r\n            // Cache the end of the memory to calculate the length later.\r\n            let end := ptr\r\n\r\n            // We write the string from the rightmost digit to the leftmost digit.\r\n            // The following is essentially a do-while loop that also handles the zero case.\r\n            // Costs a bit more than early returning for the zero case,\r\n            // but cheaper in terms of deployment and overall runtime costs.\r\n            for {\r\n                // Initialize and perform the first pass without check.\r\n                let temp := value\r\n                // Move the pointer 1 byte leftwards to point to an empty character slot.\r\n                ptr := sub(ptr, 1)\r\n                // Write the character to the pointer. 48 is the ASCII index of '0'.\r\n                mstore8(ptr, add(48, mod(temp, 10)))\r\n                temp := div(temp, 10)\r\n            } temp {\r\n                // Keep dividing `temp` until zero.\r\n                temp := div(temp, 10)\r\n            } {\r\n                // Body of the for loop.\r\n                ptr := sub(ptr, 1)\r\n                mstore8(ptr, add(48, mod(temp, 10)))\r\n            }\r\n\r\n            let length := sub(end, ptr)\r\n            // Move the pointer 32 bytes leftwards to make room for the length.\r\n            ptr := sub(ptr, 32)\r\n            // Store the length.\r\n            mstore(ptr, length)\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/devilvalleywtfNFT.sol\r\n\r\n\r\npragma solidity ^0.8.11;\r\n\r\n\r\n\r\n/*\r\n\r\n\u26e5 d\u0337\u0314\u030f\u034d\u0332\u032e\u0355e\u0334\u0352\u032b\u0316v\u0335\u0344\u030a\u0307\u0312\u0333\u0331i\u0337\u030b\u0342\u035b\u0326\u033a\u0355\u032a\u032al\u0337\u0305\u030c\u034b\u0302\u0358\u0355\u0328\u0354v\u0336\u0315\u0303\u0322\u0356\u032c\u0329a\u0336\u031b\u034a\u030a\u0303\u0344\u0323\u034d\u0355\u0331l\u0336\u030b\u030b\u0325\u032d\u0347l\u0337\u0346\u0301\u0303\u0303\u031c\u032f\u0328e\u0336\u0309\u0352\u0309\u033d\u0359\u034ey\u0334\u0311\u0315\u0346\u0351\u0308\u0349\u0348\u032e \u0337\u033e\u035b\u0360\u032b\u033a\u0332\u0318d\u0338\u0308\u030e\u032a\u031fe\u0336\u033e\u030b\u0305\u0329\u0359\u0339\u034ev\u0336\u0343\u0309\u030a\u0318i\u0336\u034c\u0303\u032cl\u0336\u0305\u035b\u0341\u0358\u031ev\u0335\u031b\u033f\u0305\u0326\u0359\u032c\u033aa\u0336\u0310\u035b\u030b\u035a\u035cl\u0336\u030b\u030c\u030a\u0356\u032dl\u0334\u030e\u032de\u0334\u0309\u0307\u033e\u0316\u0324\u0316\u032d\u0347y\u0335\u0344\u0328\u0339\u032c\u0345\u0319 \u0338\u031b\u0319\u0325\u031d\u034dd\u0334\u0346\u0314\u0305\u0359e\u0338\u0310\u034d\u0353\u034e\u0316v\u0338\u0343\u034b\u034c\u034c\u033b\u0355\u0353\u0326\u0321i\u0338\u0308\u0317\u0317\u0322\u0328l\u0337\u0308\u0344\u030f\u033d\u035a\u0359\u033b\u0345v\u0336\u0303\u0357\u0333\u0325\u0317\u0339\u032aa\u0336\u0309\u030f\u030d\u034c\u030a\u0331\u0317\u0356l\u0337\u0301\u0314\u0308\u034e\u034e\u0330\u031c\u033al\u0335\u0301\u0308\u0301\u0304\u0301\u033b\u035a\u032c\u033ce\u0335\u035d\u0358\u0308\u0304\u031b\u0331y\u0335\u0310\u0328\u032e\u0325\u0327\u032d \u0335\u0300\u034c\u030d\u0317\u032d\u032a\u0323\u032fd\u0334\u0310\u0301\u0306\u0352\u032c\u031ce\u0338\u0344\u033e\u0313\u0303\u0343\u032cv\u0335\u0350\u0350\u033a\u0348i\u0334\u033f\u031a\u0313\u0319\u0319\u0322\u0353l\u0336\u0357\u035b\u035d\u030f\u0358\u0327v\u0337\u030f\u0359\u034e\u0329\u0354a\u0337\u030a\u033e\u0307\u0341\u0312\u033a\u035a\u0332\u033b\u0327l\u0335\u030c\u033d\u0356\u0325\u0316l\u0334\u034c\u035b\u0307\u0350\u0328\u0324\u031de\u0335\u0301\u032e\u031cy\r\n\u0338\u0311\u0343\u031b\u030d\u0360\u0328\u034d\u0348\r\n\u0337\u0358\u0345\u0325\u035c\u034dd\u0337\u033e\u031a\u0310\u033e\u0316\u0332e\u0338\u0340\u0307\u0301\u034c\u034d\u0324\u031e\u0347v\u0338\u0340\u0323\u031d\u034ei\u0336\u030c\u0306\u0304\u0344\u0308\u0345\u0318\u0317l\u0337\u0360\u0344\u033d\u031d\u0332\u0324v\u0338\u035d\u0314\u0315\u0302\u0323\u0331a\u0338\u0300\u0308\u0300\u0346\u0342\u0356\u0323l\u0334\u0352\u0315\u0343\u0351\u0313\u035a\u0359l\u0334\u033d\u0351\u035d\u031de\u0334\u0360\u035d\u0306\u033d\u031c\u031ey\u0334\u0357\u0360\u0330 \u0334\u0311\u0328\u0354\u031ed\u0334\u0344\u0349\u032b\u0319\u0323\u032de\u0337\u0343\u0320\u0329\u0327v\u0338\u0303\u0303\u0300\u0341\u030d\u0353\u0326\u0339i\u0336\u0312\u035d\u0306\u0358\u0360\u0356\u0328\u032b\u0349l\u0334\u0315\u0360\u0342\u0315\u0300\u034ev\u0335\u033d\u032ca\u0338\u0343\u0300\u0351\u0305\u0313\u0325\u0330l\u0336\u0307\u030b\u0308\u0302\u0326\u0331\u0326\u0355\u0353l\u0337\u0314\u033f\u0343\u0309\u0314\u033be\u0336\u030f\u035d\u0340\u033d\u0328y\u0337\u033d\u034c\u030a\u0306\u0348\u0355\u0333 \u0335\u031b\u0304\u0340\u030a\u0315\u0347\u032ed\u0335\u0303\u0306\u0348\u0318\u034e\u0333\u0349e\u0334\u030b\u033b\u031e\u0319\u033cv\u0338\u033d\u0310\u0340\u0312\u0313\u033b\u031e\u0331\u0345\u0319i\u0335\u0358\u0303\u0351\u0344\u033bl\u0336\u0344\u0312\u0340\u0352\u0328\u0319\u0356\u0327v\u0335\u034b\u0331\u0323\u032f\u0349a\u0334\u030b\u030e\u0322\u0339\u0327l\u0334\u033f\u035d\u0304\u034b\u0303\u0333\u031f\u031fl\u0336\u030a\u033f\u0339\u0331\u0349e\u0336\u031b\u035b\u0353\u0331\u0332y\u0338\u030d\u0315\u031d\u0319\u0327\u0333\u0321 \u0334\u0308\u030d\u0339d\u0335\u0350\u0304\u0311\u0333\u0348\u033c\u0318e\u0334\u0304\u0342\u0315\u0318v\u0334\u030b\u0308\u0304\u0343\u0313\u032c\u0328\u0345\u0325i\u0335\u0346\u0305\u0344\u0339\u033a\u0320\u0348l\u0338\u0314\u0360\u0309\u033b\u0345\u033cv\u0335\u0346\u0344\u032b\u0345\u034d\u031d\u0321a\u0337\u030a\u0357\u0342\u0332\u031e\u0322\u031f\u031el\u0336\u031b\u0351\u0309\u033f\u0328\u0327l\u0335\u030a\u033d\u0343\u0359\u0331\u0353\u0316e\u0335\u0311\u035d\u0313\u030f\u033e\u0347\u0319y\u0336\r\n\u0335\u030f\u031b\u0350\u035d\u0318\u031d\u033b\u0324\u0355\r\n\u0337\u0310\u0309\u0342\u032c\u0324\u0327\u0322\u0348d\u0335\u030c\u0332e\u0337\u0314\u0341\u0331\u033a\u032e\u0317\u032bv\u0335\u0310\u0341\u032e\u033c\u0349\u031ci\u0334\u034a\u0342\u034e\u0359l\u0334\u034c\u0346\u034c\u032e\u034ev\u0338\u034b\u030b\u0303\u0347\u0317\u031d\u0329\u035ca\u0334\u0360\u0308\u0360\u033b\u0317\u034dl\u0336\u0350\u0340\u0307\u030b\u0340\u032e\u0330\u035a\u032bl\u0334\u030a\u0307\u031b\u0357\u035c\u0326e\u0336\u031a\u031b\u033e\u0302\u031f\u033c\u0326\u0347y\u0336\u0304\u030c\u0315\u0315\u0304\u033b\u0327\u032a\u033a\u0355 \u0336\u0343\u030e\u0305\u0343\u034a\u0353\u0317\u032e\u0330d\u0335\u0357\u033f\u031b\u030e\u0324\u0347\u0333e\u0338\u0343\u0341\u035b\u034c\u0313\u0321\u0356\u0345\u0326v\u0337\u0311\u0313\u033f\u0317\u0323i\u0336\u0340\u030b\u0302\u032fl\u0336\u0344\u0314\u0311\u0340\u0327\u033c\u0333\u0349\u035av\u0335\u030d\u0306\u0311\u0350\u0331\u0332\u0329a\u0335\u034c\u033d\u0352\u0306\u0302\u031f\u0320\u0329l\u0336\u030d\u033e\u0319l\u0334\u031b\u030d\u0357\u030d\u032d\u033c\u033ae\u0338\u0358\u0323\u0324y\u0335\u0314\u034c\u0341\u0341\u030b\u031d\u0333\u0348 \u0337\u0350\u030d\u033b\u0321\u0347\u032f\u033cd\u0334\u031b\u0310\u034ee\u0335\u0341\u0310\u0324\u0333v\u0337\u035d\u0333\u031fi\u0336\u0310\u0344\u0308\u030f\u0326\u032c\u0323l\u0336\u034a\u0311\u0342\u0322\u0318\u0316v\u0336\u031b\u0341\u0345\u0331\u032d\u031fa\u0336\u0315\u0333\u0316\u0327\u035c\u033al\u0337\u0360\u030d\u0302\u035d\u0300\u0348\u035a\u0320\u032e\u0321l\u0335\u0352\u0313\u0311\u0344\u030a\u0316\u031ce\u0337\u033f\u031a\u0358\u0350\u035b\u0320\u032b\u0339\u0347y\u0336\u0352\u0344\u0352\u0351\u034b\u032f\u035c\u0359\u0318 \u0336\u0352\u0304\u033a\u0318\u035c\u031d\u032cd\u0337\u035b\u0323\u0327\u034d\u031e\u032de\u0335\u033d\u0309\u0340\u0308\u0323\u031d\u0328\u0317\u0320v\u0337\u0344\u0340\u031b\u0339\u0354i\u0337\u030c\u033b\u033cl\u0338\u031a\u032f\u0331v\u0335\u0340\u032aa\u0337\u0344\u030b\u0301\u0343\u0315\u0320\u031fl\u0337\u035b\u0308\u0331\u031f\u0327\u0347l\u0334\u0344\u034b\u0343\u030d\u033a\u0356e\u0335\u034c\u0344\u0305\u034b\u032cy\u0337\u030e\u034c\u0342\u030d\u0309\u0359\r\n\u0336\u035b\u0310\u0301\u035d\u0305\u032c\r\n\u0338\u035b\u030d\u0313\u0307\u033f\u0322\u032b\u032c\u032d\u0356d\u0334\u0358\u0358\u0314\u035c\u0325\u0354e\u0338\u0312\u0358\u034d\u0345\u0331v\u0334\u0308\u0304\u030f\u032c\u0318\u0356\u0328i\u0336\u0346\u033b\u032f\u034e\u0333\u0332l\u0336\u031b\u0332\u0329\u032e\u0345\u0332v\u0336\u030a\u0312\u0352\u0344\u035c\u033c\u0322\u032aa\u0336\u0344\u0312\u0324l\u0338\u0357\u0306\u0327\u0354\u0356l\u0334\u0346\u034c\u034b\u0325\u0354\u0353\u0330e\u0336\u035d\u0323\u034e\u0326y\u0335\u0342\u034c\u0303\u035a\u0359\u0349\u032e\u0355 \u0336\u0301\u0323\u0317d\u0336\u0357\u0309\u034c\u0339e\u0338\u033e\u0344\u031a\u0312\u0342\u0331\u034ev\u0338\u033f\u0322i\u0336\u030f\u0304\u031c\u034d\u0322\u032bl\u0338\u0352\u0358\u0306\u0330\u031c\u031ev\u0335\u034c\u0342\u0304\u0351\u0330\u034d\u0323\u032a\u0316a\u0336\u0352\u0308\u0350\u0356\u0316\u0347l\u0337\u0341\u0332l\u0338\u0303\u031b\u030f\u032a\u032c\u0339\u0333\u0355e\u0335\u0350\u030f\u035d\u0343\u0354\u0327\u0325\u0349y\u0338\u033f\u034c\u0303\u0344\u032f\u034e\u032e\u033a \u0336\u0300\u0343\u034c\u0352\u0329\u0328d\u0338\u033d\u0311\u033f\u0349e\u0335\u030b\u0310\u0316\u033bv\u0334\u0305\u0305\u0314\u0308\u030a\u0316i\u0335\u035d\u0331\u0353\u031dl\u0334\u031b\u0327v\u0336\u0305\u032b\u032c\u0325\u0326\u032ea\u0336\u0302\u030d\u0322l\u0336\u030e\u031cl\u0338\u0351\u0357\u0342\u0344\u0330\u0324\u0330\u0355e\u0336\u034c\u0305\u030c\u031b\u0355\u032b\u033by\u0334\u0313\u035b\u0304\u033c\u031f\u0353 \u0337\u030d\u0354d\u0334\u0344\u030b\u033e\u030c\u030a\u035ae\u0336\u0351\u0330\u032av\u0338\u0304\u030d\u0305\u031f\u0320i\u0334\u033d\u032b\u032al\u0337\u0300\u0352\u035d\u031d\u0353\u035av\u0337\u0311\u0326a\u0336\u0313\u0306\u0354\u0355l\u0334\u030d\u030e\u0344\u0313\u0350\u0347\u031el\u0335\u030c\u032be\u0337\u0357\u034a\u035b\u035c\u0353y\u0337\u034c\u030f\r\n\u0335\u031b\u0309\u0351\u0300\u033e\u0348\u0322\u0325\u0319\u0328\r\n\u0338\u0307\u035d\u0304\u0319\u034e\u0317\u032cd\u0335\u034a\u035d\u0312\u0341\u032e\u0323\u033a\u0359\u0327e\u0336\u034c\u0322v\u0335\u034c\u0350\u033e\u032d\u031c\u032e\u035ci\u0336\u035b\u0351\u031d\u0318l\u0338\u031a\u035d\u035b\u0322\u032c\u0345\u0318\u0322v\u0334\u0344\u0312\u0357\u0307\u0347\u0316\u0322a\u0334\u0311\u0321\u0333\u032a\u0321\u035cl\u0337\u035d\u034c\u034a\u033al\u0338\u034b\u0353\u0330\u0326\u0316\u0317e\u0335\u0357\u032a\u0356\u0316\u032ay\u0334\u0313\u0340\u0349\u032c\u035a\u035c\u032b \u0337\u0342\u033e\u0360\u0302\u0312\u0333\u0348\u0321\u034dd\u0335\u030c\u0350\u033e\u0351\u031a\u0325\u0355\u0319e\u0334\u0344\u030f\u0306\u0359v\u0337\u0313\u0352\u0343\u0332\u0317i\u0334\u033f\u030f\u0308\u031b\u0318\u0316\u0323\u033bl\u0337\u035b\u0341\u0312\u0324v\u0336\u0343\u035b\u0356\u0333\u0316\u031f\u031ea\u0337\u0341\u0330l\u0338\u0342\u0340\u0353l\u0338\u0357\u034c\u033f\u0300\u0318\u033c\u035a\u0324\u031fe\u0337\u034c\u0318\u0319\u0349\u032fy\u0337\u0351\u0301\u0326\u0329\u032e\u033b\u031c \u0334\u030a\u034a\u0358\u0305\u0323d\u0338\u034a\u032c\u033ce\u0337\u0300\u034b\u0343\u0347\u032b\u0317v\u0336\u0311\u0313\u030c\u0301\u0323\u0318\u0348i\u0334\u0315\u034b\u0341\u0303\u032d\u0356l\u0335\u0310\u0314\u030e\u035b\u0312\u0331\u0353\u032d\u0317v\u0337\u034b\u0351\u0344\u034a\u035d\u031e\u035c\u0356\u0316\u0356a\u0334\u034c\u031b\u030d\u0344\u0351\u0328\u032e\u033cl\u0337\u0303\u0309\u0313\u0344\u032cl\u0336\u034c\u0331\u0327\u0317\u0326e\u0335\u0344\u0344\u034e\u0353\u0323\u031e\u0317y\u0336\u030e\u0341\u0315\u0306\u0351\u035a\u0328\u0320\u0318\u032f \u0337\u0352\u0314\u0313\u0344\u0303\u032d\u0322\u0329d\u0337\u0360\u030e\u032d\u0327\u0332\u0332e\u0334\u0300\u035av\u0335\u0309\u0302\u0326\u035c\u0347\u0355\u031ei\u0337\u030a\u035b\u032cl\u0336\u030c\u0309\u0342\u0356\u032b\u033cv\u0337\u0343\u0353\u0332a\u0335\u033d\u035b\u031b\u0346\u0307\u0345\u032d\u032b\u032f\u0355l\u0334\u0300\u0308\u0348\u0359\u0331\u0331l\u0338\u0314\u0306\u0314\u0343\u0302\u033c\u0330\u034d\u034de\u0335\u0314\u033f\u033f\u0329y\r\n\r\n\r\n*/\r\n\r\n\r\n\r\ncontract devilvalleywtfNFT is ERC721A, Ownable {\r\n  string _baseTokenURI;\r\n  \r\n  bool public isActive = false;\r\n\r\n  uint256 public mintPrice = 0.00666 ether;\r\n  uint256 public MAX_SUPPLY = 6666;\r\n  uint256 public FREE_MAX_SUPPLY = 2222;\r\n  uint256 private reserveAtATime = 66;\r\n  uint256 private reservedCount = 0;\r\n  uint256 private maxReserveCount = 66;\r\n  uint256 public maxAllowedTokensPerPurchase = 5;\r\n  uint256 public maxAllowedTokensPerWallet = 5;\r\n  uint256 public FREE_AllowedTokensPerWallet = 1;\r\n\r\n  address private Address1 = 0x56b4cC5eF8A95F88868F9e44EfC5371fDd1Fc1e3;\r\n  address private Address2 = 0xfE1cD162F07A70914584c24437Dfa88ef1212807;\r\n\r\n\r\n  constructor(string memory baseURI) ERC721A(\"devilvalley\", \"DV\") {\r\n    setBaseURI(baseURI);\r\n  }\r\n\r\n  modifier saleIsOpen {\r\n    require(totalSupply() <= MAX_SUPPLY, \"Sale has ended.\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyAuthorized() {\r\n    require(owner() == msg.sender);\r\n    _;\r\n  }\r\n\r\n  function setPrice(uint256 _price) public onlyAuthorized {\r\n    mintPrice = _price;\r\n  }\r\n  \r\n  function toggleSale() public onlyAuthorized {\r\n    isActive = !isActive;\r\n  }\r\n\r\n  function setBaseURI(string memory baseURI) public onlyAuthorized {\r\n    _baseTokenURI = baseURI;\r\n  }\r\n\r\n  function setReserveAtATime(uint256 val) public onlyAuthorized {\r\n    reserveAtATime = val;\r\n  }\r\n\r\n  function setMaxReserve(uint256 val) public onlyAuthorized {\r\n    maxReserveCount = val;\r\n  }\r\n\r\n  function _baseURI() internal view virtual override returns (string memory) {\r\n    return _baseTokenURI;\r\n  }\r\n\r\n  function setMaximumAllowedTokensPerTx(uint256 _count) public onlyAuthorized {\r\n    maxAllowedTokensPerPurchase = _count;\r\n  }\r\n\r\n  function setMaximumAllowedTokensPerWallet(uint256 _count) public onlyAuthorized {\r\n    maxAllowedTokensPerWallet = _count;\r\n  }\r\n\r\n  function setFreeMaximumAllowedTokensPerWallet(uint256 _count) public onlyAuthorized {\r\n    FREE_AllowedTokensPerWallet = _count;\r\n  }\r\n\r\n  function setMaxMintSupply(uint256 maxMintSupply) external  onlyAuthorized {\r\n    MAX_SUPPLY = maxMintSupply;\r\n  }\r\n\r\n  function reserveNft() public onlyAuthorized {\r\n    require(reservedCount <= maxReserveCount, \"Max Reserves taken already!\");\r\n\r\n     _safeMint(msg.sender, reserveAtATime);\r\n  }\r\n\r\n  function batchAirdrop(uint256 _count, address[] calldata addresses) external onlyAuthorized {\r\n    uint256 supply = totalSupply();\r\n\r\n    require(supply <= MAX_SUPPLY, \"Total supply spent.\");\r\n    require(supply + _count <= MAX_SUPPLY, \"Total supply exceeded.\");\r\n\r\n    for (uint256 i = 0; i < addresses.length; i++) {\r\n      require(addresses[i] != address(0), \"Can't add a null address\");\r\n      _safeMint(addresses[i],_count);\r\n    }\r\n  }\r\n\r\n  function mint(uint256 _count) public payable saleIsOpen {\r\n    uint256 mintIndex = totalSupply();\r\n\r\n    if (msg.sender != owner()) {\r\n      require(isActive, \"Sale is not active currently.\");\r\n      require(mintIndex + _count <= MAX_SUPPLY, \"Total supply exceeded.\");\r\n      require(_count <= maxAllowedTokensPerPurchase,\"Exceeds maximum allowed tokens\");\r\n      require(balanceOf(msg.sender) + _count <= maxAllowedTokensPerWallet,\"Exceeds maximum tokens allowed per wallet\");\r\n\r\n      if(balanceOf(msg.sender) < FREE_AllowedTokensPerWallet && mintIndex < FREE_MAX_SUPPLY) {\r\n          require(msg.value >= mintPrice*(_count - FREE_AllowedTokensPerWallet), \"insufficient funds\");\r\n      } else {\r\n        require(msg.value >= mintPrice * _count, \"Insufficient ETH amount sent.\");\r\n      }\r\n    }\r\n\r\n    _safeMint(msg.sender, _count);\r\n  }\r\n\r\n  function withdraw() external onlyAuthorized {\r\n    uint balance = address(this).balance;\r\n    payable(Address1).transfer((balance * 8500) / 10000);\r\n    payable(Address2).transfer((balance * 1500) / 10000);\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintERC2309QuantityExceedsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnershipNotInitializedForExtraData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ConsecutiveTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FREE_AllowedTokensPerWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FREE_MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"batchAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAllowedTokensPerPurchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAllowedTokensPerWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"setFreeMaximumAllowedTokensPerWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxMintSupply\",\"type\":\"uint256\"}],\"name\":\"setMaxMintSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setMaxReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"setMaximumAllowedTokensPerTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"setMaximumAllowedTokensPerWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setReserveAtATime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "devilvalleywtfNFT", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6a10d211b0b65f64975894bda90f8401f41568612c0427e8f97a6edb022cbce3"}