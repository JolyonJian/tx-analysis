{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/bazaar/SuperRareBazaar.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable-0.7.2/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable-0.7.2/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.7.2/token/ERC721/IERC721.sol\\\";\\nimport \\\"./storage/SuperRareBazaarStorage.sol\\\";\\nimport \\\"./ISuperRareBazaar.sol\\\";\\n\\n/// @author koloz\\n/// @title SuperRareBazaar\\n/// @notice The unified contract for the bazaar logic (Marketplace and Auction House).\\n/// @dev All storage is inherrited and append only (no modifications) to make upgrade compliant.\\ncontract SuperRareBazaar is\\n    ISuperRareBazaar,\\n    OwnableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    SuperRareBazaarStorage\\n{\\n    /////////////////////////////////////////////////////////////////////////\\n    // Initializer\\n    /////////////////////////////////////////////////////////////////////////\\n    function initialize(\\n        address _marketplaceSettings,\\n        address _royaltyRegistry,\\n        address _royaltyEngine,\\n        address _superRareMarketplace,\\n        address _superRareAuctionHouse,\\n        address _spaceOperatorRegistry,\\n        address _approvedTokenRegistry,\\n        address _payments,\\n        address _stakingRegistry,\\n        address _networkBeneficiary\\n    ) public initializer {\\n        require(_marketplaceSettings != address(0));\\n        require(_royaltyRegistry != address(0));\\n        require(_royaltyEngine != address(0));\\n        require(_superRareMarketplace != address(0));\\n        require(_superRareAuctionHouse != address(0));\\n        require(_spaceOperatorRegistry != address(0));\\n        require(_approvedTokenRegistry != address(0));\\n        require(_payments != address(0));\\n        require(_networkBeneficiary != address(0));\\n\\n        marketplaceSettings = IMarketplaceSettings(_marketplaceSettings);\\n        royaltyRegistry = IERC721CreatorRoyalty(_royaltyRegistry);\\n        royaltyEngine = IRoyaltyEngineV1(_royaltyEngine);\\n        superRareMarketplace = _superRareMarketplace;\\n        superRareAuctionHouse = _superRareAuctionHouse;\\n        spaceOperatorRegistry = ISpaceOperatorRegistry(_spaceOperatorRegistry);\\n        approvedTokenRegistry = IApprovedTokenRegistry(_approvedTokenRegistry);\\n        payments = IPayments(_payments);\\n        stakingRegistry = _stakingRegistry;\\n        networkBeneficiary = _networkBeneficiary;\\n\\n        minimumBidIncreasePercentage = 10;\\n        maxAuctionLength = 7 days;\\n        auctionLengthExtension = 15 minutes;\\n        offerCancelationDelay = 5 minutes;\\n\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////\\n    // Admin Functions\\n    /////////////////////////////////////////////////////////////////////////\\n    function setMarketplaceSettings(address _marketplaceSettings)\\n        external\\n        onlyOwner\\n    {\\n        require(_marketplaceSettings != address(0));\\n        marketplaceSettings = IMarketplaceSettings(_marketplaceSettings);\\n    }\\n\\n    function setRoyaltyRegistry(address _royaltyRegistry) external onlyOwner {\\n        require(_royaltyRegistry != address(0));\\n        royaltyRegistry = IERC721CreatorRoyalty(_royaltyRegistry);\\n    }\\n\\n    function setRoyaltyEngine(address _royaltyEngine) external onlyOwner {\\n        require(_royaltyEngine != address(0));\\n        royaltyEngine = IRoyaltyEngineV1(_royaltyEngine);\\n    }\\n\\n    function setSuperRareMarketplace(address _superRareMarketplace)\\n        external\\n        onlyOwner\\n    {\\n        require(_superRareMarketplace != address(0));\\n        superRareMarketplace = _superRareMarketplace;\\n    }\\n\\n    function setSuperRareAuctionHouse(address _superRareAuctionHouse)\\n        external\\n        onlyOwner\\n    {\\n        require(_superRareAuctionHouse != address(0));\\n        superRareAuctionHouse = _superRareAuctionHouse;\\n    }\\n\\n    function setSpaceOperatorRegistry(address _spaceOperatorRegistry)\\n        external\\n        onlyOwner\\n    {\\n        require(_spaceOperatorRegistry != address(0));\\n        spaceOperatorRegistry = ISpaceOperatorRegistry(_spaceOperatorRegistry);\\n    }\\n\\n    function setApprovedTokenRegistry(address _approvedTokenRegistry)\\n        external\\n        onlyOwner\\n    {\\n        require(_approvedTokenRegistry != address(0));\\n        approvedTokenRegistry = IApprovedTokenRegistry(_approvedTokenRegistry);\\n    }\\n\\n    function setPayments(address _payments) external onlyOwner {\\n        require(_payments != address(0));\\n        payments = IPayments(_payments);\\n    }\\n\\n    function setStakingRegistry(address _stakingRegistry) external onlyOwner {\\n        require(_stakingRegistry != address(0));\\n        stakingRegistry = _stakingRegistry;\\n    }\\n\\n    function setNetworkBeneficiary(address _networkBeneficiary)\\n        external\\n        onlyOwner\\n    {\\n        require(_networkBeneficiary != address(0));\\n        networkBeneficiary = _networkBeneficiary;\\n    }\\n\\n    function setMinimumBidIncreasePercentage(\\n        uint8 _minimumBidIncreasePercentage\\n    ) external onlyOwner {\\n        minimumBidIncreasePercentage = _minimumBidIncreasePercentage;\\n    }\\n\\n    function setMaxAuctionLength(uint8 _maxAuctionLength) external onlyOwner {\\n        maxAuctionLength = _maxAuctionLength;\\n    }\\n\\n    function setAuctionLengthExtension(uint256 _auctionLengthExtension)\\n        external\\n        onlyOwner\\n    {\\n        auctionLengthExtension = _auctionLengthExtension;\\n    }\\n\\n    function setOfferCancelationDelay(uint256 _offerCancelationDelay)\\n        external\\n        onlyOwner\\n    {\\n        offerCancelationDelay = _offerCancelationDelay;\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////\\n    // Marketplace Functions\\n    /////////////////////////////////////////////////////////////////////////\\n\\n    /// @notice Place an offer for a given asset\\n    /// @dev Notice we need to verify that the msg sender has approved us to move funds on their behalf.\\n    /// @dev Covers use of any currency (0 address is eth).\\n    /// @dev _amount is the amount of the offer excluding the marketplace fee.\\n    /// @dev There can be multiple offers of different currencies, but only 1 per currency.\\n    /// @param _originContract Contract address of the asset being listed.\\n    /// @param _tokenId Token Id of the asset.\\n    /// @param _currencyAddress Address of the token being offered.\\n    /// @param _amount Amount being offered.\\n    /// @param _convertible If the offer can be converted into an auction\\n    function offer(\\n        address _originContract,\\n        uint256 _tokenId,\\n        address _currencyAddress,\\n        uint256 _amount,\\n        bool _convertible\\n    ) external payable override {\\n        (bool success, bytes memory data) = superRareMarketplace.delegatecall(\\n            abi.encodeWithSelector(\\n                this.offer.selector,\\n                _originContract,\\n                _tokenId,\\n                _currencyAddress,\\n                _amount,\\n                _convertible\\n            )\\n        );\\n\\n        require(success, string(data));\\n    }\\n\\n    /// @notice Purchases the token for the current sale price.\\n    /// @dev Covers use of any currency (0 address is eth).\\n    /// @dev Need to verify that the buyer (if not using eth) has the marketplace approved for _currencyContract.\\n    /// @dev Need to verify that the seller has the marketplace approved for _originContract.\\n    /// @param _originContract Contract address for asset being bought.\\n    /// @param _tokenId TokenId of asset being bought.\\n    /// @param _currencyAddress Currency address of asset being used to buy.\\n    /// @param _amount Amount the piece if being bought for (including marketplace fee).\\n    function buy(\\n        address _originContract,\\n        uint256 _tokenId,\\n        address _currencyAddress,\\n        uint256 _amount\\n    ) external payable override {\\n        (bool success, bytes memory data) = superRareMarketplace.delegatecall(\\n            abi.encodeWithSelector(\\n                this.buy.selector,\\n                _originContract,\\n                _tokenId,\\n                _currencyAddress,\\n                _amount\\n            )\\n        );\\n\\n        require(success, string(data));\\n    }\\n\\n    /// @notice Cancels an existing offer the sender has placed on a piece.\\n    /// @param _originContract Contract address of token.\\n    /// @param _tokenId TokenId that has an offer.\\n    /// @param _currencyAddress Currency address of the offer.\\n    function cancelOffer(\\n        address _originContract,\\n        uint256 _tokenId,\\n        address _currencyAddress\\n    ) external override {\\n        (bool success, bytes memory data) = superRareMarketplace.delegatecall(\\n            abi.encodeWithSelector(\\n                this.cancelOffer.selector,\\n                _originContract,\\n                _tokenId,\\n                _currencyAddress\\n            )\\n        );\\n\\n        require(success, string(data));\\n    }\\n\\n    /// @notice Sets a sale price for the given asset(s) directed at the _target address.\\n    /// @dev Covers use of any currency (0 address is eth).\\n    /// @dev Sale price for everyone is denoted as the 0 address.\\n    /// @dev Only 1 currency can be used for the sale price directed at a speicific target.\\n    /// @dev _listPrice of 0 signifies removing the list price for the provided currency.\\n    /// @dev This function can be used for counter offers as well.\\n    /// @param _originContract Contract address of the asset being listed.\\n    /// @param _tokenId Token Id of the asset.\\n    /// @param _currencyAddress Contract address of the currency asset is being listed for.\\n    /// @param _listPrice Amount of the currency the asset is being listed for (including all decimal points).\\n    /// @param _target Address of the person this sale price is target to.\\n    /// @param _splitAddresses Addresses to split the sellers commission with.\\n    /// @param _splitRatios The ratio for the split corresponding to each of the addresses being split with.\\n    function setSalePrice(\\n        address _originContract,\\n        uint256 _tokenId,\\n        address _currencyAddress,\\n        uint256 _listPrice,\\n        address _target,\\n        address payable[] calldata _splitAddresses,\\n        uint8[] calldata _splitRatios\\n    ) external override {\\n        (bool success, bytes memory data) = superRareMarketplace.delegatecall(\\n            abi.encodeWithSelector(\\n                this.setSalePrice.selector,\\n                _originContract,\\n                _tokenId,\\n                _currencyAddress,\\n                _listPrice,\\n                _target,\\n                _splitAddresses,\\n                _splitRatios\\n            )\\n        );\\n\\n        require(success, string(data));\\n    }\\n\\n    /// @notice Removes the current sale price of an asset for _target for the given currency.\\n    /// @dev Sale prices could still exist for different currencies.\\n    /// @dev Sale prices could still exist for different targets.\\n    /// @dev Zero address for _currency means that its listed in ether.\\n    /// @dev _target of zero address is the general sale price.\\n    /// @param _originContract The origin contract of the asset.\\n    /// @param _tokenId The tokenId of the asset within the _originContract.\\n    /// @param _target The address of the person\\n    function removeSalePrice(\\n        address _originContract,\\n        uint256 _tokenId,\\n        address _target\\n    ) external override {\\n        IERC721 erc721 = IERC721(_originContract);\\n        address tokenOwner = erc721.ownerOf(_tokenId);\\n\\n        require(\\n            msg.sender == tokenOwner,\\n            \\\"removeSalePrice::Must be tokenOwner.\\\"\\n        );\\n\\n        delete tokenSalePrices[_originContract][_tokenId][_target];\\n\\n        emit SetSalePrice(\\n            _originContract,\\n            address(0),\\n            address(0),\\n            0,\\n            _tokenId,\\n            new address payable[](0),\\n            new uint8[](0)\\n        );\\n    }\\n\\n    /// @notice Accept an offer placed on _originContract : _tokenId.\\n    /// @dev Zero address for _currency means that the offer being accepted is in ether.\\n    /// @param _originContract Contract of the asset the offer was made on.\\n    /// @param _tokenId TokenId of the asset.\\n    /// @param _currencyAddress Address of the currency used for the offer.\\n    /// @param _amount Amount the offer was for/and is being accepted.\\n    /// @param _splitAddresses Addresses to split the sellers commission with.\\n    /// @param _splitRatios The ratio for the split corresponding to each of the addresses being split with.\\n    function acceptOffer(\\n        address _originContract,\\n        uint256 _tokenId,\\n        address _currencyAddress,\\n        uint256 _amount,\\n        address payable[] calldata _splitAddresses,\\n        uint8[] calldata _splitRatios\\n    ) external override {\\n        (bool success, bytes memory data) = superRareMarketplace.delegatecall(\\n            abi.encodeWithSelector(\\n                this.acceptOffer.selector,\\n                _originContract,\\n                _tokenId,\\n                _currencyAddress,\\n                _amount,\\n                _splitAddresses,\\n                _splitRatios\\n            )\\n        );\\n\\n        require(success, string(data));\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////\\n    // Auction House Functions\\n    /////////////////////////////////////////////////////////////////////////\\n\\n    /// @notice Configures an Auction for a given asset.\\n    /// @dev If auction type is coldie (reserve) then _startingAmount cant be 0.\\n    /// @dev _currencyAddress equal to the zero address denotes eth.\\n    /// @dev All time related params are unix epoch timestamps.\\n    /// @param _auctionType The type of auction being configured.\\n    /// @param _originContract Contract address of the asset being put up for auction.\\n    /// @param _tokenId Token Id of the asset.\\n    /// @param _startingAmount The reserve price or min bid of an auction.\\n    /// @param _currencyAddress The currency the auction is being conducted in.\\n    /// @param _lengthOfAuction The amount of time in seconds that the auction is configured for.\\n    /// @param _splitAddresses Addresses to split the sellers commission with.\\n    /// @param _splitRatios The ratio for the split corresponding to each of the addresses being split with.\\n    function configureAuction(\\n        bytes32 _auctionType,\\n        address _originContract,\\n        uint256 _tokenId,\\n        uint256 _startingAmount,\\n        address _currencyAddress,\\n        uint256 _lengthOfAuction,\\n        uint256 _startTime,\\n        address payable[] calldata _splitAddresses,\\n        uint8[] calldata _splitRatios\\n    ) external override {\\n        (bool success, bytes memory data) = superRareAuctionHouse.delegatecall(\\n            abi.encodeWithSelector(\\n                this.configureAuction.selector,\\n                _auctionType,\\n                _originContract,\\n                _tokenId,\\n                _startingAmount,\\n                _currencyAddress,\\n                _lengthOfAuction,\\n                _startTime,\\n                _splitAddresses,\\n                _splitRatios\\n            )\\n        );\\n\\n        require(success, string(data));\\n    }\\n\\n    /// @notice Converts an offer into a coldie auction.\\n    /// @dev Covers use of any currency (0 address is eth).\\n    /// @dev Only covers converting an offer to a coldie auction.\\n    /// @dev Cant convert offer if an auction currently exists.\\n    /// @param _originContract Contract address of the asset.\\n    /// @param _tokenId Token Id of the asset.\\n    /// @param _currencyAddress Address of the currency being converted.\\n    /// @param _amount Amount being converted into an auction.\\n    /// @param _lengthOfAuction Number of seconds the auction will last.\\n    /// @param _splitAddresses Addresses that the sellers take in will be split amongst.\\n    /// @param _splitRatios Ratios that the take in will be split by.\\n    function convertOfferToAuction(\\n        address _originContract,\\n        uint256 _tokenId,\\n        address _currencyAddress,\\n        uint256 _amount,\\n        uint256 _lengthOfAuction,\\n        address payable[] calldata _splitAddresses,\\n        uint8[] calldata _splitRatios\\n    ) external override {\\n        (bool success, bytes memory data) = superRareAuctionHouse.delegatecall(\\n            abi.encodeWithSelector(\\n                this.convertOfferToAuction.selector,\\n                _originContract,\\n                _tokenId,\\n                _currencyAddress,\\n                _amount,\\n                _lengthOfAuction,\\n                _splitAddresses,\\n                _splitRatios\\n            )\\n        );\\n\\n        require(success, string(data));\\n    }\\n\\n    /// @notice Cancels a configured Auction that has not started.\\n    /// @dev Requires the person sending the message to be the auction creator or token owner.\\n    /// @param _originContract Contract address of the asset pending auction.\\n    /// @param _tokenId Token Id of the asset.\\n    function cancelAuction(address _originContract, uint256 _tokenId)\\n        external\\n        override\\n    {\\n        (bool success, bytes memory data) = superRareAuctionHouse.delegatecall(\\n            abi.encodeWithSelector(\\n                this.cancelAuction.selector,\\n                _originContract,\\n                _tokenId\\n            )\\n        );\\n\\n        require(success, string(data));\\n    }\\n\\n    /// @notice Places a bid on a valid auction.\\n    /// @dev Only the configured currency can be used (Zero address for eth)\\n    /// @param _originContract Contract address of asset being bid on.\\n    /// @param _tokenId Token Id of the asset.\\n    /// @param _currencyAddress Address of currency being used to bid.\\n    /// @param _amount Amount of the currency being used for the bid.\\n    function bid(\\n        address _originContract,\\n        uint256 _tokenId,\\n        address _currencyAddress,\\n        uint256 _amount\\n    ) external payable override {\\n        (bool success, bytes memory data) = superRareAuctionHouse.delegatecall(\\n            abi.encodeWithSelector(\\n                this.bid.selector,\\n                _originContract,\\n                _tokenId,\\n                _currencyAddress,\\n                _amount\\n            )\\n        );\\n\\n        require(success, string(data));\\n    }\\n\\n    /// @notice Settles an auction that has ended.\\n    /// @dev Anyone is able to settle an auction since non-input params are used.\\n    /// @param _originContract Contract address of asset.\\n    /// @param _tokenId Token Id of the asset.\\n    function settleAuction(address _originContract, uint256 _tokenId)\\n        external\\n        override\\n    {\\n        (bool success, bytes memory data) = superRareAuctionHouse.delegatecall(\\n            abi.encodeWithSelector(\\n                this.settleAuction.selector,\\n                _originContract,\\n                _tokenId\\n            )\\n        );\\n\\n        require(success, string(data));\\n    }\\n\\n    /// @notice Grabs the current auction details for a token.\\n    /// @param _originContract Contract address of asset.\\n    /// @param _tokenId Token Id of the asset.\\n    /** @return Auction Struct: creatorAddress, creationTime, startingTime, lengthOfAuction,\\n                currencyAddress, minimumBid, auctionType, splitRecipients array, and splitRatios array.\\n    */\\n    function getAuctionDetails(address _originContract, uint256 _tokenId)\\n        external\\n        view\\n        override\\n        returns (\\n            address,\\n            uint256,\\n            uint256,\\n            uint256,\\n            address,\\n            uint256,\\n            bytes32,\\n            address payable[] memory,\\n            uint8[] memory\\n        )\\n    {\\n        Auction memory auction = tokenAuctions[_originContract][_tokenId];\\n\\n        return (\\n            auction.auctionCreator,\\n            auction.creationBlock,\\n            auction.startingTime,\\n            auction.lengthOfAuction,\\n            auction.currencyAddress,\\n            auction.minimumBid,\\n            auction.auctionType,\\n            auction.splitRecipients,\\n            auction.splitRatios\\n        );\\n    }\\n\\n    function getSalePrice(\\n        address _originContract,\\n        uint256 _tokenId,\\n        address _target\\n    )\\n        external\\n        view\\n        override\\n        returns (\\n            address,\\n            address,\\n            uint256,\\n            address payable[] memory,\\n            uint8[] memory\\n        )\\n    {\\n        SalePrice memory sp = tokenSalePrices[_originContract][_tokenId][\\n            _target\\n        ];\\n\\n        return (\\n            sp.seller,\\n            sp.currencyAddress,\\n            sp.amount,\\n            sp.splitRecipients,\\n            sp.splitRatios\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable-0.7.2/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable-0.7.2/utils/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-0.7.2/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"contracts/bazaar/storage/SuperRareBazaarStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\nimport \\\"../../marketplace/IMarketplaceSettings.sol\\\";\\nimport \\\"../../royalty/creator/IERC721CreatorRoyalty.sol\\\";\\nimport \\\"../../payments/IPayments.sol\\\";\\nimport \\\"../../registry/spaces/ISpaceOperatorRegistry.sol\\\";\\nimport \\\"../../registry/token/IApprovedTokenRegistry.sol\\\";\\nimport \\\"../../royalty/creator/IRoyaltyEngine.sol\\\";\\n\\n/// @author koloz\\n/// @title SuperRareBazaar Storage Contract\\n/// @dev STORAGE CAN ONLY BE APPENDED NOT INSERTED OR MODIFIED\\ncontract SuperRareBazaarStorage {\\n    /////////////////////////////////////////////////////////////////////////\\n    // Constants\\n    /////////////////////////////////////////////////////////////////////////\\n\\n    // Auction Types\\n    bytes32 public constant COLDIE_AUCTION = \\\"COLDIE_AUCTION\\\";\\n    bytes32 public constant SCHEDULED_AUCTION = \\\"SCHEDULED_AUCTION\\\";\\n    bytes32 public constant NO_AUCTION = bytes32(0);\\n\\n    /////////////////////////////////////////////////////////////////////////\\n    // Structs\\n    /////////////////////////////////////////////////////////////////////////\\n\\n    // The Offer truct for a given token:\\n    // buyer - address of person making the offer\\n    // currencyAddress - address of the erc20 token used for an offer\\n    //                   or the zero address for eth\\n    // amount - offer in wei/full erc20 value\\n    // marketplaceFee - the amount that is taken by the network on offer acceptance.\\n    struct Offer {\\n        address payable buyer;\\n        uint256 amount;\\n        uint256 timestamp;\\n        uint8 marketplaceFee;\\n        bool convertible;\\n    }\\n\\n    // The Sale Price struct for a given token:\\n    // seller - address of the person selling the token\\n    // currencyAddress - address of the erc20 token used for an offer\\n    //                   or the zero address for eth\\n    // amount - offer in wei/full erc20 value\\n    struct SalePrice {\\n        address payable seller;\\n        address currencyAddress;\\n        uint256 amount;\\n        address payable[] splitRecipients;\\n        uint8[] splitRatios;\\n    }\\n\\n    // Structure of an Auction:\\n    // auctionCreator - creator of the auction\\n    // creationBlock - time that the auction was created/configured\\n    // startingBlock - time that the auction starts on\\n    // lengthOfAuction - how long the auction is\\n    // currencyAddress - address of the erc20 token used for an offer\\n    //                   or the zero address for eth\\n    // minimumBid - min amount a bidder can bid at the start of an auction.\\n    // auctionType - type of auction, represented as the formatted bytes 32 string\\n    struct Auction {\\n        address payable auctionCreator;\\n        uint256 creationBlock;\\n        uint256 startingTime;\\n        uint256 lengthOfAuction;\\n        address currencyAddress;\\n        uint256 minimumBid;\\n        bytes32 auctionType;\\n        address payable[] splitRecipients;\\n        uint8[] splitRatios;\\n    }\\n\\n    struct Bid {\\n        address payable bidder;\\n        address currencyAddress;\\n        uint256 amount;\\n        uint8 marketplaceFee;\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////\\n    // Events\\n    /////////////////////////////////////////////////////////////////////////\\n    event Sold(\\n        address indexed _originContract,\\n        address indexed _buyer,\\n        address indexed _seller,\\n        address _currencyAddress,\\n        uint256 _amount,\\n        uint256 _tokenId\\n    );\\n\\n    event SetSalePrice(\\n        address indexed _originContract,\\n        address indexed _currencyAddress,\\n        address _target,\\n        uint256 _amount,\\n        uint256 _tokenId,\\n        address payable[] _splitRecipients,\\n        uint8[] _splitRatios\\n    );\\n\\n    event OfferPlaced(\\n        address indexed _originContract,\\n        address indexed _bidder,\\n        address indexed _currencyAddress,\\n        uint256 _amount,\\n        uint256 _tokenId,\\n        bool _convertible\\n    );\\n\\n    event AcceptOffer(\\n        address indexed _originContract,\\n        address indexed _bidder,\\n        address indexed _seller,\\n        address _currencyAddress,\\n        uint256 _amount,\\n        uint256 _tokenId,\\n        address payable[] _splitAddresses,\\n        uint8[] _splitRatios\\n    );\\n\\n    event CancelOffer(\\n        address indexed _originContract,\\n        address indexed _bidder,\\n        address indexed _currencyAddress,\\n        uint256 _amount,\\n        uint256 _tokenId\\n    );\\n\\n    event NewAuction(\\n        address indexed _contractAddress,\\n        uint256 indexed _tokenId,\\n        address indexed _auctionCreator,\\n        address _currencyAddress,\\n        uint256 _startingTime,\\n        uint256 _minimumBid,\\n        uint256 _lengthOfAuction\\n    );\\n\\n    event CancelAuction(\\n        address indexed _contractAddress,\\n        uint256 indexed _tokenId,\\n        address indexed _auctionCreator\\n    );\\n\\n    event AuctionBid(\\n        address indexed _contractAddress,\\n        address indexed _bidder,\\n        uint256 indexed _tokenId,\\n        address _currencyAddress,\\n        uint256 _amount,\\n        bool _startedAuction,\\n        uint256 _newAuctionLength,\\n        address _previousBidder\\n    );\\n\\n    event AuctionSettled(\\n        address indexed _contractAddress,\\n        address indexed _bidder,\\n        address _seller,\\n        uint256 indexed _tokenId,\\n        address _currencyAddress,\\n        uint256 _amount\\n    );\\n\\n    /////////////////////////////////////////////////////////////////////////\\n    // State Variables\\n    /////////////////////////////////////////////////////////////////////////\\n\\n    // Current marketplace settings implementation to be used\\n    IMarketplaceSettings public marketplaceSettings;\\n\\n    // Current creator royalty implementation to be used\\n    IERC721CreatorRoyalty public royaltyRegistry;\\n\\n    // Address of the global royalty engine being used.\\n    IRoyaltyEngineV1 public royaltyEngine;\\n\\n    // Current SuperRareMarketplace implementation to be used\\n    address public superRareMarketplace;\\n\\n    // Current SuperRareAuctionHouse implementation to be used\\n    address public superRareAuctionHouse;\\n\\n    // Current SpaceOperatorRegistry implementation to be used.\\n    ISpaceOperatorRegistry public spaceOperatorRegistry;\\n\\n    // Current ApprovedTokenRegistry implementation being used for currencies.\\n    IApprovedTokenRegistry public approvedTokenRegistry;\\n\\n    // Current payments contract to use\\n    IPayments public payments;\\n\\n    // Address to be used for staking registry.\\n    address public stakingRegistry;\\n\\n    // Address of the network beneficiary\\n    address public networkBeneficiary;\\n\\n    // A minimum increase in bid amount when out bidding someone.\\n    uint8 public minimumBidIncreasePercentage; // 10 = 10%\\n\\n    // Maximum length that an auction can be.\\n    uint256 public maxAuctionLength;\\n\\n    // Extension length for an auction\\n    uint256 public auctionLengthExtension;\\n\\n    // Offer cancellation delay\\n    uint256 public offerCancelationDelay;\\n\\n    // Mapping from contract to mapping of tokenId to mapping of target to sale price.\\n    mapping(address => mapping(uint256 => mapping(address => SalePrice)))\\n        public tokenSalePrices;\\n\\n    // Mapping from contract to mapping of tokenId to mapping of currency address to Current Offer.\\n    mapping(address => mapping(uint256 => mapping(address => Offer)))\\n        public tokenCurrentOffers;\\n\\n    // Mapping from contract to mapping of tokenId to Auction.\\n    mapping(address => mapping(uint256 => Auction)) public tokenAuctions;\\n\\n    // Mapping from contract to mapping of tokenId to Bid.\\n    mapping(address => mapping(uint256 => Bid)) public auctionBids;\\n\\n    uint256[50] private __gap;\\n    /// ALL NEW STORAGE MUST COME AFTER THIS\\n}\\n\"\r\n    },\r\n    \"contracts/bazaar/ISuperRareBazaar.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\n/// @author koloz\\n/// @title ISuperRareBazaar\\n/// @notice Interface for the SuperRareBazaar Contract\\ninterface ISuperRareBazaar {\\n    // Marketplace Functions\\n    // Buyer\\n\\n    /// @notice Create an offer for a given asset\\n    /// @param _originContract Contract address of the asset being listed.\\n    /// @param _tokenId Token Id of the asset.\\n    /// @param _currencyAddress Address of the token being offered.\\n    /// @param _amount Amount being offered.\\n    /// @param _convertible If the offer can be converted into an auction\\n    function offer(\\n        address _originContract,\\n        uint256 _tokenId,\\n        address _currencyAddress,\\n        uint256 _amount,\\n        bool _convertible\\n    ) external payable;\\n\\n    /// @notice Purchases the token for the current sale price.\\n    /// @param _originContract Contract address for asset being bought.\\n    /// @param _tokenId TokenId of asset being bought.\\n    /// @param _currencyAddress Currency address of asset being used to buy.\\n    /// @param _amount Amount the piece if being bought for.\\n    function buy(\\n        address _originContract,\\n        uint256 _tokenId,\\n        address _currencyAddress,\\n        uint256 _amount\\n    ) external payable;\\n\\n    /// @notice Cancels an existing offer the sender has placed on a piece.\\n    /// @param _originContract Contract address of token.\\n    /// @param _tokenId TokenId that has an offer.\\n    /// @param _currencyAddress Currency address of the offer.\\n    function cancelOffer(\\n        address _originContract,\\n        uint256 _tokenId,\\n        address _currencyAddress\\n    ) external;\\n\\n    // Seller\\n\\n    /// @notice Sets a sale price for the given asset(s).\\n    /// @param _originContract Contract address of the asset being listed.\\n    /// @param _tokenId Token Id of the asset.\\n    /// @param _currencyAddress Contract address of the currency asset is being listed for.\\n    /// @param _listPrice Amount of the currency the asset is being listed for (including all decimal points).\\n    /// @param _target Address of the person this sale price is target to.\\n    /// @param _splitAddresses Addresses to split the sellers commission with.\\n    /// @param _splitRatios The ratio for the split corresponding to each of the addresses being split with.\\n    function setSalePrice(\\n        address _originContract,\\n        uint256 _tokenId,\\n        address _currencyAddress,\\n        uint256 _listPrice,\\n        address _target,\\n        address payable[] calldata _splitAddresses,\\n        uint8[] calldata _splitRatios\\n    ) external;\\n\\n    /// @notice Removes the current sale price of an asset for the given currency.\\n    /// @param _originContract The origin contract of the asset.\\n    /// @param _tokenId The tokenId of the asset within the _originContract.\\n    /// @param _target The address of the person\\n    function removeSalePrice(\\n        address _originContract,\\n        uint256 _tokenId,\\n        address _target\\n    ) external;\\n\\n    /// @notice Accept an offer placed on _originContract : _tokenId.\\n    /// @param _originContract Contract of the asset the offer was made on.\\n    /// @param _tokenId TokenId of the asset.\\n    /// @param _currencyAddress Address of the currency used for the offer.\\n    /// @param _amount Amount the offer was for/and is being accepted.\\n    /// @param _splitAddresses Addresses to split the sellers commission with.\\n    /// @param _splitRatios The ratio for the split corresponding to each of the addresses being split with.\\n    function acceptOffer(\\n        address _originContract,\\n        uint256 _tokenId,\\n        address _currencyAddress,\\n        uint256 _amount,\\n        address payable[] calldata _splitAddresses,\\n        uint8[] calldata _splitRatios\\n    ) external;\\n\\n    // Auction House\\n    // Anyone\\n\\n    /// @notice Settles an auction that has ended.\\n    /// @param _originContract Contract address of asset.\\n    /// @param _tokenId Token Id of the asset.\\n    function settleAuction(address _originContract, uint256 _tokenId) external;\\n\\n    // Buyer\\n\\n    /// @notice Places a bid on a valid auction.\\n    /// @param _originContract Contract address of asset being bid on.\\n    /// @param _tokenId Token Id of the asset.\\n    /// @param _currencyAddress Address of currency being used to bid.\\n    /// @param _amount Amount of the currency being used for the bid.\\n    function bid(\\n        address _originContract,\\n        uint256 _tokenId,\\n        address _currencyAddress,\\n        uint256 _amount\\n    ) external payable;\\n\\n    // Seller\\n\\n    /// @notice Configures an Auction for a given asset.\\n    /// @param _auctionType The type of auction being configured.\\n    /// @param _originContract Contract address of the asset being put up for auction.\\n    /// @param _tokenId Token Id of the asset.\\n    /// @param _startingAmount The reserve price or min bid of an auction.\\n    /// @param _currencyAddress The currency the auction is being conducted in.\\n    /// @param _lengthOfAuction The amount of time in seconds that the auction is configured for.\\n    /// @param _splitAddresses Addresses to split the sellers commission with.\\n    /// @param _splitRatios The ratio for the split corresponding to each of the addresses being split with.\\n    function configureAuction(\\n        bytes32 _auctionType,\\n        address _originContract,\\n        uint256 _tokenId,\\n        uint256 _startingAmount,\\n        address _currencyAddress,\\n        uint256 _lengthOfAuction,\\n        uint256 _startTime,\\n        address payable[] calldata _splitAddresses,\\n        uint8[] calldata _splitRatios\\n    ) external;\\n\\n    /// @notice Cancels a configured Auction that has not started.\\n    /// @param _originContract Contract address of the asset pending auction.\\n    /// @param _tokenId Token Id of the asset.\\n    function cancelAuction(address _originContract, uint256 _tokenId) external;\\n\\n    /// @notice Converts an offer into a coldie auction.\\n    /// @param _originContract Contract address of the asset.\\n    /// @param _tokenId Token Id of the asset.\\n    /// @param _currencyAddress Address of the currency being converted.\\n    /// @param _amount Amount being converted into an auction.\\n    /// @param _lengthOfAuction Number of seconds the auction will last.\\n    /// @param _splitAddresses Addresses that the sellers take in will be split amongst.\\n    /// @param _splitRatios Ratios that the take in will be split by.\\n    function convertOfferToAuction(\\n        address _originContract,\\n        uint256 _tokenId,\\n        address _currencyAddress,\\n        uint256 _amount,\\n        uint256 _lengthOfAuction,\\n        address payable[] calldata _splitAddresses,\\n        uint8[] calldata _splitRatios\\n    ) external;\\n\\n    /// @notice Grabs the current auction details for a token.\\n    /// @param _originContract Contract address of asset.\\n    /// @param _tokenId Token Id of the asset.\\n    /** @return Auction Struct: creatorAddress, creationTime, startingTime, lengthOfAuction,\\n                currencyAddress, minimumBid, auctionType, splitRecipients array, and splitRatios array.\\n    */\\n    function getAuctionDetails(address _originContract, uint256 _tokenId)\\n        external\\n        view\\n        returns (\\n            address,\\n            uint256,\\n            uint256,\\n            uint256,\\n            address,\\n            uint256,\\n            bytes32,\\n            address payable[] calldata,\\n            uint8[] calldata\\n        );\\n\\n    function getSalePrice(\\n        address _originContract,\\n        uint256 _tokenId,\\n        address _target\\n    )\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            uint256,\\n            address payable[] memory,\\n            uint8[] memory\\n        );\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable-0.7.2/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable-0.7.2/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable-0.7.2/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-0.7.2/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/marketplace/IMarketplaceSettings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\n/**\\n * @title IMarketplaceSettings Settings governing a marketplace.\\n */\\ninterface IMarketplaceSettings {\\n    /////////////////////////////////////////////////////////////////////////\\n    // Marketplace Min and Max Values\\n    /////////////////////////////////////////////////////////////////////////\\n    /**\\n     * @dev Get the max value to be used with the marketplace.\\n     * @return uint256 wei value.\\n     */\\n    function getMarketplaceMaxValue() external view returns (uint256);\\n\\n    /**\\n     * @dev Get the max value to be used with the marketplace.\\n     * @return uint256 wei value.\\n     */\\n    function getMarketplaceMinValue() external view returns (uint256);\\n\\n    /////////////////////////////////////////////////////////////////////////\\n    // Marketplace Fee\\n    /////////////////////////////////////////////////////////////////////////\\n    /**\\n     * @dev Get the marketplace fee percentage.\\n     * @return uint8 wei fee.\\n     */\\n    function getMarketplaceFeePercentage() external view returns (uint8);\\n\\n    /**\\n     * @dev Utility function for calculating the marketplace fee for given amount of wei.\\n     * @param _amount uint256 wei amount.\\n     * @return uint256 wei fee.\\n     */\\n    function calculateMarketplaceFee(uint256 _amount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /////////////////////////////////////////////////////////////////////////\\n    // Primary Sale Fee\\n    /////////////////////////////////////////////////////////////////////////\\n    /**\\n     * @dev Get the primary sale fee percentage for a specific ERC721 contract.\\n     * @param _contractAddress address ERC721Contract address.\\n     * @return uint8 wei primary sale fee.\\n     */\\n    function getERC721ContractPrimarySaleFeePercentage(address _contractAddress)\\n        external\\n        view\\n        returns (uint8);\\n\\n    /**\\n     * @dev Utility function for calculating the primary sale fee for given amount of wei\\n     * @param _contractAddress address ERC721Contract address.\\n     * @param _amount uint256 wei amount.\\n     * @return uint256 wei fee.\\n     */\\n    function calculatePrimarySaleFee(address _contractAddress, uint256 _amount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Check whether the ERC721 token has sold at least once.\\n     * @param _contractAddress address ERC721Contract address.\\n     * @param _tokenId uint256 token ID.\\n     * @return bool of whether the token has sold.\\n     */\\n    function hasERC721TokenSold(address _contractAddress, uint256 _tokenId)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @dev Mark a token as sold.\\n     * Requirements:\\n     *\\n     * - `_contractAddress` cannot be the zero address.\\n     * @param _contractAddress address ERC721Contract address.\\n     * @param _tokenId uint256 token ID.\\n     * @param _hasSold bool of whether the token should be marked sold or not.\\n     */\\n    function markERC721Token(\\n        address _contractAddress,\\n        uint256 _tokenId,\\n        bool _hasSold\\n    ) external;\\n\\n    function setERC721ContractPrimarySaleFeePercentage(\\n        address _contractAddress,\\n        uint8 _percentage\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/royalty/creator/IERC721CreatorRoyalty.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\nimport \\\"../../token/ERC721/IERC721TokenCreator.sol\\\";\\n\\n/**\\n * @title IERC721CreatorRoyalty Token level royalty interface.\\n */\\ninterface IERC721CreatorRoyalty is IERC721TokenCreator {\\n    /**\\n     * @dev Get the royalty fee percentage for a specific ERC721 contract.\\n     * @param _contractAddress address ERC721Contract address.\\n     * @param _tokenId uint256 token ID.\\n     * @return uint8 wei royalty fee.\\n     */\\n    function getERC721TokenRoyaltyPercentage(\\n        address _contractAddress,\\n        uint256 _tokenId\\n    ) external view returns (uint8);\\n\\n    /**\\n     * @dev Utililty function to calculate the royalty fee for a token.\\n     * @param _contractAddress address ERC721Contract address.\\n     * @param _tokenId uint256 token ID.\\n     * @param _amount uint256 wei amount.\\n     * @return uint256 wei fee.\\n     */\\n    function calculateRoyaltyFee(\\n        address _contractAddress,\\n        uint256 _tokenId,\\n        uint256 _amount\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Utililty function to set the royalty percentage for a specific ERC721 contract.\\n     * @param _contractAddress address ERC721Contract address.\\n     * @param _percentage percentage for royalty\\n     */\\n    function setPercentageForSetERC721ContractRoyalty(\\n        address _contractAddress,\\n        uint8 _percentage\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/payments/IPayments.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\n/// @author koloz\\n/// @title IPayments\\n/// @notice Interface for the Payments contract used.\\ninterface IPayments {\\n    function refund(address _payee, uint256 _amount) external payable;\\n\\n    function payout(address[] calldata _splits, uint256[] calldata _amounts)\\n        external\\n        payable;\\n}\\n\"\r\n    },\r\n    \"contracts/registry/spaces/ISpaceOperatorRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\n/// @author koloz\\n/// @title ISpaceOperatorRegistry\\n/// @notice The interface for the SpaceOperatorRegistry\\ninterface ISpaceOperatorRegistry {\\n    function getPlatformCommission(address _operator)\\n        external\\n        view\\n        returns (uint8);\\n\\n    function setPlatformCommission(address _operator, uint8 _commission)\\n        external;\\n\\n    function isApprovedSpaceOperator(address _operator)\\n        external\\n        view\\n        returns (bool);\\n\\n    function setSpaceOperatorApproved(address _operator, bool _approved)\\n        external;\\n}\\n\"\r\n    },\r\n    \"contracts/registry/token/IApprovedTokenRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\ninterface IApprovedTokenRegistry {\\n    /// @notice Returns if a token has been approved or not.\\n    /// @param _tokenContract Contract of token being checked.\\n    /// @return True if the token is allowed, false otherwise.\\n    function isApprovedToken(address _tokenContract)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @notice Adds a token to the list of approved tokens.\\n    /// @param _tokenContract Contract of token being approved.\\n    function addApprovedToken(address _tokenContract) external;\\n\\n    /// @notice Removes a token from the approved tokens list.\\n    /// @param _tokenContract Contract of token being approved.\\n    function removeApprovedToken(address _tokenContract) external;\\n\\n    /// @notice Sets whether all token contracts should be approved.\\n    /// @param _allTokensApproved Bool denoting if all tokens should be approved.\\n    function setAllTokensApproved(bool _allTokensApproved) external;\\n}\\n\"\r\n    },\r\n    \"contracts/royalty/creator/IRoyaltyEngine.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\n/// @author: manifold.xyz\\n\\n/**\\n * @dev Lookup engine interface\\n */\\ninterface IRoyaltyEngineV1 {\\n    /**\\n     * Get the royalty for a given token (address, id) and value amount.  Does not cache the bps/amounts.  Caches the spec for a given token address\\n     *\\n     * @param tokenAddress - The address of the token\\n     * @param tokenId      - The id of the token\\n     * @param value        - The value you wish to get the royalty of\\n     *\\n     * returns Two arrays of equal length, royalty recipients and the corresponding amount each recipient should get\\n     */\\n    function getRoyalty(\\n        address tokenAddress,\\n        uint256 tokenId,\\n        uint256 value\\n    )\\n        external\\n        returns (address payable[] memory recipients, uint256[] memory amounts);\\n\\n    /**\\n     * View only version of getRoyalty\\n     *\\n     * @param tokenAddress - The address of the token\\n     * @param tokenId      - The id of the token\\n     * @param value        - The value you wish to get the royalty of\\n     *\\n     * returns Two arrays of equal length, royalty recipients and the corresponding amount each recipient should get\\n     */\\n    function getRoyaltyView(\\n        address tokenAddress,\\n        uint256 tokenId,\\n        uint256 value\\n    )\\n        external\\n        view\\n        returns (address payable[] memory recipients, uint256[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"contracts/token/ERC721/IERC721TokenCreator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\ninterface IERC721TokenCreator {\\n    function tokenCreator(address _contractAddress, uint256 _tokenId)\\n        external\\n        view\\n        returns (address payable);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_originContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_bidder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_currencyAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address payable[]\",\"name\":\"_splitAddresses\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"_splitRatios\",\"type\":\"uint8[]\"}],\"name\":\"AcceptOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_bidder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_currencyAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_startedAuction\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newAuctionLength\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_previousBidder\",\"type\":\"address\"}],\"name\":\"AuctionBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_currencyAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"AuctionSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_auctionCreator\",\"type\":\"address\"}],\"name\":\"CancelAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_originContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_bidder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_currencyAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"CancelOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_auctionCreator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_currencyAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_startingTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minimumBid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lengthOfAuction\",\"type\":\"uint256\"}],\"name\":\"NewAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_originContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_bidder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_currencyAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_convertible\",\"type\":\"bool\"}],\"name\":\"OfferPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_originContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_currencyAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address payable[]\",\"name\":\"_splitRecipients\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"_splitRatios\",\"type\":\"uint8[]\"}],\"name\":\"SetSalePrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_originContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_currencyAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Sold\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COLDIE_AUCTION\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NO_AUCTION\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SCHEDULED_AUCTION\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_originContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_currencyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable[]\",\"name\":\"_splitAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_splitRatios\",\"type\":\"uint8[]\"}],\"name\":\"acceptOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approvedTokenRegistry\",\"outputs\":[{\"internalType\":\"contract IApprovedTokenRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctionBids\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currencyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"marketplaceFee\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionLengthExtension\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_originContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_currencyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_originContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_currencyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_originContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_originContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_currencyAddress\",\"type\":\"address\"}],\"name\":\"cancelOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_auctionType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_originContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startingAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_currencyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lengthOfAuction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"address payable[]\",\"name\":\"_splitAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_splitRatios\",\"type\":\"uint8[]\"}],\"name\":\"configureAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_originContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_currencyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lengthOfAuction\",\"type\":\"uint256\"},{\"internalType\":\"address payable[]\",\"name\":\"_splitAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_splitRatios\",\"type\":\"uint8[]\"}],\"name\":\"convertOfferToAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_originContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getAuctionDetails\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_originContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"getSalePrice\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketplaceSettings\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_royaltyRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_royaltyEngine\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_superRareMarketplace\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_superRareAuctionHouse\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spaceOperatorRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_approvedTokenRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_payments\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_networkBeneficiary\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketplaceSettings\",\"outputs\":[{\"internalType\":\"contract IMarketplaceSettings\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAuctionLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumBidIncreasePercentage\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"networkBeneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_originContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_currencyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_convertible\",\"type\":\"bool\"}],\"name\":\"offer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offerCancelationDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payments\",\"outputs\":[{\"internalType\":\"contract IPayments\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_originContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"removeSalePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyEngine\",\"outputs\":[{\"internalType\":\"contract IRoyaltyEngineV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyRegistry\",\"outputs\":[{\"internalType\":\"contract IERC721CreatorRoyalty\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_approvedTokenRegistry\",\"type\":\"address\"}],\"name\":\"setApprovedTokenRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionLengthExtension\",\"type\":\"uint256\"}],\"name\":\"setAuctionLengthExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketplaceSettings\",\"type\":\"address\"}],\"name\":\"setMarketplaceSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_maxAuctionLength\",\"type\":\"uint8\"}],\"name\":\"setMaxAuctionLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_minimumBidIncreasePercentage\",\"type\":\"uint8\"}],\"name\":\"setMinimumBidIncreasePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_networkBeneficiary\",\"type\":\"address\"}],\"name\":\"setNetworkBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offerCancelationDelay\",\"type\":\"uint256\"}],\"name\":\"setOfferCancelationDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_payments\",\"type\":\"address\"}],\"name\":\"setPayments\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_royaltyEngine\",\"type\":\"address\"}],\"name\":\"setRoyaltyEngine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_royaltyRegistry\",\"type\":\"address\"}],\"name\":\"setRoyaltyRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_originContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_currencyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_listPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"address payable[]\",\"name\":\"_splitAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_splitRatios\",\"type\":\"uint8[]\"}],\"name\":\"setSalePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spaceOperatorRegistry\",\"type\":\"address\"}],\"name\":\"setSpaceOperatorRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingRegistry\",\"type\":\"address\"}],\"name\":\"setStakingRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_superRareAuctionHouse\",\"type\":\"address\"}],\"name\":\"setSuperRareAuctionHouse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_superRareMarketplace\",\"type\":\"address\"}],\"name\":\"setSuperRareMarketplace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_originContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"settleAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spaceOperatorRegistry\",\"outputs\":[{\"internalType\":\"contract ISpaceOperatorRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"superRareAuctionHouse\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"superRareMarketplace\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenAuctions\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"auctionCreator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"creationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lengthOfAuction\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currencyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minimumBid\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"auctionType\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenCurrentOffers\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"marketplaceFee\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"convertible\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenSalePrices\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currencyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SuperRareBazaar", "CompilerVersion": "v0.7.3+commit.9bfce1f6", "OptimizationUsed": "1", "Runs": "999", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "1", "Implementation": "0xdd867a8eb1720185b3fdad7f81caed4e8132be19", "SwarmSource": ""}