{"SourceCode": "pragma solidity 0.4.24;\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/ZTXInterface.sol\r\n\r\ncontract ZTXInterface {\r\n    function transferOwnership(address _newOwner) public;\r\n    function mint(address _to, uint256 amount) public returns (bool);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    function unpause() public;\r\n}\r\n\r\n// File: contracts/airdropper/AirDropperCore.sol\r\n\r\n/**\r\n * @title AirDropperCore\r\n * @author Gustavo Guimaraes - <gustavo@zulurepublic.io>\r\n * @dev Contract for the ZTX airdrop\r\n */\r\ncontract AirDropperCore is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => bool) public claimedAirdropTokens;\r\n\r\n    uint256 public numOfCitizensWhoReceivedDrops;\r\n    uint256 public tokenAmountPerUser;\r\n    uint256 public airdropReceiversLimit;\r\n\r\n    ZTXInterface public ztx;\r\n\r\n    event TokenDrop(address indexed receiver, uint256 amount);\r\n\r\n    /**\r\n     * @dev Constructor for the airdrop contract\r\n     * @param _airdropReceiversLimit Cap of airdrop receivers\r\n     * @param _tokenAmountPerUser Number of tokens done per user\r\n     * @param _ztx ZTX contract address\r\n     */\r\n    constructor(uint256 _airdropReceiversLimit, uint256 _tokenAmountPerUser, ZTXInterface _ztx) public {\r\n        require(\r\n            _airdropReceiversLimit != 0 &&\r\n            _tokenAmountPerUser != 0 &&\r\n            _ztx != address(0),\r\n            \"constructor params cannot be empty\"\r\n        );\r\n        airdropReceiversLimit = _airdropReceiversLimit;\r\n        tokenAmountPerUser = _tokenAmountPerUser;\r\n        ztx = ZTXInterface(_ztx);\r\n    }\r\n\r\n    function triggerAirDrops(address[] recipients)\r\n        external\r\n        onlyOwner\r\n    {\r\n        for (uint256 i = 0; i < recipients.length; i++) {\r\n            triggerAirDrop(recipients[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Distributes tokens to recipient addresses\r\n     * @param recipient address to receive airdropped token\r\n     */\r\n    function triggerAirDrop(address recipient)\r\n        public\r\n        onlyOwner\r\n    {\r\n        numOfCitizensWhoReceivedDrops = numOfCitizensWhoReceivedDrops.add(1);\r\n\r\n        require(\r\n            numOfCitizensWhoReceivedDrops <= airdropReceiversLimit &&\r\n            !claimedAirdropTokens[recipient],\r\n            \"Cannot give more tokens than airdropShare and cannot airdrop to an address that already receive tokens\"\r\n        );\r\n\r\n        claimedAirdropTokens[recipient] = true;\r\n\r\n        // eligible citizens for airdrop receive tokenAmountPerUser in ZTX\r\n        sendTokensToUser(recipient, tokenAmountPerUser);\r\n        emit TokenDrop(recipient, tokenAmountPerUser);\r\n    }\r\n\r\n    /**\r\n     * @dev Can be overridden to add sendTokensToUser logic. The overriding function\r\n     * should call super.sendTokensToUser() to ensure the chain is\r\n     * executed entirely.\r\n     * @param recipient Address to receive airdropped tokens\r\n     * @param tokenAmount Number of rokens to receive\r\n     */\r\n    function sendTokensToUser(address recipient, uint256 tokenAmount) internal {\r\n    }\r\n}\r\n\r\n// File: contracts/airdropper/MintableAirDropper.sol\r\n\r\n/**\r\n * @title MintableAirDropper\r\n * @author Gustavo Guimaraes - <gustavo@zulurepublic.io>\r\n * @dev Airdrop contract that mints ZTX tokens\r\n */\r\ncontract MintableAirDropper is AirDropperCore {\r\n    /**\r\n     * @dev Constructor for the airdrop contract.\r\n     * NOTE: airdrop must be the token owner in order to mint ZTX tokens\r\n     * @param _airdropReceiversLimit Cap of airdrop receivers\r\n     * @param _tokenAmountPerUser Number of tokens done per user\r\n     * @param _ztx ZTX contract address\r\n     */\r\n    constructor\r\n        (\r\n            uint256 _airdropReceiversLimit,\r\n            uint256 _tokenAmountPerUser,\r\n            ZTXInterface _ztx\r\n        )\r\n        public\r\n        AirDropperCore(_airdropReceiversLimit, _tokenAmountPerUser, _ztx)\r\n    {}\r\n\r\n    /**\r\n     * @dev override sendTokensToUser logic\r\n     * @param recipient Address to receive airdropped tokens\r\n     * @param tokenAmount Number of rokens to receive\r\n     */\r\n    function sendTokensToUser(address recipient, uint256 tokenAmount) internal {\r\n        ztx.mint(recipient, tokenAmount);\r\n        super.sendTokensToUser(recipient, tokenAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Self-destructs contract\r\n     */\r\n    function kill(address newZuluOwner) external onlyOwner {\r\n        require(\r\n            numOfCitizensWhoReceivedDrops >= airdropReceiversLimit,\r\n            \"only able to kill contract when numOfCitizensWhoReceivedDrops equals or is higher than airdropReceiversLimit\"\r\n        );\r\n\r\n        ztx.unpause();\r\n        ztx.transferOwnership(newZuluOwner);\r\n        selfdestruct(owner);\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedAirdropTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipients\",\"type\":\"address[]\"}],\"name\":\"triggerAirDrops\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAmountPerUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ztx\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airdropReceiversLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newZuluOwner\",\"type\":\"address\"}],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"triggerAirDrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numOfCitizensWhoReceivedDrops\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_airdropReceiversLimit\",\"type\":\"uint256\"},{\"name\":\"_tokenAmountPerUser\",\"type\":\"uint256\"},{\"name\":\"_ztx\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenDrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]", "ContractName": "MintableAirDropper", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000001b1ae4d6e2ef500000000000000000000000000000e8f9fa977ea585591d9f394681318c16552577fb", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://2577ca22facd13d4acd9a0b1372dad900c4e6723c7447f224b35badccb307022"}