{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/OKPC.sol\": {\r\n      \"content\": \"/*\\n  \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n  \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2591\u2591                                                            \u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591          \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588          \u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591        \u2588\u2588          \u2588\u2588\u2588               \u2588\u2588          \u2588\u2588\u2588       \u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591     \u2588\u2588\u2588               \u2588\u2588          \u2588\u2588\u2588               \u2588\u2588     \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2591\u2591     \u2588\u2588\u2588     \u2588\u2588\u2588\u2588\u2588     \u2588\u2588          \u2588\u2588\u2588     \u2588\u2588\u2588\u2588\u2588     \u2588\u2588     \u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591     \u2588\u2588\u2588       \u2588\u2588\u2588     \u2588\u2588   \u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588       \u2588\u2588\u2588     \u2588\u2588     \u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591     \u2588\u2588\u2588     \u2588\u2588\u2588\u2588\u2588     \u2588\u2588          \u2588\u2588\u2588     \u2588\u2588\u2588\u2588\u2588     \u2588\u2588     \u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591     \u2588\u2588\u2588     \u2588\u2588\u2588\u2588\u2588     \u2588\u2588   \u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588     \u2588\u2588\u2588\u2588\u2588     \u2588\u2588     \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2591\u2591        \u2588\u2588          \u2588\u2588\u2588               \u2588\u2588          \u2588\u2588\u2588       \u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591          \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588        \u2588\u2588\u2588\u2588\u2588       \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588          \u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591                                                            \u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591     \u2588\u2588\u2588\u2588\u2588                                        \u2588\u2588\u2588\u2588\u2588     \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2591\u2591     \u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588     \u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591             \u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588     \u2588\u2588   \u2588\u2588\u2588\u2588\u2588            \u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591                                                            \u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591                                                            \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n  \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2591\u2591\\n  \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\\n\\n\\n                       scotato.eth, shahruz.eth, cjpais.eth\\n\\n*/\\n\\n// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.8;\\n\\nimport {IOKPC} from './interfaces/IOKPC.sol';\\nimport {ERC721A} from 'erc721a/contracts/ERC721A.sol';\\nimport {Ownable} from '@openzeppelin/contracts/access/Ownable.sol';\\nimport {ReentrancyGuard} from '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport {SSTORE2} from '@0xsequence/sstore2/contracts/SSTORE2.sol';\\nimport {MerkleProof} from '@openzeppelin/contracts/utils/cryptography/MerkleProof.sol';\\nimport {IERC2981} from '@openzeppelin/contracts/interfaces/IERC2981.sol';\\nimport {IOKPCMetadata} from './interfaces/IOKPCMetadata.sol';\\n\\ncontract OKPC is IOKPC, ERC721A, IERC2981, Ownable, ReentrancyGuard {\\n  /* --------------------------------- ****** --------------------------------- */\\n\\n  /* -------------------------------------------------------------------------- */\\n  /*                                   CONFIG                                   */\\n  /* -------------------------------------------------------------------------- */\\n  /* --------------------------------- MINTING -------------------------------- */\\n  uint256 public immutable MAX_SUPPLY;\\n  uint16 private immutable ARTISTS_RESERVED;\\n  uint16 private immutable TEAM_RESERVED;\\n  uint16 private immutable MAX_PER_PHASE;\\n  uint256 public immutable MINT_COST;\\n  /* --------------------------------- GALLERY -------------------------------- */\\n  uint8 private constant MAX_ART_PER_ARTIST = 8;\\n  uint8 private constant MIN_GALLERY_ART = 128;\\n  uint16 public constant MAX_COLLECT_PER_ART = 512;\\n  uint256 public constant ART_COLLECT_COST = 0.02 ether;\\n  /* -------------------------------- ROYALTIES ------------------------------- */\\n  uint256 private constant ROYALTY = 640;\\n  /* ------------------------------- CLOCK SPEED ------------------------------ */\\n  uint256 public clockSpeedMaxMultiplier = 24;\\n\\n  /* --------------------------------- ****** --------------------------------- */\\n\\n  /* -------------------------------------------------------------------------- */\\n  /*                                   STORAGE                                  */\\n  /* -------------------------------------------------------------------------- */\\n  /* --------------------------------- MINTING -------------------------------- */\\n  Phase public mintingPhase;\\n  mapping(address => bool) public earlyBirdsMintClaimed;\\n  mapping(address => bool) public friendsMintClaimed;\\n  bytes32 private _artistsMerkleRoot;\\n  bytes32 private _earlyBirdsMerkleRoot;\\n  bytes32 private _friendsMerkleRoot;\\n  /* --------------------------------- GALLERY -------------------------------- */\\n  bool public galleryOpen;\\n  uint256 public galleryArtCounter;\\n  uint256 private maxGalleryArt = 512;\\n  mapping(uint256 => uint256) public galleryArtCollectedCount;\\n  mapping(uint256 => address) private _galleryArtData;\\n  mapping(address => uint256) public galleryArtistArtCount;\\n  mapping(uint256 => uint256) public activeArtForOKPC;\\n  mapping(uint256 => mapping(uint256 => bool)) public artCollectedByOKPC;\\n  mapping(uint256 => uint256) public artCountForOKPC;\\n  mapping(bytes32 => bool) private _galleryArtHashes;\\n  /* ---------------------------------- PAINT --------------------------------- */\\n  bool public paintOpen;\\n  mapping(uint256 => Art) public paintArtForOKPC;\\n  mapping(uint256 => Commission) public openCommissionForOKPC;\\n  mapping(address => bool) public denyList;\\n  /* -------------------------------- RENDERER -------------------------------- */\\n  address public metadataAddress;\\n  mapping(uint256 => bool) public useOffchainMetadata;\\n  /* -------------------------------- PAYMENTS -------------------------------- */\\n  uint256 public paymentBalanceOwner;\\n  mapping(address => uint256) public paymentBalanceArtist;\\n  /* ------------------------------- CLOCK SPEED ------------------------------ */\\n  mapping(uint256 => ClockSpeedXP) public clockSpeedData;\\n  /* ------------------------------- EXPANSIONS ------------------------------- */\\n  address public messagingAddress;\\n  address public communityAddress;\\n  address public marketplaceAddress;\\n\\n  /* --------------------------------- ****** --------------------------------- */\\n\\n  /* -------------------------------------------------------------------------- */\\n  /*                                   EVENTS                                   */\\n  /* -------------------------------------------------------------------------- */\\n  event hello();\\n  /* --------------------------------- MINTING -------------------------------- */\\n  event MintingPhaseStarted(Phase phase);\\n  /* --------------------------------- GALLERY -------------------------------- */\\n  event ArtChanged(uint256 pcId, uint256 artId);\\n  event GalleryOpenUpdated(bool open);\\n  event GalleryArtCreated(uint256 indexed artId, address artist);\\n  event GalleryArtCollected(uint256 pcId, uint256 artId);\\n  event GalleryArtSwapped(uint256 pcId1, uint256 pcId2);\\n  event GalleryArtTransferred(\\n    uint256 fromOKPCId,\\n    uint256 toOKPCId,\\n    uint256 artId\\n  );\\n  event GalleryMaxArtUpdated(uint256 maxGalleryArt);\\n  /* ---------------------------------- PAINT --------------------------------- */\\n  event PaintOpenUpdated(bool open);\\n  event PaintArtCreated(uint256 indexed pcId, address artist);\\n  event CommissionCreated(uint256 pcId, address artist, uint256 amount);\\n  event CommissionCompleted(uint256 pcId, address artist, uint256 amount);\\n  event CommissionCancelled(uint256 pcId);\\n  /* -------------------------------- RENDERER -------------------------------- */\\n  event MetadataAddressUpdated(address addr);\\n  /* -------------------------------- PAYMENTS -------------------------------- */\\n  event PaymentWithdrawnOwner(uint256 amount);\\n  event PaymentWithdrawnArtist(address artist, uint256 amount);\\n  event PaymentReceivedArtist(address artist, uint256 amount);\\n  event PaymentReceivedOwner(uint256 amount);\\n  /* ------------------------------- CLOCK SPEED ------------------------------ */\\n  event ClockSpeedMaxMultiplierUpdated(uint256 maxMultiplier);\\n  /* ------------------------------- EXPANSIONS ------------------------------- */\\n  event MessagingAddressUpdated(address messagingAddress);\\n  event CommunityAddressUpdated(address communityAddress);\\n  event MarketplaceAddressUpdated(address marketplaceAddress);\\n\\n  /* --------------------------------- ****** --------------------------------- */\\n\\n  /* -------------------------------------------------------------------------- */\\n  /*                                   ERRORS                                   */\\n  /* -------------------------------------------------------------------------- */\\n  error NotOKPCOwner();\\n  error OKPCNotFound();\\n  error MerkleProofInvalid();\\n  error InvalidAddress();\\n  /* --------------------------------- MINTING -------------------------------- */\\n  error MintPhaseNotOpen();\\n  error MintTooManyOKPCs();\\n  error MintAlreadyClaimed();\\n  error MintMaxReached();\\n  error MintNotAuthorized();\\n  /* --------------------------------- GALLERY -------------------------------- */\\n  error GalleryNotOpen();\\n  error GalleryMinArtNotReached();\\n  error GalleryMaxArtReached();\\n  error GalleryArtNotFound();\\n  error GalleryArtAlreadyCollected();\\n  error GalleryArtNotCollected();\\n  error GalleryArtCollectedMaximumTimes();\\n  error GalleryArtCannotBeActive();\\n  error GalleryArtDuplicate();\\n  error GalleryArtLastCollected();\\n  /* ---------------------------------- PAINT --------------------------------- */\\n  error PaintArtDataInvalid();\\n  error PaintArtNotFound();\\n  error PaintNotOpen();\\n  error PaintDenyList();\\n  error PaintCommissionInvalid();\\n  error PaintNotCommissionedArtist();\\n  /* -------------------------------- PAYMENTS -------------------------------- */\\n  error PaymentAmountInvalid();\\n  error PaymentBalanceZero();\\n  error PaymentTransferFailed();\\n  /* ------------------------------- EXPANSIONS ------------------------------- */\\n  error NotCommunityAddress();\\n  error NotMarketplaceAddress();\\n  error NotOwnerOrCommunity();\\n\\n  /* --------------------------------- ****** --------------------------------- */\\n\\n  /* -------------------------------------------------------------------------- */\\n  /*                                  MODIFIERS                                 */\\n  /* -------------------------------------------------------------------------- */\\n  /// @notice Requires the caller to be the owner of the specified pcId.\\n  modifier onlyOwnerOf(uint256 pcId) {\\n    if (msg.sender != ownerOf(pcId)) revert NotOKPCOwner();\\n    _;\\n  }\\n  /* --------------------------------- MINTING -------------------------------- */\\n  /// @notice Requires the current total OKPC supply to be less than the max supply for the current phase.\\n  modifier onlyIfSupplyMintable() {\\n    if (\\n      _currentIndex >\\n      ARTISTS_RESERVED + TEAM_RESERVED + (uint256(mintingPhase) * MAX_PER_PHASE)\\n    ) revert MintMaxReached();\\n    _;\\n  }\\n  /// @notice Requires the specified minting phase be active.\\n  modifier onlyIfMintingPhaseIsSetTo(Phase phase) {\\n    if (mintingPhase != phase) revert MintPhaseNotOpen();\\n    _;\\n  }\\n  /// @notice Requires the specified minting phase be active or have been active before\\n  modifier onlyIfMintingPhaseIsSetToOrAfter(Phase minimumPhase) {\\n    if (mintingPhase < minimumPhase) revert MintPhaseNotOpen();\\n    _;\\n  }\\n  /// @notice Requires the a valid merkle proof for the specified merkle root.\\n  modifier onlyIfValidMerkleProof(bytes32 root, bytes32[] calldata proof) {\\n    if (\\n      !MerkleProof.verify(proof, root, keccak256(abi.encodePacked(msg.sender)))\\n    ) revert MerkleProofInvalid();\\n    _;\\n  }\\n  /// @notice Requires no earlier claims for the caller in the Early Birds mint.\\n  modifier onlyIfNotAlreadyClaimedEarlyBirds() {\\n    if (earlyBirdsMintClaimed[msg.sender]) revert MintAlreadyClaimed();\\n    _;\\n  }\\n  /// @notice Requires no earlier claims for the caller in the Friends mint.\\n  modifier onlyIfNotAlreadyClaimedFriends() {\\n    if (friendsMintClaimed[msg.sender]) revert MintAlreadyClaimed();\\n    _;\\n  }\\n  /* --------------------------------- GALLERY -------------------------------- */\\n  /// @notice Requires Gallery to be open.\\n  modifier onlyIfGalleryOpen() {\\n    if (!galleryOpen) revert GalleryNotOpen();\\n    _;\\n  }\\n  /// @notice Requires the artId corresponds to existing Gallery art.\\n  modifier onlyIfGalleryArtExists(uint256 artId) {\\n    if (artId > galleryArtCounter || artId == 0) revert GalleryArtNotFound();\\n    _;\\n  }\\n  /// @notice Requires the pcId to have artId in its collection already\\n  modifier onlyIfOKPCHasCollectedGalleryArt(uint256 pcId, uint256 artId) {\\n    if (!artCollectedByOKPC[pcId][artId]) revert GalleryArtNotCollected();\\n    _;\\n  }\\n  /// @notice Requires the minimum amount of Gallery art to be uploaded already.\\n  modifier onlyAfterMinimumGalleryArtUploaded() {\\n    if (galleryArtCounter < MIN_GALLERY_ART) revert GalleryMinArtNotReached();\\n    _;\\n  }\\n  /* ---------------------------------- PAINT --------------------------------- */\\n  /// @notice Requires Paint to be open.\\n  modifier onlyIfPaintOpen() {\\n    if (!paintOpen) revert PaintNotOpen();\\n    _;\\n  }\\n  /* -------------------------------- PAYMENTS -------------------------------- */\\n  /// @notice Requires msg.value be exactly the specified amount.\\n  modifier onlyIfPaymentAmountValid(uint256 value) {\\n    if (msg.value != value) revert PaymentAmountInvalid();\\n    _;\\n  }\\n  /* ------------------------------- EXPANSIONS ------------------------------- */\\n  /// @notice Requires the caller be the owner or community address.\\n  modifier onlyOwnerOrCommunity() {\\n    if (msg.sender != communityAddress && msg.sender != owner())\\n      revert NotOwnerOrCommunity();\\n    _;\\n  }\\n  /// @notice Requires the caller be the community address.\\n  modifier onlyCommunity() {\\n    if (msg.sender != communityAddress) revert NotCommunityAddress();\\n    _;\\n  }\\n  /// @notice Requires the caller be the marketplace address.\\n  modifier onlyMarketplace() {\\n    if (msg.sender != marketplaceAddress) revert NotMarketplaceAddress();\\n    _;\\n  }\\n\\n  /* --------------------------------- ****** --------------------------------- */\\n\\n  /* -------------------------------------------------------------------------- */\\n  /*                               INITIALIZATION                               */\\n  /* -------------------------------------------------------------------------- */\\n  constructor(\\n    uint16 artistsReserved,\\n    uint16 teamReserved,\\n    uint16 maxPerPhase,\\n    uint256 mintCost\\n  ) ERC721A('OKPC', 'OKPC') {\\n    ARTISTS_RESERVED = artistsReserved;\\n    TEAM_RESERVED = teamReserved;\\n    MAX_PER_PHASE = maxPerPhase;\\n    MAX_SUPPLY = ARTISTS_RESERVED + TEAM_RESERVED + (MAX_PER_PHASE * 3);\\n    MINT_COST = mintCost;\\n\\n    emit hello();\\n  }\\n\\n  /* ---------------------------------- ADMIN --------------------------------- */\\n  /// @notice Allows owner to set a merkle root for Artists.\\n  /// @param newRoot The new merkle root to set.\\n  function setArtistsMerkleRoot(bytes32 newRoot) external onlyOwner {\\n    _artistsMerkleRoot = newRoot;\\n  }\\n\\n  /// @notice Allows owner to set a merkle root for Early Birds.\\n  /// @param newRoot The new merkle root to set.\\n  function setEarlyBirdsMerkleRoot(bytes32 newRoot) external onlyOwner {\\n    _earlyBirdsMerkleRoot = newRoot;\\n  }\\n\\n  /// @notice Allows owner to set a merkle root for Friends.\\n  /// @param newRoot The new merkle root to set.\\n  function setFriendsMerkleRoot(bytes32 newRoot) external onlyOwner {\\n    _friendsMerkleRoot = newRoot;\\n  }\\n\\n  /// @notice Allows the owner to upload initial Gallery art before minting opens.\\n  /// @param data The data of the art to be uploaded for 128 art pieces\\n  function addInitialGalleryArt(bytes calldata data) external onlyOwner {\\n    if (galleryArtCounter > 0) revert GalleryMaxArtReached();\\n    if (data.length != uint256(MIN_GALLERY_ART) * 128)\\n      revert PaintArtDataInvalid();\\n\\n    for (uint256 i; i < MIN_GALLERY_ART; i++) {\\n      uint256 artId = i + 1;\\n\\n      (address artist, uint256 data1, uint256 data2, bytes16 title) = abi\\n        .decode(\\n          data[i * MIN_GALLERY_ART:artId * MIN_GALLERY_ART],\\n          (address, uint256, uint256, bytes16)\\n        );\\n\\n      if (title[0] == bytes1(0x0)) revert PaintArtDataInvalid();\\n      if (_galleryArtHashes[keccak256(abi.encodePacked(data1, data2))])\\n        revert GalleryArtDuplicate();\\n      if (galleryArtistArtCount[artist] == MAX_ART_PER_ARTIST)\\n        revert GalleryMaxArtReached();\\n\\n      unchecked {\\n        galleryArtistArtCount[artist]++;\\n      }\\n      _galleryArtHashes[keccak256(abi.encodePacked(data1, data2))] = true;\\n\\n      emit GalleryArtCreated(artId, artist);\\n    }\\n\\n    _galleryArtData[0] = SSTORE2.write(data);\\n    galleryArtCounter = MIN_GALLERY_ART;\\n  }\\n\\n  /* --------------------------------- ****** --------------------------------- */\\n\\n  /* -------------------------------------------------------------------------- */\\n  /*                                   MINTING                                  */\\n  /* -------------------------------------------------------------------------- */\\n  /* ---------------------------------- ADMIN --------------------------------- */\\n  /// @notice Allows owner to mint 64 OKPCs to a list of 64 artist addresses.\\n  /// @param addr An array of 64 artist addresses.\\n  function mintArtists(address[64] calldata addr)\\n    external\\n    onlyOwner\\n    onlyAfterMinimumGalleryArtUploaded\\n    nonReentrant\\n  {\\n    if (_currentIndex > ARTISTS_RESERVED) revert MintMaxReached();\\n    for (uint16 i; i < 64; i++) {\\n      _collectIncludedGalleryArt(_currentIndex);\\n      _safeMint(addr[i], 1);\\n    }\\n  }\\n\\n  /// @notice Allows owner to mint 64 OKPCs to a list of 4 team addresses.\\n  /// @param addr An array of 4 team addresses.\\n  function mintTeam(address[4] calldata addr)\\n    external\\n    onlyOwner\\n    onlyAfterMinimumGalleryArtUploaded\\n    nonReentrant\\n  {\\n    if (_currentIndex < ARTISTS_RESERVED) revert MintPhaseNotOpen();\\n    if (_currentIndex > ARTISTS_RESERVED + TEAM_RESERVED)\\n      revert MintMaxReached();\\n    for (uint16 i; i < 64; i++) {\\n      _collectIncludedGalleryArt(_currentIndex);\\n      _safeMint(addr[i % 4], 1);\\n    }\\n  }\\n\\n  /* ------------------------------- EARLY BIRDS ------------------------------ */\\n  /// @notice Allows the owner to start the Early Birds minting phase.\\n  function startEarlyBirdsMint()\\n    external\\n    onlyOwner\\n    onlyAfterMinimumGalleryArtUploaded\\n    onlyIfMintingPhaseIsSetTo(Phase.INIT)\\n  {\\n    if (_currentIndex <= 512) revert MintPhaseNotOpen();\\n    mintingPhase = Phase.EARLY_BIRDS;\\n    emit MintingPhaseStarted(mintingPhase);\\n  }\\n\\n  /// @notice Mint your OKPC if you're on the Early Birds list.\\n  /// @param merkleProof A Merkle proof of the caller's address in the Early Birds list.\\n  function mintEarlyBirds(bytes32[] calldata merkleProof)\\n    external\\n    payable\\n    onlyIfMintingPhaseIsSetToOrAfter(Phase.EARLY_BIRDS)\\n    onlyIfValidMerkleProof(_earlyBirdsMerkleRoot, merkleProof)\\n    onlyIfPaymentAmountValid(MINT_COST)\\n    onlyIfNotAlreadyClaimedEarlyBirds\\n    onlyIfSupplyMintable\\n    nonReentrant\\n  {\\n    earlyBirdsMintClaimed[msg.sender] = true;\\n\\n    _collectIncludedGalleryArt(_currentIndex);\\n\\n    addToOwnerBalance(MINT_COST - ART_COLLECT_COST);\\n    addToArtistBalance(\\n      getGalleryArt(_includedGalleryArtForOKPC(_currentIndex)).artist,\\n      ART_COLLECT_COST\\n    );\\n\\n    _safeMint(msg.sender, 1);\\n  }\\n\\n  /* --------------------------------- FRIENDS -------------------------------- */\\n  /// @notice Allows the owner to start the Friends minting phase.\\n  function startFriendsMint()\\n    external\\n    onlyOwner\\n    onlyIfMintingPhaseIsSetTo(Phase.EARLY_BIRDS)\\n  {\\n    mintingPhase = Phase.FRIENDS;\\n    emit MintingPhaseStarted(mintingPhase);\\n  }\\n\\n  /// @notice Mint your OKPC if you're on the Friends list.\\n  /// @param merkleProof A Merkle proof of the caller's address in the Friends list.\\n  function mintFriends(bytes32[] calldata merkleProof)\\n    external\\n    payable\\n    onlyIfMintingPhaseIsSetToOrAfter(Phase.FRIENDS)\\n    onlyIfValidMerkleProof(_friendsMerkleRoot, merkleProof)\\n    onlyIfPaymentAmountValid(MINT_COST)\\n    onlyIfSupplyMintable\\n    onlyIfNotAlreadyClaimedFriends\\n    nonReentrant\\n  {\\n    friendsMintClaimed[msg.sender] = true;\\n\\n    _collectIncludedGalleryArt(_currentIndex);\\n\\n    addToOwnerBalance(MINT_COST - ART_COLLECT_COST);\\n    addToArtistBalance(\\n      getGalleryArt(_includedGalleryArtForOKPC(_currentIndex)).artist,\\n      ART_COLLECT_COST\\n    );\\n\\n    _safeMint(msg.sender, 1);\\n  }\\n\\n  /* --------------------------------- PUBLIC --------------------------------- */\\n  /// @notice Allows the owner to start the Public minting phase.\\n  function startPublicMint()\\n    external\\n    onlyOwner\\n    onlyIfMintingPhaseIsSetTo(Phase.FRIENDS)\\n  {\\n    mintingPhase = Phase.PUBLIC;\\n    emit MintingPhaseStarted(mintingPhase);\\n  }\\n\\n  /// @notice Mint your OKPC.\\n  /// @param amount The number of OKPCs to mint. Accepts values between 1 and 8.\\n  function mint(uint256 amount)\\n    external\\n    payable\\n    onlyIfMintingPhaseIsSetTo(Phase.PUBLIC)\\n    onlyIfSupplyMintable\\n    onlyIfPaymentAmountValid(MINT_COST * amount)\\n    nonReentrant\\n  {\\n    if (amount > 8) revert MintTooManyOKPCs();\\n    if (tx.origin != msg.sender) revert MintNotAuthorized();\\n\\n    addToOwnerBalance(amount * (MINT_COST - ART_COLLECT_COST));\\n\\n    for (uint256 i; i < amount; i++) {\\n      _collectIncludedGalleryArt(_currentIndex + i);\\n      addToArtistBalance(\\n        getGalleryArt(_includedGalleryArtForOKPC(_currentIndex + i)).artist,\\n        ART_COLLECT_COST\\n      );\\n    }\\n\\n    _safeMint(msg.sender, amount);\\n  }\\n\\n  /* --------------------------------- ****** --------------------------------- */\\n\\n  /* -------------------------------------------------------------------------- */\\n  /*                                   GALLERY                                  */\\n  /* -------------------------------------------------------------------------- */\\n  /* --------------------------------- PUBLIC --------------------------------- */\\n  /// @notice Returns data for the specified Gallery art.\\n  /// @param artId The artId to look for in the Gallery.\\n  function getGalleryArt(uint256 artId)\\n    public\\n    view\\n    onlyIfGalleryArtExists(artId)\\n    returns (Art memory)\\n  {\\n    if (artId <= MIN_GALLERY_ART) {\\n      uint256 artBucket = (artId - 1) / MIN_GALLERY_ART;\\n      uint256 artBucketOffset = (artId - 1) % MIN_GALLERY_ART;\\n      (address addr, uint256 data1, uint256 data2, bytes16 title) = abi.decode(\\n        SSTORE2.read(\\n          _galleryArtData[artBucket],\\n          artBucketOffset * 128,\\n          (artBucketOffset + 1) * 128\\n        ),\\n        (address, uint256, uint256, bytes16)\\n      );\\n      return Art(addr, title, data1, data2);\\n    } else {\\n      (address addr, uint256 data1, uint256 data2, bytes16 title) = abi.decode(\\n        SSTORE2.read(_galleryArtData[artId]),\\n        (address, uint256, uint256, bytes16)\\n      );\\n      return Art(addr, title, data1, data2);\\n    }\\n  }\\n\\n  /* ------------------------------- OKPC OWNERS ------------------------------ */\\n  /// @notice Collect artwork from the Gallery on your OKPC.\\n  /// @param pcId The id of the OKPC to collect the gallery to.\\n  /// @param artId The id of the artwork you'd like to collect.\\n  /// @param makeActive Set to true to switch your OKPC to displaying this art.\\n  function collectArt(\\n    uint256 pcId,\\n    uint256 artId,\\n    bool makeActive\\n  )\\n    external\\n    payable\\n    onlyIfGalleryOpen\\n    onlyOwnerOf(pcId)\\n    onlyIfGalleryArtExists(artId)\\n  {\\n    address artist = getGalleryArt(artId).artist;\\n    if (msg.sender != artist && msg.value != ART_COLLECT_COST)\\n      revert PaymentAmountInvalid();\\n    else if (msg.sender == artist && msg.value > 0)\\n      revert PaymentAmountInvalid();\\n\\n    if (msg.value > 0) addToArtistBalance(artist, msg.value);\\n\\n    _collectGalleryArt(pcId, artId);\\n\\n    if (makeActive) setGalleryArt(pcId, artId);\\n  }\\n\\n  /// @notice Collect multiple Gallery artworks on your OKPC.\\n  /// @param pcId The id of the OKPC to collect to. You need to own the OKPC.\\n  /// @param artIds An array of ids for the art you'd like to collect.\\n  function collectArt(uint256 pcId, uint256[] calldata artIds)\\n    external\\n    payable\\n    onlyIfGalleryOpen\\n    onlyOwnerOf(pcId)\\n  {\\n    if (msg.value != ART_COLLECT_COST * artIds.length)\\n      revert PaymentAmountInvalid();\\n\\n    for (uint256 i; i < artIds.length; i++) {\\n      if (artIds[i] > galleryArtCounter || artIds[i] == 0)\\n        revert GalleryArtNotFound();\\n\\n      addToArtistBalance(getGalleryArt(artIds[i]).artist, ART_COLLECT_COST);\\n\\n      _collectGalleryArt(pcId, artIds[i]);\\n    }\\n  }\\n\\n  /// @notice Switch the active Gallery art on your OKPC.\\n  /// @param pcId The id of the OKPC to collect to. You need to own the OKPC.\\n  /// @param artId A id of the art you'd like to display. If your OKPC has custom art, you can display it by setting this to 0.\\n  function setGalleryArt(uint256 pcId, uint256 artId)\\n    public\\n    onlyOwnerOf(pcId)\\n    onlyIfOKPCHasCollectedGalleryArt(pcId, artId)\\n  {\\n    activeArtForOKPC[pcId] = artId;\\n    clockSpeedData[pcId].artLastChanged = block.timestamp;\\n    emit ArtChanged(pcId, artId);\\n  }\\n\\n  /* --------------------------------- ARTISTS -------------------------------- */\\n  /// @notice Post new Gallery artwork if you're an OKPC artist.\\n  /// @param title The title of the artwork.\\n  /// @param data1 The first part of the art data to be stored.\\n  /// @param data1 The second part of the art data to be stored.\\n  /// @param merkleProof A Merkle proof of the caller's address in the Artists list.\\n  function addGalleryArt(\\n    bytes16 title,\\n    uint256 data1,\\n    uint256 data2,\\n    bytes32[] calldata merkleProof\\n  ) external onlyIfValidMerkleProof(_artistsMerkleRoot, merkleProof) {\\n    if (denyList[msg.sender]) revert PaintDenyList();\\n    if (galleryArtCounter == maxGalleryArt) revert GalleryMaxArtReached();\\n    if (title[0] == bytes1(0x0)) revert PaintArtDataInvalid();\\n    if (_galleryArtHashes[keccak256(abi.encodePacked(data1, data2))])\\n      revert GalleryArtDuplicate();\\n    if (galleryArtistArtCount[msg.sender] == MAX_ART_PER_ARTIST)\\n      revert GalleryMaxArtReached();\\n\\n    unchecked {\\n      galleryArtistArtCount[msg.sender]++;\\n      galleryArtCounter++;\\n    }\\n    _galleryArtHashes[keccak256(abi.encodePacked(data1, data2))] = true;\\n\\n    _galleryArtData[galleryArtCounter] = SSTORE2.write(\\n      abi.encode(msg.sender, data1, data2, title)\\n    );\\n\\n    emit GalleryArtCreated(galleryArtCounter, msg.sender);\\n  }\\n\\n  /* ---------------------------------- ADMIN --------------------------------- */\\n  /// @notice Toggles the Gallery interactions on or off.\\n  function toggleGalleryOpen() external onlyOwner {\\n    galleryOpen = !galleryOpen;\\n    emit GalleryOpenUpdated(galleryOpen);\\n  }\\n\\n  /// @notice Allows the owner to increase the size of the Gallery.\\n  /// @param newMaxGalleryArt The new maximum number of Gallery artworks. Must be greater than the previous amount.\\n  function increaseMaxGalleryArt(uint256 newMaxGalleryArt) external onlyOwner {\\n    if (maxGalleryArt >= newMaxGalleryArt) revert GalleryMaxArtReached();\\n    maxGalleryArt = newMaxGalleryArt;\\n    emit GalleryMaxArtUpdated(maxGalleryArt);\\n  }\\n\\n  /// @notice Allows the owner or community to moderate Gallery artwork.\\n  /// @param artId The id of the Gallery artwork to moderate.\\n  /// @param title The title for the replacement art.\\n  /// @param data1 The first part of the art data to be stored.\\n  /// @param data2 The second part of the art data to be stored.\\n  /// @param artist The address of the artist of the replacement art.\\n  function moderateGalleryArt(\\n    uint256 artId,\\n    bytes16 title,\\n    uint256 data1,\\n    uint256 data2,\\n    address artist\\n  ) external onlyOwnerOrCommunity {\\n    if (artId <= 128) revert PaintArtDataInvalid();\\n    if (title[0] == bytes1(0x0)) revert PaintArtDataInvalid();\\n\\n    Art memory art = getGalleryArt(artId);\\n    galleryArtistArtCount[art.artist]--;\\n\\n    unchecked {\\n      galleryArtistArtCount[artist]++;\\n    }\\n\\n    _galleryArtData[artId] = SSTORE2.write(\\n      abi.encode(artist, data1, data2, title)\\n    );\\n\\n    emit GalleryArtCreated(galleryArtCounter, msg.sender);\\n  }\\n\\n  /* -------------------------------- INTERNAL -------------------------------- */\\n  /// @notice Collects Gallery artwork to your OKPC.\\n  /// @param pcId The id of the OKPC to collect to.\\n  /// @param artId The id of the Gallery art you'd like to collect.\\n  function _collectGalleryArt(uint256 pcId, uint256 artId) internal {\\n    if (artCollectedByOKPC[pcId][artId]) revert GalleryArtAlreadyCollected();\\n    if (galleryArtCollectedCount[artId] == MAX_COLLECT_PER_ART)\\n      revert GalleryArtCollectedMaximumTimes();\\n\\n    artCollectedByOKPC[pcId][artId] = true;\\n\\n    unchecked {\\n      artCountForOKPC[pcId]++;\\n      galleryArtCollectedCount[artId]++;\\n    }\\n\\n    emit GalleryArtCollected(pcId, artId);\\n  }\\n\\n  /// @notice Determines the included Gallery artwork for an OKPC.\\n  /// @param pcId The id of the OKPC being minted.\\n  function _includedGalleryArtForOKPC(uint256 pcId)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    return\\n      pcId <= 128\\n        ? pcId\\n        : (uint256(\\n          keccak256(\\n            abi.encodePacked(\\n              'OKPC',\\n              pcId,\\n              blockhash(block.number - 1),\\n              block.coinbase,\\n              block.difficulty,\\n              msg.sender\\n            )\\n          )\\n        ) % galleryArtCounter) + 1;\\n  }\\n\\n  /// @notice Collects the included Gallery artwork for an OKPC.\\n  /// @param pcId The id of the OKPC being minted.\\n  function _collectIncludedGalleryArt(uint256 pcId) internal {\\n    uint256 artId = _includedGalleryArtForOKPC(pcId);\\n\\n    artCountForOKPC[pcId] = 1;\\n    artCollectedByOKPC[pcId][artId] = true;\\n    emit GalleryArtCollected(pcId, artId);\\n\\n    activeArtForOKPC[pcId] = artId;\\n    clockSpeedData[pcId].artLastChanged = block.timestamp;\\n    emit ArtChanged(pcId, artId);\\n  }\\n\\n  /* --------------------------------- ****** --------------------------------- */\\n\\n  /* -------------------------------------------------------------------------- */\\n  /*                                    PAINT                                   */\\n  /* -------------------------------------------------------------------------- */\\n  /* --------------------------------- PUBLIC --------------------------------- */\\n  /// @notice Get the Paint art stored on an OKPC.\\n  /// @param pcId The id of the OKPC to look up.\\n  function getPaintArt(uint256 pcId) public view returns (Art memory) {\\n    if (paintArtForOKPC[pcId].artist == address(0)) revert PaintArtNotFound();\\n    return paintArtForOKPC[pcId];\\n  }\\n\\n  /* ------------------------------- OKPC OWNERS ------------------------------ */\\n  /// @notice Displays stored Paint art on your OKPC.\\n  /// @param pcId The id of the OKPC to display. You'll need to own the OKPC.\\n  function setPaintArt(uint256 pcId) external onlyOwnerOf(pcId) {\\n    if (paintArtForOKPC[pcId].artist == address(0)) revert PaintArtNotFound();\\n    activeArtForOKPC[pcId] = 0;\\n    clockSpeedData[pcId].artLastChanged = block.timestamp;\\n    emit ArtChanged(pcId, 0);\\n  }\\n\\n  /// @notice Stores and displays stored Paint art on your OKPC.\\n  /// @param pcId The id of the OKPC to store Paint art on. You'll need to own the OKPC.\\n  /// @param title The title of the Paint art.\\n  /// @param data1 The first part of the art data to be stored.\\n  /// @param data2 The second part of the art data to be stored.\\n  function setPaintArt(\\n    uint256 pcId,\\n    bytes16 title,\\n    uint256 data1,\\n    uint256 data2\\n  ) external onlyIfPaintOpen onlyOwnerOf(pcId) {\\n    _setPaintArt(pcId, title, msg.sender, data1, data2);\\n  }\\n\\n  /// @notice Create a commission for another artist to use Paint on your OKPC.\\n  /// @param pcId The id of the OKPC to use. You'll need to own the OKPC.\\n  /// @param artist The address of the artist to create a commission for.\\n  function createCommission(uint256 pcId, address artist)\\n    external\\n    payable\\n    onlyOwnerOf(pcId)\\n    onlyIfPaintOpen\\n    nonReentrant\\n  {\\n    if (artist == address(0)) revert PaintCommissionInvalid();\\n    if (msg.sender == artist) revert PaintCommissionInvalid();\\n\\n    if (openCommissionForOKPC[pcId].artist != address(0))\\n      cancelCommission(pcId);\\n\\n    openCommissionForOKPC[pcId] = Commission(artist, msg.value);\\n\\n    emit CommissionCreated(pcId, artist, msg.value);\\n  }\\n\\n  /// @notice Cancels a commission\\n  /// @param pcId The id of the OKPC to cancel a commission on. You'll need to own the OKPC.\\n  function cancelCommission(uint256 pcId)\\n    public\\n    onlyOwnerOf(pcId)\\n    onlyIfPaintOpen\\n  {\\n    _cancelCommission(pcId);\\n  }\\n\\n  /// @notice Cancels a commission. This may be called by the owner of the OKPC or when a token is being transferred.\\n  /// @param pcId The id of the OKPC to cancel a commission on.\\n  function _cancelCommission(uint256 pcId) internal nonReentrant {\\n    if (openCommissionForOKPC[pcId].artist == address(0))\\n      revert PaintCommissionInvalid();\\n\\n    uint256 amount = openCommissionForOKPC[pcId].amount;\\n    delete openCommissionForOKPC[pcId];\\n\\n    if (amount > 0) {\\n      (bool success, ) = ownerOf(pcId).call{value: amount}('');\\n      if (!success) revert PaymentTransferFailed();\\n    }\\n\\n    emit CommissionCancelled(pcId);\\n  }\\n\\n  /* --------------------------------- ARTISTS -------------------------------- */\\n  /// @notice Completes a commission.\\n  /// @param pcId The id of the OKPC to complete a commission for.\\n  /// @param title The title of the new art.\\n  /// @param data1 The first part of the art data to be stored.\\n  /// @param data2 The second part of the art data to be stored.\\n  function completeCommission(\\n    uint256 pcId,\\n    bytes16 title,\\n    uint256 data1,\\n    uint256 data2\\n  ) external onlyIfPaintOpen nonReentrant {\\n    if (msg.sender != openCommissionForOKPC[pcId].artist)\\n      revert PaintNotCommissionedArtist();\\n\\n    _setPaintArt(pcId, title, msg.sender, data1, data2);\\n\\n    uint256 amount = openCommissionForOKPC[pcId].amount;\\n    delete openCommissionForOKPC[pcId];\\n    if (amount > 0) {\\n      (bool success, ) = msg.sender.call{value: amount}('');\\n      if (!success) revert PaymentTransferFailed();\\n    }\\n\\n    emit CommissionCompleted(pcId, msg.sender, amount);\\n  }\\n\\n  /* ---------------------------------- ADMIN --------------------------------- */\\n  /// @notice Toggles the Paint interactions on or off.\\n  function togglePaintOpen() external onlyOwner {\\n    paintOpen = !paintOpen;\\n    emit PaintOpenUpdated(paintOpen);\\n  }\\n\\n  /// @notice Allows the owner to update the deny list status for an address.\\n  /// @param artist The address of the artist to update.\\n  /// @param deny Whether to deny the artist or not from submitting Art.\\n  function setDenyListStatus(address artist, bool deny) external onlyOwner {\\n    denyList[artist] = deny;\\n  }\\n\\n  /// @notice Allows the owner or community to moderate Paint art and revert to collected Gallery art.\\n  /// @param pcId The OKPC containing the Paint art.\\n  /// @param artId The Gallery Art to revert to. This must already be owned by the OKPC.\\n  function moderatePaintArt(uint256 pcId, uint256 artId)\\n    external\\n    onlyOwnerOrCommunity\\n    onlyIfOKPCHasCollectedGalleryArt(pcId, artId)\\n  {\\n    if (getPaintArt(pcId).artist == address(0)) revert PaintArtNotFound();\\n\\n    delete paintArtForOKPC[pcId];\\n\\n    activeArtForOKPC[pcId] = artId;\\n    emit ArtChanged(pcId, artId);\\n  }\\n\\n  /* -------------------------------- INTERNAL -------------------------------- */\\n  /// @notice Stores and displays Paint art on an OKPC.\\n  function _setPaintArt(\\n    uint256 pcId,\\n    bytes16 title,\\n    address artist,\\n    uint256 data1,\\n    uint256 data2\\n  ) internal {\\n    if (denyList[artist]) revert PaintDenyList();\\n    if (title[0] == bytes1(0x0)) revert PaintArtDataInvalid();\\n    if (_galleryArtHashes[keccak256(abi.encodePacked(data1, data2))])\\n      revert GalleryArtDuplicate();\\n\\n    paintArtForOKPC[pcId].artist = artist;\\n    paintArtForOKPC[pcId].title = title;\\n    paintArtForOKPC[pcId].data1 = data1;\\n    paintArtForOKPC[pcId].data2 = data2;\\n    emit PaintArtCreated(pcId, artist);\\n\\n    activeArtForOKPC[pcId] = 0;\\n    clockSpeedData[pcId].artLastChanged = block.timestamp;\\n    emit ArtChanged(pcId, 0);\\n  }\\n\\n  /* --------------------------------- ****** --------------------------------- */\\n\\n  /* -------------------------------------------------------------------------- */\\n  /*                                  RENDERER                                  */\\n  /* -------------------------------------------------------------------------- */\\n  /* ------------------------------- OKPC OWNERS ------------------------------ */\\n  /// @notice Toggles the off-chain renderer for your OKPC.\\n  /// @param pcId The OKPC to toggle.\\n  function switchOKPCRenderer(uint256 pcId) external onlyOwnerOf(pcId) {\\n    useOffchainMetadata[pcId] = !useOffchainMetadata[pcId];\\n  }\\n\\n  /* ---------------------------------- ADMIN --------------------------------- */\\n  /// @notice Updates the metadata address for OKPC.\\n  /// @param addr The new metadata address. Must conform to IOKPCMetadata.\\n  function setMetadataAddress(address addr) external onlyOwner {\\n    if (addr == address(0)) revert InvalidAddress();\\n    metadataAddress = addr;\\n    emit MetadataAddressUpdated(addr);\\n  }\\n\\n  /* --------------------------------- ****** --------------------------------- */\\n\\n  /* -------------------------------------------------------------------------- */\\n  /*                                  PAYMENTS                                  */\\n  /* -------------------------------------------------------------------------- */\\n  /* --------------------------------- ARTISTS -------------------------------- */\\n  /// @notice Sends you your full available balance if you're an OKPC artist.\\n  function withdrawArtistBalance() external nonReentrant {\\n    uint256 balance = paymentBalanceArtist[msg.sender];\\n    if (balance == 0) revert PaymentBalanceZero();\\n    paymentBalanceArtist[msg.sender] = 0;\\n\\n    (bool success, ) = msg.sender.call{value: balance}('');\\n    if (!success) revert PaymentBalanceZero();\\n\\n    emit PaymentWithdrawnArtist(msg.sender, balance);\\n  }\\n\\n  /* ---------------------------------- ADMIN --------------------------------- */\\n  /// @notice Sends you your full available balance if you're the OKPC.\\n  /// @param withdrawTo The address to send the balance to.\\n  function withdrawOwnerBalance(address withdrawTo)\\n    external\\n    onlyOwner\\n    nonReentrant\\n  {\\n    if (paymentBalanceOwner == 0) revert PaymentBalanceZero();\\n    uint256 balance = paymentBalanceOwner;\\n    paymentBalanceOwner = 0;\\n\\n    (bool success, ) = withdrawTo.call{value: balance}('');\\n    if (!success) revert PaymentBalanceZero();\\n\\n    emit PaymentWithdrawnOwner(balance);\\n  }\\n\\n  /* -------------------------------- INTERNAL -------------------------------- */\\n  /// @notice Adds funds to the payment balance for the specified address.\\n  /// @param artist The address to add funds to.\\n  /// @param amount The amount to add to the balance.\\n  function addToArtistBalance(address artist, uint256 amount) internal {\\n    emit PaymentReceivedArtist(artist, amount);\\n    paymentBalanceArtist[artist] += amount;\\n  }\\n\\n  /// @notice Adds funds to the payment balance for the owner.\\n  /// @param amount The amount to add to the balance.\\n  function addToOwnerBalance(uint256 amount) internal {\\n    emit PaymentReceivedOwner(amount);\\n    paymentBalanceOwner += amount;\\n  }\\n\\n  /* --------------------------------- ****** --------------------------------- */\\n\\n  /* -------------------------------------------------------------------------- */\\n  /*                                  ROYALTIES                                 */\\n  /* -------------------------------------------------------------------------- */\\n  /* --------------------------------- PUBLIC --------------------------------- */\\n  /// @notice EIP2981 royalty standard\\n  function royaltyInfo(uint256, uint256 salePrice)\\n    external\\n    view\\n    returns (address receiver, uint256 royaltyAmount)\\n  {\\n    return (address(this), (salePrice * ROYALTY) / 10000);\\n  }\\n\\n  /// @notice Receive royalties\\n  receive() external payable {\\n    addToOwnerBalance(msg.value);\\n  }\\n\\n  /* --------------------------------- ****** --------------------------------- */\\n\\n  /* -------------------------------------------------------------------------- */\\n  /*                                 CLOCK SPEED                                */\\n  /* -------------------------------------------------------------------------- */\\n  /* --------------------------------- PUBLIC --------------------------------- */\\n  /// @notice Returns the clockspeed for the specified OKPC.\\n  /// @param pcId The id of the OKPC to look up.\\n  function clockSpeed(uint256 pcId) public view returns (uint256) {\\n    uint256 lastBlock = clockSpeedData[pcId].lastSaveBlock;\\n    if (lastBlock == 0) {\\n      return 1;\\n    }\\n    uint256 delta = block.number - lastBlock;\\n    uint256 multiplier = delta / 200_000;\\n    if (multiplier > clockSpeedMaxMultiplier) {\\n      multiplier = clockSpeedMaxMultiplier;\\n    }\\n    uint256 total = clockSpeedData[pcId].savedSpeed +\\n      ((delta * (multiplier + 1)) / 10_000);\\n    if (total < 1) total = 1;\\n    return total;\\n  }\\n\\n  /* ---------------------------------- ADMIN --------------------------------- */\\n  /// @notice Allows the owner to update the maximum clockspeed multiplier.\\n  /// @param multiplier The new max clockspeed multiplier to set.\\n  function setClockSpeedMaxMultiplier(uint256 multiplier) external onlyOwner {\\n    clockSpeedMaxMultiplier = multiplier;\\n    emit ClockSpeedMaxMultiplierUpdated(multiplier);\\n  }\\n\\n  /* -------------------------------- INTERNAL -------------------------------- */\\n  /// @notice Saves clockspeed data. Called before an OKPC is transferred.\\n  function _saveClockSpeed(uint256 pcId) internal {\\n    clockSpeedData[pcId].savedSpeed = clockSpeed(pcId);\\n    clockSpeedData[pcId].lastSaveBlock = block.number;\\n    unchecked {\\n      clockSpeedData[pcId].transferCount++;\\n    }\\n  }\\n\\n  /* --------------------------------- ****** --------------------------------- */\\n\\n  /* -------------------------------------------------------------------------- */\\n  /*                                 EXPANSIONS                                 */\\n  /* -------------------------------------------------------------------------- */\\n  /* ---------------------------------- ADMIN --------------------------------- */\\n  /// @notice Allows the owner to update the Messaging address.\\n  /// @param addr The new Messaging address.\\n  function setMessagingAddress(address addr) external onlyOwner {\\n    if (addr == address(0)) revert InvalidAddress();\\n    messagingAddress = addr;\\n    emit MessagingAddressUpdated(addr);\\n  }\\n\\n  /// @notice Allows the owner to update the Community address.\\n  /// @param addr The new Community address.\\n  function setCommunityAddress(address addr) external onlyOwner {\\n    if (addr == address(0)) revert InvalidAddress();\\n    communityAddress = addr;\\n    emit CommunityAddressUpdated(addr);\\n  }\\n\\n  /// @notice Allows the owner to update the Marketplace address.\\n  /// @param addr The new Marketplace address.\\n  function setMarketplaceAddress(address addr) external onlyOwner {\\n    if (addr == address(0)) revert InvalidAddress();\\n    marketplaceAddress = addr;\\n    emit MarketplaceAddressUpdated(addr);\\n  }\\n\\n  /* ------------------------------- MARKETPLACE ------------------------------ */\\n  /// @notice Allows the Marketplace contract to transfer art between OKPCs.\\n  /// @param fromOKPCId The id of the OKPC to transfer from.\\n  /// @param toOKPCId The id of the OKPC to transfer to.\\n  /// @param artId The id of the Gallery artwork to transfer.\\n  function transferArt(\\n    uint256 fromOKPCId,\\n    uint256 toOKPCId,\\n    uint256 artId\\n  ) external onlyMarketplace onlyIfGalleryArtExists(artId) {\\n    if (!artCollectedByOKPC[fromOKPCId][artId]) revert GalleryArtNotCollected();\\n\\n    if (artCollectedByOKPC[toOKPCId][artId])\\n      revert GalleryArtAlreadyCollected();\\n\\n    if (artCountForOKPC[fromOKPCId] == 1) revert GalleryArtLastCollected();\\n\\n    if (activeArtForOKPC[fromOKPCId] == artId)\\n      revert GalleryArtCannotBeActive();\\n\\n    artCollectedByOKPC[fromOKPCId][artId] = false;\\n    artCountForOKPC[fromOKPCId]--;\\n\\n    artCollectedByOKPC[toOKPCId][artId] = true;\\n    unchecked {\\n      artCountForOKPC[toOKPCId]++;\\n    }\\n    emit GalleryArtTransferred(fromOKPCId, toOKPCId, artId);\\n  }\\n\\n  /// @notice Allows the Marketplace contract to add funds to an artist's withdrawable balance.\\n  /// @param artist The address to add funds to.\\n  function addToArtistBalanceFromMarketplace(address artist)\\n    external\\n    payable\\n    onlyMarketplace\\n  {\\n    addToArtistBalance(artist, msg.value);\\n  }\\n\\n  /// @notice Allows the Marketplace contract to add funds to the owner's withdrawable balance.\\n  function addToOwnerBalanceFromMarketplace() external payable onlyMarketplace {\\n    addToOwnerBalance(msg.value);\\n  }\\n\\n  /* --------------------------------- ****** --------------------------------- */\\n\\n  /* -------------------------------------------------------------------------- */\\n  /*                                   ERC721A                                  */\\n  /* -------------------------------------------------------------------------- */\\n  /* --------------------------------- PUBLIC --------------------------------- */\\n  /// @notice The standard ERC721 tokenURI function. Routes to the Metadata contract.\\n  function tokenURI(uint256 pcId) public view override returns (string memory) {\\n    if (!_exists(pcId)) revert OKPCNotFound();\\n    return IOKPCMetadata(metadataAddress).tokenURI(pcId);\\n  }\\n\\n  /* -------------------------------- INTERNAL -------------------------------- */\\n  /// @notice ERC721A override to start tokenId's at 1 instead of 0.\\n  function _startTokenId() internal pure override returns (uint256) {\\n    return 1;\\n  }\\n\\n  /// @notice Overrides _beforeTokenTransfers to update clockspeeds and clear any active commissions.\\n  function _beforeTokenTransfers(\\n    address,\\n    address,\\n    uint256 startTokenId,\\n    uint256 quantity\\n  ) internal override {\\n    for (uint256 i; i < quantity; i++) {\\n      uint256 pcId = startTokenId + i;\\n      _saveClockSpeed(pcId);\\n      if (openCommissionForOKPC[pcId].artist != address(0))\\n        _cancelCommission(pcId);\\n    }\\n  }\\n\\n  /* --------------------------------- ****** --------------------------------- */\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOKPC.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.8;\\n\\ninterface IOKPC {\\n  enum Phase {\\n    INIT,\\n    EARLY_BIRDS,\\n    FRIENDS,\\n    PUBLIC\\n  }\\n  struct Art {\\n    address artist;\\n    bytes16 title;\\n    uint256 data1;\\n    uint256 data2;\\n  }\\n  struct Commission {\\n    address artist;\\n    uint256 amount;\\n  }\\n  struct ClockSpeedXP {\\n    uint256 savedSpeed;\\n    uint256 lastSaveBlock;\\n    uint256 transferCount;\\n    uint256 artLastChanged;\\n  }\\n\\n  function getPaintArt(uint256) external view returns (Art memory);\\n\\n  function getGalleryArt(uint256) external view returns (Art memory);\\n\\n  function activeArtForOKPC(uint256) external view returns (uint256);\\n\\n  function useOffchainMetadata(uint256) external view returns (bool);\\n\\n  function clockSpeed(uint256) external view returns (uint256);\\n\\n  function artCountForOKPC(uint256) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"erc721a/contracts/ERC721A.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport '@openzeppelin/contracts/utils/Context.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\\n\\nerror ApprovalCallerNotOwnerNorApproved();\\nerror ApprovalQueryForNonexistentToken();\\nerror ApproveToCaller();\\nerror ApprovalToCurrentOwner();\\nerror BalanceQueryForZeroAddress();\\nerror MintedQueryForZeroAddress();\\nerror BurnedQueryForZeroAddress();\\nerror AuxQueryForZeroAddress();\\nerror MintToZeroAddress();\\nerror MintZeroQuantity();\\nerror OwnerIndexOutOfBounds();\\nerror OwnerQueryForNonexistentToken();\\nerror TokenIndexOutOfBounds();\\nerror TransferCallerNotOwnerNorApproved();\\nerror TransferFromIncorrectOwner();\\nerror TransferToNonERC721ReceiverImplementer();\\nerror TransferToZeroAddress();\\nerror URIQueryForNonexistentToken();\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension. Built to optimize for lower gas during batch mints.\\n *\\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\\n *\\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n *\\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721A is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n    }\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct AddressData {\\n        // Realistically, 2**64-1 is more than enough.\\n        uint64 balance;\\n        // Keeps track of mint count with minimal overhead for tokenomics.\\n        uint64 numberMinted;\\n        // Keeps track of burn count with minimal overhead for tokenomics.\\n        uint64 numberBurned;\\n        // For miscellaneous variable(s) pertaining to the address\\n        // (e.g. number of whitelist mint slots used).\\n        // If there are multiple variables, please pack them into a uint64.\\n        uint64 aux;\\n    }\\n\\n    // The tokenId of the next token to be minted.\\n    uint256 internal _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 internal _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned. See ownershipOf implementation for details.\\n    mapping(uint256 => TokenOwnership) internal _ownerships;\\n\\n    // Mapping owner address to address data\\n    mapping(address => AddressData) private _addressData;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _currentIndex = _startTokenId();\\n    }\\n\\n    /**\\n     * To change the starting tokenId, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     * @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than _currentIndex - _startTokenId() times\\n        unchecked {\\n            return _currentIndex - _burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view returns (uint256) {\\n        // Counter underflow is impossible as _currentIndex does not decrement,\\n        // and it is initialized to _startTokenId()\\n        unchecked {\\n            return _currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return uint256(_addressData[owner].balance);\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        if (owner == address(0)) revert MintedQueryForZeroAddress();\\n        return uint256(_addressData[owner].numberMinted);\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        if (owner == address(0)) revert BurnedQueryForZeroAddress();\\n        return uint256(_addressData[owner].numberBurned);\\n    }\\n\\n    /**\\n     * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        if (owner == address(0)) revert AuxQueryForZeroAddress();\\n        return _addressData[owner].aux;\\n    }\\n\\n    /**\\n     * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal {\\n        if (owner == address(0)) revert AuxQueryForZeroAddress();\\n        _addressData[owner].aux = aux;\\n    }\\n\\n    /**\\n     * Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\\n     */\\n    function ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (_startTokenId() <= curr && curr < _currentIndex) {\\n                TokenOwnership memory ownership = _ownerships[curr];\\n                if (!ownership.burned) {\\n                    if (ownership.addr != address(0)) {\\n                        return ownership;\\n                    }\\n                    // Invariant:\\n                    // There will always be an ownership that has an address and is not burned\\n                    // before an ownership that does not have an address and is not burned.\\n                    // Hence, curr will not underflow.\\n                    while (true) {\\n                        curr--;\\n                        ownership = _ownerships[curr];\\n                        if (ownership.addr != address(0)) {\\n                            return ownership;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        return ownershipOf(tokenId).addr;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public override {\\n        address owner = ERC721A.ownerOf(tokenId);\\n        if (to == owner) revert ApprovalToCurrentOwner();\\n\\n        if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {\\n            revert ApprovalCallerNotOwnerNorApproved();\\n        }\\n\\n        _approve(to, tokenId, owner);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public override {\\n        if (operator == _msgSender()) revert ApproveToCaller();\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n        if (to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n            revert TransferToNonERC721ReceiverImplementer();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return _startTokenId() <= tokenId && tokenId < _currentIndex &&\\n            !_ownerships[tokenId].burned;\\n    }\\n\\n    function _safeMint(address to, uint256 quantity) internal {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal {\\n        _mint(to, quantity, _data, true);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data,\\n        bool safe\\n    ) internal {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\\n        unchecked {\\n            _addressData[to].balance += uint64(quantity);\\n            _addressData[to].numberMinted += uint64(quantity);\\n\\n            _ownerships[startTokenId].addr = to;\\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\\n\\n            uint256 updatedIndex = startTokenId;\\n            uint256 end = updatedIndex + quantity;\\n\\n            if (safe && to.isContract()) {\\n                do {\\n                    emit Transfer(address(0), to, updatedIndex);\\n                    if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (updatedIndex != end);\\n                // Reentrancy protection\\n                if (_currentIndex != startTokenId) revert();\\n            } else {\\n                do {\\n                    emit Transfer(address(0), to, updatedIndex++);\\n                } while (updatedIndex != end);\\n            }\\n            _currentIndex = updatedIndex;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) private {\\n        TokenOwnership memory prevOwnership = ownershipOf(tokenId);\\n\\n        bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr ||\\n            isApprovedForAll(prevOwnership.addr, _msgSender()) ||\\n            getApproved(tokenId) == _msgSender());\\n\\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, prevOwnership.addr);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            _addressData[from].balance -= 1;\\n            _addressData[to].balance += 1;\\n\\n            _ownerships[tokenId].addr = to;\\n            _ownerships[tokenId].startTimestamp = uint64(block.timestamp);\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            if (_ownerships[nextTokenId].addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId < _currentIndex) {\\n                    _ownerships[nextTokenId].addr = prevOwnership.addr;\\n                    _ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        TokenOwnership memory prevOwnership = ownershipOf(tokenId);\\n\\n        _beforeTokenTransfers(prevOwnership.addr, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, prevOwnership.addr);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            _addressData[prevOwnership.addr].balance -= 1;\\n            _addressData[prevOwnership.addr].numberBurned += 1;\\n\\n            // Keep track of who burned the token, and the timestamp of burning.\\n            _ownerships[tokenId].addr = prevOwnership.addr;\\n            _ownerships[tokenId].startTimestamp = uint64(block.timestamp);\\n            _ownerships[tokenId].burned = true;\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            if (_ownerships[nextTokenId].addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId < _currentIndex) {\\n                    _ownerships[nextTokenId].addr = prevOwnership.addr;\\n                    _ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(prevOwnership.addr, address(0), tokenId);\\n        _afterTokenTransfers(prevOwnership.addr, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            _burnCounter++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(\\n        address to,\\n        uint256 tokenId,\\n        address owner\\n    ) private {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n            return retval == IERC721Receiver(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\n     * minting.\\n     * And also called after one token has been burned.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@0xsequence/sstore2/contracts/SSTORE2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./utils/Bytecode.sol\\\";\\n\\n/**\\n  @title A key-value storage with auto-generated keys for storing chunks of data with a lower write & read cost.\\n  @author Agustin Aguilar <aa@horizon.io>\\n\\n  Readme: https://github.com/0xsequence/sstore2#readme\\n*/\\nlibrary SSTORE2 {\\n  error WriteError();\\n\\n  /**\\n    @notice Stores `_data` and returns `pointer` as key for later retrieval\\n    @dev The pointer is a contract address with `_data` as code\\n    @param _data to be written\\n    @return pointer Pointer to the written `_data`\\n  */\\n  function write(bytes memory _data) internal returns (address pointer) {\\n    // Append 00 to _data so contract can't be called\\n    // Build init code\\n    bytes memory code = Bytecode.creationCodeFor(\\n      abi.encodePacked(\\n        hex'00',\\n        _data\\n      )\\n    );\\n\\n    // Deploy contract using create\\n    assembly { pointer := create(0, add(code, 32), mload(code)) }\\n\\n    // Address MUST be non-zero\\n    if (pointer == address(0)) revert WriteError();\\n  }\\n\\n  /**\\n    @notice Reads the contents of the `_pointer` code as data, skips the first byte \\n    @dev The function is intended for reading pointers generated by `write`\\n    @param _pointer to be read\\n    @return data read from `_pointer` contract\\n  */\\n  function read(address _pointer) internal view returns (bytes memory) {\\n    return Bytecode.codeAt(_pointer, 1, type(uint256).max);\\n  }\\n\\n  /**\\n    @notice Reads the contents of the `_pointer` code as data, skips the first byte \\n    @dev The function is intended for reading pointers generated by `write`\\n    @param _pointer to be read\\n    @param _start number of bytes to skip\\n    @return data read from `_pointer` contract\\n  */\\n  function read(address _pointer, uint256 _start) internal view returns (bytes memory) {\\n    return Bytecode.codeAt(_pointer, _start + 1, type(uint256).max);\\n  }\\n\\n  /**\\n    @notice Reads the contents of the `_pointer` code as data, skips the first byte \\n    @dev The function is intended for reading pointers generated by `write`\\n    @param _pointer to be read\\n    @param _start number of bytes to skip\\n    @param _end index before which to end extraction\\n    @return data read from `_pointer` contract\\n  */\\n  function read(address _pointer, uint256 _start, uint256 _end) internal view returns (bytes memory) {\\n    return Bytecode.codeAt(_pointer, _start + 1, _end + 1);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be payed in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOKPCMetadata.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.8;\\n\\nimport {IOKPC} from './IOKPC.sol';\\nimport {IOKPCParts} from './IOKPCParts.sol';\\n\\ninterface IOKPCMetadata {\\n  error InvalidTokenID();\\n  error NotEnoughPixelData();\\n\\n  struct Parts {\\n    IOKPCParts.Vector headband;\\n    IOKPCParts.Vector rightSpeaker;\\n    IOKPCParts.Vector leftSpeaker;\\n    IOKPCParts.Color color;\\n    string word;\\n  }\\n\\n  function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n  function renderArt(bytes memory art, uint256 colorIndex)\\n    external\\n    view\\n    returns (string memory);\\n\\n  function getParts(uint256 tokenId) external view returns (Parts memory);\\n\\n  function drawArt(bytes memory artData) external pure returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@0xsequence/sstore2/contracts/utils/Bytecode.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\nlibrary Bytecode {\\n  error InvalidCodeAtRange(uint256 _size, uint256 _start, uint256 _end);\\n\\n  /**\\n    @notice Generate a creation code that results on a contract with `_code` as bytecode\\n    @param _code The returning value of the resulting `creationCode`\\n    @return creationCode (constructor) for new contract\\n  */\\n  function creationCodeFor(bytes memory _code) internal pure returns (bytes memory) {\\n    /*\\n      0x00    0x63         0x63XXXXXX  PUSH4 _code.length  size\\n      0x01    0x80         0x80        DUP1                size size\\n      0x02    0x60         0x600e      PUSH1 14            14 size size\\n      0x03    0x60         0x6000      PUSH1 00            0 14 size size\\n      0x04    0x39         0x39        CODECOPY            size\\n      0x05    0x60         0x6000      PUSH1 00            0 size\\n      0x06    0xf3         0xf3        RETURN\\n      <CODE>\\n    */\\n\\n    return abi.encodePacked(\\n      hex\\\"63\\\",\\n      uint32(_code.length),\\n      hex\\\"80_60_0E_60_00_39_60_00_F3\\\",\\n      _code\\n    );\\n  }\\n\\n  /**\\n    @notice Returns the size of the code on a given address\\n    @param _addr Address that may or may not contain code\\n    @return size of the code on the given `_addr`\\n  */\\n  function codeSize(address _addr) internal view returns (uint256 size) {\\n    assembly { size := extcodesize(_addr) }\\n  }\\n\\n  /**\\n    @notice Returns the code of a given address\\n    @dev It will fail if `_end < _start`\\n    @param _addr Address that may or may not contain code\\n    @param _start number of bytes of code to skip on read\\n    @param _end index before which to end extraction\\n    @return oCode read from `_addr` deployed bytecode\\n\\n    Forked from: https://gist.github.com/KardanovIR/fe98661df9338c842b4a30306d507fbd\\n  */\\n  function codeAt(address _addr, uint256 _start, uint256 _end) internal view returns (bytes memory oCode) {\\n    uint256 csize = codeSize(_addr);\\n    if (csize == 0) return bytes(\\\"\\\");\\n\\n    if (_start > csize) return bytes(\\\"\\\");\\n    if (_end < _start) revert InvalidCodeAtRange(csize, _start, _end); \\n\\n    unchecked {\\n      uint256 reqSize = _end - _start;\\n      uint256 maxSize = csize - _start;\\n\\n      uint256 size = maxSize < reqSize ? maxSize : reqSize;\\n\\n      assembly {\\n        // allocate output byte array - this could also be done without assembly\\n        // by using o_code = new bytes(size)\\n        oCode := mload(0x40)\\n        // new \\\"memory end\\\" including padding\\n        mstore(0x40, add(oCode, and(add(add(size, 0x20), 0x1f), not(0x1f))))\\n        // store length in memory\\n        mstore(oCode, size)\\n        // actually retrieve the code, this needs assembly\\n        extcodecopy(_addr, add(oCode, 0x20), _start, size)\\n      }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\"\r\n    },\r\n    \"contracts/interfaces/IOKPCParts.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.7;\\n\\ninterface IOKPCParts {\\n  // errors\\n  error IndexOutOfBounds(uint256 index, uint256 maxIndex);\\n\\n  // structures\\n  struct Color {\\n    bytes6 light;\\n    bytes6 regular;\\n    bytes6 dark;\\n    string name;\\n  }\\n\\n  struct Vector {\\n    string data;\\n    string name;\\n  }\\n\\n  // functions\\n  function getColor(uint256 index) external view returns (Color memory);\\n\\n  function getHeadband(uint256 index) external view returns (Vector memory);\\n\\n  function getSpeaker(uint256 index) external view returns (Vector memory);\\n\\n  function getWord(uint256 index) external view returns (string memory);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"artistsReserved\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"teamReserved\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxPerPhase\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"mintCost\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GalleryArtAlreadyCollected\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GalleryArtCannotBeActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GalleryArtCollectedMaximumTimes\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GalleryArtDuplicate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GalleryArtLastCollected\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GalleryArtNotCollected\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GalleryArtNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GalleryMaxArtReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GalleryMinArtNotReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GalleryNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"InvalidCodeAtRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MerkleProofInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintAlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintMaxReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintNotAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintPhaseNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintTooManyOKPCs\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotCommunityAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotMarketplaceAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOKPCOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwnerOrCommunity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OKPCNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PaintArtDataInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PaintArtNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PaintCommissionInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PaintDenyList\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PaintNotCommissionedArtist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PaintNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PaymentAmountInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PaymentBalanceZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PaymentTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WriteError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pcId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"artId\",\"type\":\"uint256\"}],\"name\":\"ArtChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxMultiplier\",\"type\":\"uint256\"}],\"name\":\"ClockSpeedMaxMultiplierUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pcId\",\"type\":\"uint256\"}],\"name\":\"CommissionCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pcId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"artist\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CommissionCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pcId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"artist\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CommissionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"communityAddress\",\"type\":\"address\"}],\"name\":\"CommunityAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pcId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"artId\",\"type\":\"uint256\"}],\"name\":\"GalleryArtCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"artId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"artist\",\"type\":\"address\"}],\"name\":\"GalleryArtCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pcId1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pcId2\",\"type\":\"uint256\"}],\"name\":\"GalleryArtSwapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromOKPCId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toOKPCId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"artId\",\"type\":\"uint256\"}],\"name\":\"GalleryArtTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxGalleryArt\",\"type\":\"uint256\"}],\"name\":\"GalleryMaxArtUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"}],\"name\":\"GalleryOpenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"marketplaceAddress\",\"type\":\"address\"}],\"name\":\"MarketplaceAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"messagingAddress\",\"type\":\"address\"}],\"name\":\"MessagingAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"MetadataAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum IOKPC.Phase\",\"name\":\"phase\",\"type\":\"uint8\"}],\"name\":\"MintingPhaseStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pcId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"artist\",\"type\":\"address\"}],\"name\":\"PaintArtCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"}],\"name\":\"PaintOpenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"artist\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReceivedArtist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReceivedOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"artist\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentWithdrawnArtist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentWithdrawnOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"hello\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ART_COLLECT_COST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_COLLECT_PER_ART\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_COST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeArtForOKPC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"title\",\"type\":\"bytes16\"},{\"internalType\":\"uint256\",\"name\":\"data1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"data2\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"addGalleryArt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"addInitialGalleryArt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"artist\",\"type\":\"address\"}],\"name\":\"addToArtistBalanceFromMarketplace\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addToOwnerBalanceFromMarketplace\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"artCollectedByOKPC\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"artCountForOKPC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pcId\",\"type\":\"uint256\"}],\"name\":\"cancelCommission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pcId\",\"type\":\"uint256\"}],\"name\":\"clockSpeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"clockSpeedData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"savedSpeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastSaveBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"artLastChanged\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clockSpeedMaxMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pcId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"artIds\",\"type\":\"uint256[]\"}],\"name\":\"collectArt\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pcId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"artId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"makeActive\",\"type\":\"bool\"}],\"name\":\"collectArt\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pcId\",\"type\":\"uint256\"},{\"internalType\":\"bytes16\",\"name\":\"title\",\"type\":\"bytes16\"},{\"internalType\":\"uint256\",\"name\":\"data1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"data2\",\"type\":\"uint256\"}],\"name\":\"completeCommission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pcId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"artist\",\"type\":\"address\"}],\"name\":\"createCommission\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"denyList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"earlyBirdsMintClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"friendsMintClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"galleryArtCollectedCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"galleryArtCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"galleryArtistArtCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"galleryOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"artId\",\"type\":\"uint256\"}],\"name\":\"getGalleryArt\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"artist\",\"type\":\"address\"},{\"internalType\":\"bytes16\",\"name\":\"title\",\"type\":\"bytes16\"},{\"internalType\":\"uint256\",\"name\":\"data1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"data2\",\"type\":\"uint256\"}],\"internalType\":\"struct IOKPC.Art\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pcId\",\"type\":\"uint256\"}],\"name\":\"getPaintArt\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"artist\",\"type\":\"address\"},{\"internalType\":\"bytes16\",\"name\":\"title\",\"type\":\"bytes16\"},{\"internalType\":\"uint256\",\"name\":\"data1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"data2\",\"type\":\"uint256\"}],\"internalType\":\"struct IOKPC.Art\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxGalleryArt\",\"type\":\"uint256\"}],\"name\":\"increaseMaxGalleryArt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketplaceAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messagingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadataAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[64]\",\"name\":\"addr\",\"type\":\"address[64]\"}],\"name\":\"mintArtists\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"mintEarlyBirds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"mintFriends\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[4]\",\"name\":\"addr\",\"type\":\"address[4]\"}],\"name\":\"mintTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingPhase\",\"outputs\":[{\"internalType\":\"enum IOKPC.Phase\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"artId\",\"type\":\"uint256\"},{\"internalType\":\"bytes16\",\"name\":\"title\",\"type\":\"bytes16\"},{\"internalType\":\"uint256\",\"name\":\"data1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"data2\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"artist\",\"type\":\"address\"}],\"name\":\"moderateGalleryArt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pcId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"artId\",\"type\":\"uint256\"}],\"name\":\"moderatePaintArt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"openCommissionForOKPC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"artist\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"paintArtForOKPC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"artist\",\"type\":\"address\"},{\"internalType\":\"bytes16\",\"name\":\"title\",\"type\":\"bytes16\"},{\"internalType\":\"uint256\",\"name\":\"data1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"data2\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paintOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"paymentBalanceArtist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentBalanceOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newRoot\",\"type\":\"bytes32\"}],\"name\":\"setArtistsMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"name\":\"setClockSpeedMaxMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setCommunityAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"artist\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"deny\",\"type\":\"bool\"}],\"name\":\"setDenyListStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newRoot\",\"type\":\"bytes32\"}],\"name\":\"setEarlyBirdsMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newRoot\",\"type\":\"bytes32\"}],\"name\":\"setFriendsMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pcId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"artId\",\"type\":\"uint256\"}],\"name\":\"setGalleryArt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setMarketplaceAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setMessagingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setMetadataAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pcId\",\"type\":\"uint256\"}],\"name\":\"setPaintArt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pcId\",\"type\":\"uint256\"},{\"internalType\":\"bytes16\",\"name\":\"title\",\"type\":\"bytes16\"},{\"internalType\":\"uint256\",\"name\":\"data1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"data2\",\"type\":\"uint256\"}],\"name\":\"setPaintArt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startEarlyBirdsMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startFriendsMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startPublicMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pcId\",\"type\":\"uint256\"}],\"name\":\"switchOKPCRenderer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleGalleryOpen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePaintOpen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pcId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromOKPCId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toOKPCId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"artId\",\"type\":\"uint256\"}],\"name\":\"transferArt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"useOffchainMetadata\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawArtistBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"withdrawTo\",\"type\":\"address\"}],\"name\":\"withdrawOwnerBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "OKPC", "CompilerVersion": "v0.8.8+commit.dddeac2f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000002386f26fc100000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}