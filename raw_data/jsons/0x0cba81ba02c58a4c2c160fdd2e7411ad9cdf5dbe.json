{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Auction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\ncontract Auction is Ownable, Pausable {\\n  using SafeERC20 for IERC20;\\n\\n  uint256 public immutable minimumUnitPrice;\\n  uint256 public immutable minimumBidIncrement;\\n  uint256 public immutable unitPriceStepSize;\\n  uint256 public immutable minimumQuantity;\\n  uint256 public immutable maximumQuantity;\\n  uint256 public immutable numberOfAuctions;\\n  uint256 public immutable itemsPerAuction;\\n  address payable public immutable beneficiaryAddress;\\n\\n  // Total auction length - including the last X hours inside which it can randomly end\\n  uint256 public auctionLengthInHours = 24;\\n  // The target number for the random end's random number generator.\\n  // MUST be < endWindows to have an even chance of ending each window\\n  uint256 constant randomEnd = 7;\\n  // Auction randomly ends within last auctionEndThresholdHrs\\n  uint256 public constant auctionEndThresholdHrs = 3;\\n  // Number of time windows inside the threshold in which the auction can randomly end\\n  uint256 public constant endWindows = 18;\\n  // block timestamp of when auction starts\\n  uint256 public auctionStart;\\n  // Merkle root of those addresses owed a refund\\n  bytes32 public refundMerkleRoot;\\n\\n  AuctionStatus private _auctionStatus;\\n  uint256 private _bidIndex;\\n\\n  event AuctionStarted();\\n  event AuctionEnded();\\n  event BidPlaced(\\n    bytes32 indexed bidHash,\\n    uint256 indexed auctionIndex,\\n    address indexed bidder,\\n    uint256 bidIndex,\\n    uint256 unitPrice,\\n    uint256 quantity,\\n    uint256 balance\\n  );\\n  event RefundIssued(address indexed refundRecipient, uint256 refundAmount);\\n\\n  struct Bid {\\n    uint128 unitPrice;\\n    uint128 quantity;\\n  }\\n\\n  struct AuctionStatus {\\n    bool started;\\n    bool ended;\\n  }\\n\\n  // keccak256(auctionIndex, bidder address) => current bid\\n  mapping(bytes32 => Bid) private _bids;\\n  // Refunds address => excessRefunded\\n  mapping(address => bool) private _excessRefunded;\\n  // Auction end checks windowIndex => windowChecked\\n  mapping(uint256 => bool) private _windowChecked;\\n\\n  // Beneficiary address cannot be changed after deployment.\\n  constructor(\\n    address payable beneficiaryAddress_,\\n    uint256 minimumUnitPrice_,\\n    uint256 minimumBidIncrement_,\\n    uint256 unitPriceStepSize_,\\n    uint256 maximumQuantity_,\\n    uint256 numberOfAuctions_,\\n    uint256 itemsPerAuction_\\n  ) {\\n    beneficiaryAddress = beneficiaryAddress_;\\n    minimumUnitPrice = minimumUnitPrice_;\\n    minimumBidIncrement = minimumBidIncrement_;\\n    unitPriceStepSize = unitPriceStepSize_;\\n    minimumQuantity = 1;\\n    maximumQuantity = maximumQuantity_;\\n    numberOfAuctions = numberOfAuctions_;\\n    itemsPerAuction = itemsPerAuction_;\\n    pause();\\n  }\\n\\n  modifier whenRefundsActive() {\\n    require(refundMerkleRoot != 0, \\\"Refund merkle root not set\\\");\\n    _;\\n  }\\n\\n  modifier whenAuctionActive() {\\n    require(!_auctionStatus.ended, \\\"Auction has already ended\\\");\\n    require(_auctionStatus.started, \\\"Auction hasn't started yet\\\");\\n    _;\\n  }\\n\\n  modifier whenPreAuction() {\\n    require(!_auctionStatus.ended, \\\"Auction has already ended\\\");\\n    require(!_auctionStatus.started, \\\"Auction has already started\\\");\\n    _;\\n  }\\n\\n  modifier whenAuctionEnded() {\\n    require(_auctionStatus.ended, \\\"Auction hasn't ended yet\\\");\\n    require(_auctionStatus.started, \\\"Auction hasn't started yet\\\");\\n    _;\\n  }\\n\\n  function auctionStatus() public view returns (AuctionStatus memory) {\\n    return _auctionStatus;\\n  }\\n\\n  function pause() public onlyOwner {\\n    _pause();\\n  }\\n\\n  function unpause() public onlyOwner {\\n    _unpause();\\n  }\\n\\n  function startAuction() external onlyOwner whenPreAuction {\\n    _auctionStatus.started = true;\\n    auctionStart = block.timestamp;\\n\\n    if (paused()) {\\n      unpause();\\n    }\\n    emit AuctionStarted();\\n  }\\n\\n  function getAuctionEnd() internal view returns (uint256) {\\n    return auctionStart + (auctionLengthInHours * 1 hours);\\n  }\\n\\n  function endAuction() external whenAuctionActive {\\n    require(\\n      block.timestamp >= getAuctionEnd(),\\n      \\\"Auction can't be stopped until due\\\"\\n    );\\n    _endAuction();\\n  }\\n\\n  function _endAuction() internal whenAuctionActive {\\n    _auctionStatus.ended = true;\\n    if (!paused()) {\\n      _pause();\\n    }\\n    emit AuctionEnded();\\n  }\\n\\n  function numberOfBidsPlaced() external view returns (uint256) {\\n    return _bidIndex;\\n  }\\n\\n  function getBid(uint256 auctionIndex_, address bidder_)\\n    external\\n    view\\n    returns (Bid memory)\\n  {\\n    return _bids[_bidHash(auctionIndex_, bidder_)];\\n  }\\n\\n  function _bidHash(uint256 auctionIndex_, address bidder_)\\n    internal\\n    pure\\n    returns (bytes32)\\n  {\\n    return keccak256(abi.encode(auctionIndex_, bidder_));\\n  }\\n\\n  function _refundHash(uint256 refundAmount_, address bidder_)\\n    internal\\n    pure\\n    returns (bytes32)\\n  {\\n    return keccak256(abi.encode(refundAmount_, bidder_));\\n  }\\n\\n  // When a bidder places a bid or updates their existing bid, they will use this function.\\n  // - total value can never be lowered\\n  // - unit price can never be lowered\\n  // - quantity can be raised or lowered, but only if unit price is raised to meet or exceed previous total price\\n  function placeBid(\\n    uint256 auctionIndex_,\\n    uint256 quantity_,\\n    uint256 unitPrice_\\n  ) external payable whenNotPaused whenAuctionActive {\\n    // If the bidder is increasing their bid, the amount being added must be greater than or equal to the minimum bid increment.\\n    // A msg.value of 0 can be valid if the bidder is updating their bid but no new ether is required.\\n    if (msg.value > 0 && msg.value < minimumBidIncrement) {\\n      revert(\\\"Bid lower than minimum bid increment.\\\");\\n    }\\n\\n    // Ensure auctionIndex is within valid range.\\n    // For a multi-phase auction like loomlock, this would be insuffucient. You would need to store a state var for the current auction index and require that the auctionIndex_ param == that index.\\n    require(auctionIndex_ < numberOfAuctions, \\\"Invalid auctionIndex\\\");\\n\\n    // Cache initial bid values.\\n    bytes32 bidHash = _bidHash(auctionIndex_, msg.sender);\\n    uint256 initialUnitPrice = _bids[bidHash].unitPrice;\\n    uint256 initialQuantity = _bids[bidHash].quantity;\\n    uint256 initialBalance = initialUnitPrice * initialQuantity;\\n\\n    // Cache final bid values.\\n    uint256 finalUnitPrice = unitPrice_;\\n    uint256 finalQuantity = quantity_;\\n    uint256 finalBalance = initialBalance + msg.value;\\n\\n    // Don't allow bids with a unit price scale smaller than unitPriceStepSize.\\n    // For example, allow 1.01 or 111.01 but don't allow 1.011.\\n    require(\\n      finalUnitPrice % unitPriceStepSize == 0,\\n      \\\"Unit price step too small\\\"\\n    );\\n\\n    // Reject bids that don't have a quantity within the valid range.\\n    require(finalQuantity >= minimumQuantity, \\\"Quantity too low\\\");\\n    require(finalQuantity <= maximumQuantity, \\\"Quantity too high\\\");\\n\\n    // Balance can never be lowered. This can't really ever happen because of the way finalBalance is defined.\\n    require(finalBalance >= initialBalance, \\\"Balance can't be lowered\\\");\\n\\n    // Unit price can never be lowered.\\n    // Quantity can be raised or lowered, but it can only be lowered if the unit price is raised to meet or exceed the initial total value. Ensuring the the unit price is never lowered takes care of this.\\n    require(finalUnitPrice >= initialUnitPrice, \\\"Unit price can't be lowered\\\");\\n\\n    // Ensure the new finalBalance equals quantity * the unit price that was given in this txn exactly. This is important to prevent rounding errors later when returning ether.\\n    require(\\n      finalQuantity * finalUnitPrice == finalBalance,\\n      \\\"Quantity * Unit Price != Total Value\\\"\\n    );\\n\\n    // Unit price must be greater than or equal to the minimumUnitPrice.\\n    require(finalUnitPrice >= minimumUnitPrice, \\\"Bid unit price too low\\\");\\n\\n    // Something must be changing from the initial bid for this new bid to be valid.\\n    if (\\n      initialUnitPrice == finalUnitPrice && initialQuantity == finalQuantity\\n    ) {\\n      revert(\\\"This bid doesn't change anything\\\");\\n    }\\n\\n    // Update the bidder's bid.\\n    _bids[bidHash].unitPrice = uint128(finalUnitPrice);\\n    _bids[bidHash].quantity = uint128(finalQuantity);\\n\\n    emit BidPlaced(\\n      bidHash,\\n      auctionIndex_,\\n      msg.sender,\\n      _bidIndex,\\n      finalUnitPrice,\\n      finalQuantity,\\n      finalBalance\\n    );\\n\\n    // Increment after emitting the BidPlaced event because counter is 0-indexed.\\n    _bidIndex += 1;\\n\\n    // After the bid has been placed, check to see whether the auction is ended\\n    _checkAuctionEnd();\\n  }\\n\\n  function withdrawContractBalance() external onlyOwner {\\n    (bool success, ) = beneficiaryAddress.call{value: address(this).balance}(\\n      \\\"\\\"\\n    );\\n    require(success, \\\"Transfer failed\\\");\\n  }\\n\\n  // A withdraw function to avoid locking ERC20 tokens in the contract forever.\\n  // Tokens can only be withdrawn by the owner, to the owner.\\n  function transferERC20Token(IERC20 token, uint256 amount) external onlyOwner {\\n    token.safeTransfer(owner(), amount);\\n  }\\n\\n  // Handles receiving ether to the contract.\\n  // Reject all direct payments to the contract except from beneficiary and owner.\\n  // Bids must be placed using the placeBid function.\\n  receive() external payable {\\n    require(msg.value > 0, \\\"No ether was sent\\\");\\n    require(\\n      msg.sender == beneficiaryAddress || msg.sender == owner(),\\n      \\\"Only owner or beneficiary can fund contract\\\"\\n    );\\n  }\\n\\n  function setRefundMerkleRoot(bytes32 refundMerkleRoot_)\\n    external\\n    onlyOwner\\n    whenAuctionEnded\\n  {\\n    refundMerkleRoot = refundMerkleRoot_;\\n  }\\n\\n  function claimRefund(uint256 refundAmount_, bytes32[] calldata proof_)\\n    external\\n    whenNotPaused\\n    whenAuctionEnded\\n    whenRefundsActive\\n  {\\n    // Can only refund if we haven't already refunded this address:\\n    require(!_excessRefunded[msg.sender], \\\"Refund already issued\\\");\\n\\n    bytes32 leaf = _refundHash(refundAmount_, msg.sender);\\n    require(\\n      MerkleProof.verify(proof_, refundMerkleRoot, leaf),\\n      \\\"Refund proof invalid\\\"\\n    );\\n\\n    // Safety check - we shouldn't be refunding more than this address has bid across all auctions. This will also\\n    // catch data collision exploits using other address and refund amount combinations, if\\n    // such are possible:\\n    uint256 totalBalance;\\n    for (\\n      uint256 auctionIndex = 0;\\n      auctionIndex < numberOfAuctions;\\n      auctionIndex++\\n    ) {\\n      bytes32 bidHash = _bidHash(auctionIndex, msg.sender);\\n      totalBalance += _bids[bidHash].unitPrice * _bids[bidHash].quantity;\\n    }\\n\\n    require(refundAmount_ <= totalBalance, \\\"Refund request exceeds balance\\\");\\n\\n    // Set state - we are issuing a refund to this address now, therefore\\n    // this logic path cannot be entered again for this address:\\n    _excessRefunded[msg.sender] = true;\\n\\n    // State has been set, we can now send the refund:\\n    (bool success, ) = msg.sender.call{value: refundAmount_}(\\\"\\\");\\n    require(success, \\\"Refund failed\\\");\\n\\n    emit RefundIssued(msg.sender, refundAmount_);\\n  }\\n\\n  function _checkAuctionEnd() internal {\\n    // (1) If we are at or past the end time it's the end of the action:\\n    if (block.timestamp >= getAuctionEnd()) {\\n      _endAuction();\\n    } else {\\n      // (2) Still going? See if we are in the threshold:\\n      uint256 auctionEndThreshold = getAuctionEnd() -\\n        (auctionEndThresholdHrs * 1 hours);\\n      if (block.timestamp >= auctionEndThreshold) {\\n        uint256 windowSize = (auctionEndThresholdHrs * 1 hours) / endWindows;\\n        uint256 windowIndex = (block.timestamp - auctionEndThreshold) /\\n          windowSize;\\n        if (!_windowChecked[windowIndex]) {\\n          _windowChecked[windowIndex] = true;\\n          // End logic is simple, we do a modulo on the random number using the number of\\n          // windows. We check the value (something that must be < endWindows to sure even probability each window).\\n          // Auction ends if they match.\\n          if (_getRandomNumber() % endWindows == randomEnd) {\\n            _endAuction();\\n          }\\n        }\\n      }\\n    }\\n  }\\n\\n  function _getRandomNumber() internal view returns (uint256) {\\n    return\\n      uint256(keccak256(abi.encode(_bidIndex, blockhash(block.number - 1))));\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        bytes32 computedHash = leaf;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n\\n        // Check if the computed hash (root) is equal to the provided root\\n        return computedHash == root;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"beneficiaryAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minimumUnitPrice_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumBidIncrement_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitPriceStepSize_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maximumQuantity_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfAuctions_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemsPerAuction_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AuctionEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AuctionStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"bidHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"BidPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"refundRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundAmount\",\"type\":\"uint256\"}],\"name\":\"RefundIssued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"auctionEndThresholdHrs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionLengthInHours\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionStatus\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"started\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"ended\",\"type\":\"bool\"}],\"internalType\":\"struct Auction.AuctionStatus\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beneficiaryAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"refundAmount_\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof_\",\"type\":\"bytes32[]\"}],\"name\":\"claimRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endWindows\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionIndex_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder_\",\"type\":\"address\"}],\"name\":\"getBid\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"unitPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"quantity\",\"type\":\"uint128\"}],\"internalType\":\"struct Auction.Bid\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"itemsPerAuction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumQuantity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumBidIncrement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumQuantity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumUnitPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfAuctions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfBidsPlaced\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionIndex_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitPrice_\",\"type\":\"uint256\"}],\"name\":\"placeBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"refundMerkleRoot_\",\"type\":\"bytes32\"}],\"name\":\"setRefundMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferERC20Token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unitPriceStepSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawContractBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Auction", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000001ffe9762419a0384b8488c6e1f468d8bfb8d11f300000000000000000000000000000000000000000000000003782dace9d90000000000000000000000000000000000000000000000000000016345785d8a0000000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000780", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}