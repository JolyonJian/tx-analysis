{"SourceCode": "pragma solidity ^0.4.23;\r\ncontract Token{\r\n    // token\u603b\u91cf\uff0c\u9ed8\u8ba4\u4f1a\u4e3apublic\u53d8\u91cf\u751f\u6210\u4e00\u4e2agetter\u51fd\u6570\u63a5\u53e3\uff0c\u540d\u79f0\u4e3atotalSupply().\r\n    uint256 public totalSupply;\r\n\r\n    /// \u83b7\u53d6\u8d26\u6237_owner\u62e5\u6709token\u7684\u6570\u91cf \r\n    function balanceOf(address _owner) constant public returns (uint256 balance);\r\n\r\n    //\u4ece\u6d88\u606f\u53d1\u9001\u8005\u8d26\u6237\u4e2d\u5f80_to\u8d26\u6237\u8f6c\u6570\u91cf\u4e3a_value\u7684token\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n    //\u4ece\u8d26\u6237_from\u4e2d\u5f80\u8d26\u6237_to\u8f6c\u6570\u91cf\u4e3a_value\u7684token\uff0c\u4e0eapprove\u65b9\u6cd5\u914d\u5408\u4f7f\u7528\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns   \r\n    (bool success);\r\n\r\n    //\u6d88\u606f\u53d1\u9001\u8d26\u6237\u8bbe\u7f6e\u8d26\u6237_spender\u80fd\u4ece\u53d1\u9001\u8d26\u6237\u4e2d\u8f6c\u51fa\u6570\u91cf\u4e3a_value\u7684token\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n    //\u83b7\u53d6\u8d26\u6237_spender\u53ef\u4ee5\u4ece\u8d26\u6237_owner\u4e2d\u8f6c\u51fatoken\u7684\u6570\u91cf \r\n    function allowance(address _owner, address _spender) constant public returns \r\n    (uint256 remaining);\r\n\r\n    //\u53d1\u751f\u8f6c\u8d26\u65f6\u5fc5\u987b\u8981\u89e6\u53d1\u7684\u4e8b\u4ef6 \r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    //\u5f53\u51fd\u6570approve(address _spender, uint256 _value)\u6210\u529f\u6267\u884c\u65f6\u5fc5\u987b\u89e6\u53d1\u7684\u4e8b\u4ef6\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 \r\n    _value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract StandardToken is Token {\r\n    using SafeMath for uint256;\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        require(_to != address(0));\r\n        require(balances[msg.sender] >= _value);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);//\u4ece\u6d88\u606f\u53d1\u9001\u8005\u8d26\u6237\u4e2d\u51cf\u53bbtoken\u6570\u91cf_value\r\n        balances[_to] = balances[_to].add(_value);//\u5f80\u63a5\u6536\u8d26\u6237\u589e\u52a0token\u6570\u91cf_value\r\n        emit Transfer(msg.sender, _to, _value);//\u89e6\u53d1\u8f6c\u5e01\u4ea4\u6613\u4e8b\u4ef6\r\n        return true;\r\n    }\r\n\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns \r\n    (bool success) {\r\n        require(_to != address(0));\r\n        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\r\n        balances[_to] = balances[_to].add(_value);//\u63a5\u6536\u8d26\u6237\u589e\u52a0token\u6570\u91cf_value\r\n        balances[_from] = balances[_from].sub(_value); //\u652f\u51fa\u8d26\u6237_from\u51cf\u53bbtoken\u6570\u91cf_value\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);//\u6d88\u606f\u53d1\u9001\u8005\u53ef\u4ee5\u4ece\u8d26\u6237_from\u4e2d\u8f6c\u51fa\u7684\u6570\u91cf\u51cf\u5c11_value\r\n        emit Transfer(_from, _to, _value);//\u89e6\u53d1\u8f6c\u5e01\u4ea4\u6613\u4e8b\u4ef6\r\n        return true;\r\n    }\r\n    function balanceOf(address _owner) constant public returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success)   \r\n    {\r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];//\u5141\u8bb8_spender\u4ece_owner\u4e2d\u8f6c\u51fa\u7684token\u6570\r\n    }\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n}\r\n\r\ncontract NiMingToken is StandardToken { \r\n\r\n    /* Public variables of the token */\r\n    string public name;                   //\u540d\u79f0: eg Simon Bucks\r\n    uint8 public decimals;               //\u6700\u591a\u7684\u5c0f\u6570\u4f4d\u6570\uff0cHow many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It's like comparing 1 wei to 1 ether.\r\n    string public symbol;               //token\u7b80\u79f0: eg SBX\r\n    string public version = 'H0.1';    //\u7248\u672c\r\n\r\n    constructor(uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol) public {\r\n        balances[msg.sender] = _initialAmount; // \u521d\u59cbtoken\u6570\u91cf\u7ed9\u4e88\u6d88\u606f\u53d1\u9001\u8005\r\n        totalSupply = _initialAmount;         // \u8bbe\u7f6e\u521d\u59cb\u603b\u91cf\r\n        name = _tokenName;                   // token\u540d\u79f0\r\n        decimals = _decimalUnits;           // \u5c0f\u6570\u4f4d\u6570\r\n        symbol = _tokenSymbol;             // token\u7b80\u79f0\r\n    }\r\n\r\n    /* Approves and then calls the receiving contract */\r\n    \r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\r\n        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\r\n        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\r\n        require(_spender.call(bytes4(bytes32(keccak256(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData));\r\n        return true;\r\n    }\r\n\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_initialAmount\",\"type\":\"uint256\"},{\"name\":\"_tokenName\",\"type\":\"string\"},{\"name\":\"_decimalUnits\",\"type\":\"uint8\"},{\"name\":\"_tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "NiMingToken", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000012c221cc6a0000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000653706f7765720000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000453706f7200000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://b17ca4b02192fc2576450aa2ba9b65a0a123a44cfd7d6d5d6a17407ecd6d225f"}