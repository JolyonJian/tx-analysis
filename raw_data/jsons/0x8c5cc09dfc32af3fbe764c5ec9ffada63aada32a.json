{"SourceCode": "pragma solidity ^0.4.16;\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\r\n\r\ncontract TokenERC20 {\r\n    // \u672ctoken\u7684\u516c\u5171\u53d8\u91cf\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 18;\r\n    // 18\u4f4d\u5c0f\u6570\u70b9\uff0c\u5c3d\u91cf\u4e0d\u4fee\u6539\r\n    uint256 public totalSupply;\r\n\r\n    // \u4f59\u989d\u6570\u7ec4\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance; //2\u7ef4\u6570\u7ec4\u9650\u989d\r\n\r\n    //Token\u8f6c\u79fb\u4e8b\u4ef6 This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    // \u84b8\u53d1\u67d0\u4e2a\u8d26\u6237\u7684token This notifies clients about the amount burnt\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    /**\r\n     * Constructor function\r\n     *\r\n     * \u521d\u59cb\u5316 \u5408\u7ea6 Initializes contract with initial supply tokens to the creator of the contract\r\n     */\r\n    function TokenERC20(\r\n        uint256 initialSupply,\r\n        string tokenName,\r\n        string tokenSymbol\r\n    ) public {\r\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // \u5c0f\u6570\u53d8\u6574\u6570 \u4e5818\u4e2a0   Update total supply with the decimal amount\r\n        balanceOf[msg.sender] = totalSupply;                // \u521d\u59cbtoken\u6570\u91cf Give the creator all initial tokens\r\n        name = tokenName;                                   // \u8bbe\u7f6etoken\u540d\u79f0  Set the name for display purposes\r\n        symbol = tokenSymbol;                               // \u8bbe\u7f6etoken\u7b26\u53f7 Set the symbol for display purposes\r\n    }\r\n\r\n    /**\r\n     * \u8d60\u9001\u8d27\u5e01 Internal transfer, only can be called by this contract\r\n \t\u4ed8\u6b3e\u5730\u5740\uff0c\u6536\u6b3e\u5730\u5740\uff0c\u6570\u91cf\r\n     */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        // \u786e\u5b9a\u6536\u6b3e\u5730\u5740\u5b58\u5728  Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_to != 0x0);\r\n        // \u68c0\u67e5\u4ed8\u6b3e\u5730\u5740\u662f\u5426\u6709\u8db3\u591f\u7684\u4f59\u989d Check if the sender has enough\r\n        require(balanceOf[_from] >= _value);\r\n        //\u68c0\u67e5\u6536\u6b3e\u5730\u5740\u6536\u5230\u7684\u91d1\u989d\u662f\u5426\u662f\u8d1f\u6570  Check for overflows\r\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\r\n        //\u6536\u6b3e\u5730\u5740\u548c\u4ed8\u6b3e\u5730\u5740\u7684\u603b\u989d  Save this for an assertion in the future\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        // \u4ed8\u6b3e\u5730\u5740\u4e2d\u7684\u4f59\u989d-\u4ed8\u6b3e\u91d1\u989d  Subtract from the sender\r\n        balanceOf[_from] -= _value;\r\n        // \u6536\u6b3e\u5730\u5740\u4e2d\u7684\u4f59\u989d+\u4ed8\u6b3e\u91d1\u989d Add the same to the recipient\r\n        balanceOf[_to] += _value;\r\n        emit Transfer(_from, _to, _value);\r\n        // \u5224\u65ad\u4ed8\u6b3e\u884c\u4e3a\u540e\u4e24\u4e2a\u8d26\u6237\u7684\u603b\u989d\u662f\u5426\u53d1\u751f\u53d8\u5316   Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens\r\n     *\u4ece\u5f53\u524d\u8d26\u6237\u5411\u5176\u4ed6\u8d26\u6237\u53d1\u9001token\r\n     * Send `_value` tokens to `_to` from your account\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transfer(address _to, uint256 _value) public {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens from other address\r\n     *\r\n     * Send `_value` tokens to `_to` on behalf of `_from`\r\n     *\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);     // \u68c0\u67e5\u9650\u989d Check allowance\r\n        allowance[_from][msg.sender] -= _value;  //\u51cf\u5c11\u76f8\u5e94\u7684\u9650\u989d\r\n        _transfer(_from, _to, _value);  //\u8c03\u7528\u8c03\u7528\u4ea4\u6613\uff0c\u5b8c\u6210\u4ea4\u6613\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * \u8bbe\u7f6e\u8d26\u6237\u9650\u989d  Set allowance for other address\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     */\r\n    function approve(address _spender, uint256 _value) public\r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * \u8bbe\u7f6e\u5176\u4ed6\u8d26\u6237\u9650\u989d Set allowance for other address and notify\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     * @param _extraData some extra information to send to the approved contract\r\n     */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n        public\r\n        returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens\r\n     *\u84b8\u53d1\u81ea\u5df1\u7684token\r\n     * Remove `_value` tokens from the system irreversibly\r\n     *\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);   //\u5224\u65ad\u4f7f\u7528\u8005\u7684\u4f59\u989d\u662f\u5426\u5145\u8db3 Check if the sender has enough\r\n        balanceOf[msg.sender] -= _value;            //\u51cf\u6389token Subtract from the sender\r\n        totalSupply -= _value;                      //\u51cf\u6389\u603btaoken\u6570 Updates totalSupply\r\n        emit Burn(msg.sender, _value);              //\u89e6\u53d1Burn\u4e8b\u4ef6\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens from other account\r\n     *\u84b8\u53d1\u522b\u4eba\u7684token\r\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n     *\r\n     * @param _from the address of the sender\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        require(balanceOf[_from] >= _value);                // \u68c0\u67e5\u522b\u4eba\u7684\u4f59\u989d\u662f\u5426\u5145\u8db3  Check if the targeted balance is enough\r\n        require(_value <= allowance[_from][msg.sender]);    // \u68c0\u67e5\u9650\u989d\u662f\u5426\u5145\u8db3 Check allowance\r\n        balanceOf[_from] -= _value;                         // \u84b8\u53d1token Subtract from the targeted balance\r\n        allowance[_from][msg.sender] -= _value;             // \u53bb\u9664\u9650\u989d Subtract from the sender's allowance\r\n        totalSupply -= _value;                              // \u51cf\u6389\u603btaoken\u6570Update totalSupply\r\n        emit Burn(_from, _value);\t\t\t    //\u89e6\u53d1Burn\u4e8b\u4ef6\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n contract mcs is owned, TokenERC20{\r\n\r\n    bool public freeze=true;\r\n\r\n    function mcs() TokenERC20(600000000, \"Magicstonelink\", \"MCS\") public {}\r\n\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require (freeze);\r\n        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\r\n        require (balanceOf[_from] >= _value);               // Check if the sender has enough\r\n        require (balanceOf[_to] + _value >= balanceOf[_to]); // Check for overflows\r\n\t    uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        // \u4ed8\u6b3e\u5730\u5740\u4e2d\u7684\u4f59\u989d-\u4ed8\u6b3e\u91d1\u989d  Subtract from the sender\r\n        balanceOf[_from] -= _value;                         // Subtract from the sender\r\n        balanceOf[_to] += _value;                           // Add the same to the recipient\r\n        emit Transfer(_from, _to, _value);\r\n        // \u5224\u65ad\u4ed8\u6b3e\u884c\u4e3a\u540e\u4e24\u4e2a\u8d26\u6237\u7684\u603b\u989d\u662f\u5426\u53d1\u751f\u53d8\u5316   Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n\r\n    function setfreeze(bool state) onlyOwner public{\r\n        freeze=state;\r\n    }\r\n }", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"freeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setfreeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]", "ContractName": "mcs", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://c5560c099ea856541d1ad8766fb4bff1ee28d2d3337ff956b2a9d136c64bafda"}