{"SourceCode": "// File: @openzeppelin/contracts/utils/cryptography/MerkleProof.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/MerkleProof.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev These functions deal with verification of Merkle Trees proofs.\r\n *\r\n * The proofs can be generated using the JavaScript library\r\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\r\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\r\n *\r\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\r\n */\r\nlibrary MerkleProof {\r\n    /**\r\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\r\n     * defined by `root`. For this, a `proof` must be provided, containing\r\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\r\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\r\n     */\r\n    function verify(\r\n        bytes32[] memory proof,\r\n        bytes32 root,\r\n        bytes32 leaf\r\n    ) internal pure returns (bool) {\r\n        return processProof(proof, leaf) == root;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\r\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\r\n     * hash matches the root of the tree. When processing the proof, the pairs\r\n     * of leafs & pre-images are assumed to be sorted.\r\n     *\r\n     * _Available since v4.4._\r\n     */\r\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\r\n        bytes32 computedHash = leaf;\r\n        for (uint256 i = 0; i < proof.length; i++) {\r\n            bytes32 proofElement = proof[i];\r\n            if (computedHash <= proofElement) {\r\n                // Hash(current computed hash + current element of the proof)\r\n                computedHash = _efficientHash(computedHash, proofElement);\r\n            } else {\r\n                // Hash(current element of the proof + current computed hash)\r\n                computedHash = _efficientHash(proofElement, computedHash);\r\n            }\r\n        }\r\n        return computedHash;\r\n    }\r\n\r\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\r\n        assembly {\r\n            mstore(0x00, a)\r\n            mstore(0x20, b)\r\n            value := keccak256(0x00, 0x40)\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/Pausable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev _Available since v3.1._\r\n */\r\ninterface IERC1155Receiver is IERC165 {\r\n    /**\r\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\r\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\r\n     *\r\n     * NOTE: To accept the transfer, this must return\r\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n     * (i.e. 0xf23a6e61, or its own function selector).\r\n     *\r\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\r\n     * @param from The address which previously owned the token\r\n     * @param id The ID of the token being transferred\r\n     * @param value The amount of tokens being transferred\r\n     * @param data Additional data with no specified format\r\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\r\n     */\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n\r\n    /**\r\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\r\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\r\n     * been updated.\r\n     *\r\n     * NOTE: To accept the transfer(s), this must return\r\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n     * (i.e. 0xbc197c81, or its own function selector).\r\n     *\r\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\r\n     * @param from The address which previously owned the token\r\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\r\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\r\n     * @param data Additional data with no specified format\r\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\r\n     */\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/IERC1155.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\r\n     */\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n    /**\r\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n     * transfers.\r\n     */\r\n    event TransferBatch(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256[] ids,\r\n        uint256[] values\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\r\n     * `approved`.\r\n     */\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\r\n     *\r\n     * If an {URI} event was emitted for `id`, the standard\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\r\n     * returned by {IERC1155MetadataURI-uri}.\r\n     */\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\r\n        external\r\n        view\r\n        returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `operator` cannot be the caller.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata amounts,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\r\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155MetadataURI is IERC1155 {\r\n    /**\r\n     * @dev Returns the URI for token type `id`.\r\n     *\r\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\r\n     * clients with the actual token type ID.\r\n     */\r\n    function uri(uint256 id) external view returns (string memory);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/ERC1155.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the basic standard multi-token.\r\n * See https://eips.ethereum.org/EIPS/eip-1155\r\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\r\n *\r\n * _Available since v3.1._\r\n */\r\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\r\n    using Address for address;\r\n\r\n    // Mapping from token ID to account balances\r\n    mapping(uint256 => mapping(address => uint256)) private _balances;\r\n\r\n    // Mapping from account to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\r\n    string private _uri;\r\n\r\n    /**\r\n     * @dev See {_setURI}.\r\n     */\r\n    constructor(string memory uri_) {\r\n        _setURI(uri_);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC1155).interfaceId ||\r\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155MetadataURI-uri}.\r\n     *\r\n     * This implementation returns the same URI for *all* token types. It relies\r\n     * on the token type ID substitution mechanism\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\r\n     *\r\n     * Clients calling this function must replace the `\\{id\\}` substring with the\r\n     * actual token type ID.\r\n     */\r\n    function uri(uint256) public view virtual override returns (string memory) {\r\n        return _uri;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\r\n        require(account != address(0), \"ERC1155: balance query for the zero address\");\r\n        return _balances[id][account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-balanceOfBatch}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256[] memory)\r\n    {\r\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\r\n\r\n        uint256[] memory batchBalances = new uint256[](accounts.length);\r\n\r\n        for (uint256 i = 0; i < accounts.length; ++i) {\r\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\r\n        }\r\n\r\n        return batchBalances;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        _setApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[account][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) public virtual override {\r\n        require(\r\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\r\n            \"ERC1155: caller is not owner nor approved\"\r\n        );\r\n        _safeTransferFrom(from, to, id, amount, data);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-safeBatchTransferFrom}.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) public virtual override {\r\n        require(\r\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\r\n            \"ERC1155: transfer caller is not owner nor approved\"\r\n        );\r\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\r\n\r\n        uint256 fromBalance = _balances[id][from];\r\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\r\n        unchecked {\r\n            _balances[id][from] = fromBalance - amount;\r\n        }\r\n        _balances[id][to] += amount;\r\n\r\n        emit TransferSingle(operator, from, to, id, amount);\r\n\r\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\r\n    }\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\r\n\r\n        for (uint256 i = 0; i < ids.length; ++i) {\r\n            uint256 id = ids[i];\r\n            uint256 amount = amounts[i];\r\n\r\n            uint256 fromBalance = _balances[id][from];\r\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\r\n            unchecked {\r\n                _balances[id][from] = fromBalance - amount;\r\n            }\r\n            _balances[id][to] += amount;\r\n        }\r\n\r\n        emit TransferBatch(operator, from, to, ids, amounts);\r\n\r\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets a new URI for all token types, by relying on the token type ID\r\n     * substitution mechanism\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\r\n     *\r\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\r\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\r\n     * clients with the token type ID.\r\n     *\r\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\r\n     * interpreted by clients as\r\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\r\n     * for token type ID 0x4cce0.\r\n     *\r\n     * See {uri}.\r\n     *\r\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\r\n     * this function emits no events.\r\n     */\r\n    function _setURI(string memory newuri) internal virtual {\r\n        _uri = newuri;\r\n    }\r\n\r\n    /**\r\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _mint(\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(to != address(0), \"ERC1155: mint to the zero address\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\r\n\r\n        _balances[id][to] += amount;\r\n        emit TransferSingle(operator, address(0), to, id, amount);\r\n\r\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\r\n    }\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _mintBatch(\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(to != address(0), \"ERC1155: mint to the zero address\");\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\r\n\r\n        for (uint256 i = 0; i < ids.length; i++) {\r\n            _balances[ids[i]][to] += amounts[i];\r\n        }\r\n\r\n        emit TransferBatch(operator, address(0), to, ids, amounts);\r\n\r\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens of token type `id` from `from`\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `from` must have at least `amount` tokens of token type `id`.\r\n     */\r\n    function _burn(\r\n        address from,\r\n        uint256 id,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC1155: burn from the zero address\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \"\");\r\n\r\n        uint256 fromBalance = _balances[id][from];\r\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[id][from] = fromBalance - amount;\r\n        }\r\n\r\n        emit TransferSingle(operator, from, address(0), id, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     */\r\n    function _burnBatch(\r\n        address from,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC1155: burn from the zero address\");\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\r\n\r\n        for (uint256 i = 0; i < ids.length; i++) {\r\n            uint256 id = ids[i];\r\n            uint256 amount = amounts[i];\r\n\r\n            uint256 fromBalance = _balances[id][from];\r\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\r\n            unchecked {\r\n                _balances[id][from] = fromBalance - amount;\r\n            }\r\n        }\r\n\r\n        emit TransferBatch(operator, from, address(0), ids, amounts);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `operator` to operate on all of `owner` tokens\r\n     *\r\n     * Emits a {ApprovalForAll} event.\r\n     */\r\n    function _setApprovalForAll(\r\n        address owner,\r\n        address operator,\r\n        bool approved\r\n    ) internal virtual {\r\n        require(owner != operator, \"ERC1155: setting approval status for self\");\r\n        _operatorApprovals[owner][operator] = approved;\r\n        emit ApprovalForAll(owner, operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning, as well as batched variants.\r\n     *\r\n     * The same hook is called on both single and batched variants. For single\r\n     * transfers, the length of the `id` and `amount` arrays will be 1.\r\n     *\r\n     * Calling conditions (for each `id` and `amount` pair):\r\n     *\r\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * of token type `id` will be  transferred to `to`.\r\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\r\n     * for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\r\n     * will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     * - `ids` and `amounts` have the same, non-zero length.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal virtual {}\r\n\r\n    function _doSafeTransferAcceptanceCheck(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) private {\r\n        if (to.isContract()) {\r\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\r\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\r\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\r\n                }\r\n            } catch Error(string memory reason) {\r\n                revert(reason);\r\n            } catch {\r\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function _doSafeBatchTransferAcceptanceCheck(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) private {\r\n        if (to.isContract()) {\r\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\r\n                bytes4 response\r\n            ) {\r\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\r\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\r\n                }\r\n            } catch Error(string memory reason) {\r\n                revert(reason);\r\n            } catch {\r\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\r\n        uint256[] memory array = new uint256[](1);\r\n        array[0] = element;\r\n\r\n        return array;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/extensions/ERC1155Pausable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/ERC1155Pausable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev ERC1155 token with pausable token transfers, minting and burning.\r\n *\r\n * Useful for scenarios such as preventing trades until the end of an evaluation\r\n * period, or having an emergency switch for freezing all token transfers in the\r\n * event of a large bug.\r\n *\r\n * _Available since v3.1._\r\n */\r\nabstract contract ERC1155Pausable is ERC1155, Pausable {\r\n    /**\r\n     * @dev See {ERC1155-_beforeTokenTransfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the contract must not be paused.\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal virtual override {\r\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\r\n\r\n        require(!paused(), \"ERC1155Pausable: token transfer while paused\");\r\n    }\r\n}\r\n\r\n// File: contracts/Ragnarok.sol\r\n\r\n\r\npragma solidity 0.8.13;\r\n\r\n\r\n\r\n\r\ncontract Ragnarok is ERC1155Pausable, Ownable {\r\n    uint256 private _tokenIds;\r\n\r\n    string public constant name = \"Ragnarok\";\r\n    string public constant symbol = \"RONIN\";\r\n\r\n    enum SaleType {\r\n        NotStarted,\r\n        FirstPublicMint,\r\n        PixelMint,\r\n        PillMint,\r\n        TeamMint,\r\n        LastPublicMint\r\n    }\r\n\r\n    address payable public defaultPlatformAddress;\r\n    address public defaultPlatformMintingAddress;\r\n    bytes32 public merkleRootOfPixelMintWhitelistAddresses;\r\n    bytes32 public merkleRootOfPillMintWhitelistAddresses;\r\n\r\n    uint256 public immutable defaultSaleStartTime;\r\n    uint256 public constant DEFAULT_MAX_MINTING_SUPPLY = 7777;\r\n    uint256 public constant DEFAULT_MAX_FIRST_PUBLIC_SUPPLY = 3900;\r\n    uint256 public constant DEFAULT_NFT_PRICE = 0.77 * 1 ether;\r\n    uint256 public constant DEFAULT_DECREASE_NFT_PRICE_AFTER_TIME_INTERVAL =\r\n        0.01925 * 1 ether;\r\n    uint256 public constant DEFAULT_TIME_INTERVAL = 7 minutes;\r\n    uint256 public constant MAX_DECREASE_ITERATIONS = 29;\r\n\r\n    uint256 public dutchAuctionLastPrice = 0;\r\n\r\n    uint256 public constant DEFAULT_INITIAL_PUBLIC_SALE = 24 hours;\r\n    uint256 public constant DEFAULT_PIXELMINT_SALE = 72 hours;\r\n    uint256 public constant DEFAULT_PILLMINT_SALE = 96 hours;\r\n    uint256 public constant DEFAULT_TEAMMINT_SALE = 120 hours;\r\n\r\n    uint256 public constant LIMIT_IN_PUBLIC_SALE_PER_WALLET = 3;\r\n    uint256 public constant TEAM_MINT_COUNT = 277;\r\n\r\n    mapping(address => uint256) public pixelMintWhitelistedAddresses;\r\n    mapping(address => uint256) public pillMintWhitelistedAddresses;\r\n    mapping(address => uint256) public firstPublicSale;\r\n    mapping(address => uint256) public lastPublicSale;\r\n    bool public teamMintWhitelistedAddress;\r\n\r\n    error InvalidBuyNFTPrice(uint256 actualPrice, uint256 invalidInputPrice);\r\n    error MaximumPublicMintSupplyReached();\r\n    error MaximumMintSupplyReached();\r\n    error MaximumMintLimitReachedByUser();\r\n    error WhitelistedAddressAlreadyClaimedNFT();\r\n    error InvalidMerkleProof();\r\n    error UnAuthorizedRequest();\r\n    error ReimbursementAlreadyClaimed();\r\n    error CannotClaimReimbursementInPublicMint();\r\n    error NothingToClaim();\r\n    error AmountReimbursementFailed();\r\n    error InvalidTokenCountZero();\r\n    error TransactionFailed();\r\n    error AirdropTransactionFailed(\r\n        address airdropAddress,\r\n        uint256 airdropAmount\r\n    );\r\n\r\n    event PaymentSentInContractForReimbursements(\r\n        uint256 amount,\r\n        address sendBy\r\n    );\r\n\r\n    event ReimbursementClaimedOfPublicSale(\r\n        address[] addresses,\r\n        uint256[] values\r\n    );\r\n    event NewURI(string newURI, address updatedBy);\r\n    event UpdatedMerkleRootOfPixelMint(bytes32 newHash, address updatedBy);\r\n    event UpdatedMerkleRootOfPillMint(bytes32 newHash, address updatedBy);\r\n    event UpdatedPlatformWalletAddress(\r\n        address newPlatformAddress,\r\n        address updatedBy\r\n    );\r\n    event UpdatedPlatformMintingAddress(\r\n        address newMintingAddress,\r\n        address updatedBy\r\n    );\r\n    event NewNFTMintedOnFirstPublicSale(\r\n        uint256 tokenID,\r\n        address mintedBy,\r\n        uint256 price\r\n    );\r\n    event NewNFTBatchMintedOnFirstPublicSale(\r\n        uint256[] tokenIDs,\r\n        address mintedBy,\r\n        uint256 price\r\n    );\r\n    event NewNFTBatchMintedOnLastPublicSale(\r\n        uint256[] tokenIDs,\r\n        address mintedBy,\r\n        uint256 price\r\n    );\r\n    event NewNFTMintedOnPixelSale(\r\n        uint256 tokenID,\r\n        address mintedBy,\r\n        uint256 price\r\n    );\r\n    event NewNFTMintedOnPillSale(\r\n        uint256 tokenID,\r\n        address mintedBy,\r\n        uint256 price\r\n    );\r\n    event GenesisNFTMinted(uint256 tokenID, address mintedBy);\r\n    event NewNFTMintedOnTeamSale(uint256[] tokenIDs, address mintedBy);\r\n    event NewNFTMintedOnLastPublicSale(\r\n        uint256 tokenID,\r\n        address mintedBy,\r\n        uint256 price\r\n    );\r\n\r\n    event WithdrawnPayment(uint256 contractBalance, address transferTo);\r\n    event UpdatedSaleStartTime(uint256 saleStartTime, address updatedBy);\r\n\r\n    constructor(\r\n        address platformAddress,\r\n        address platformMintingAddress,\r\n        bytes32 pixelMerkleRoot,\r\n        bytes32 pillMerkleRoot,\r\n        uint256 startTimestamp,\r\n        string memory newURI\r\n    ) ERC1155(newURI) {\r\n        defaultSaleStartTime = startTimestamp;\r\n        defaultPlatformAddress = payable(platformAddress);\r\n        defaultPlatformMintingAddress = platformMintingAddress;\r\n        merkleRootOfPixelMintWhitelistAddresses = pixelMerkleRoot;\r\n        merkleRootOfPillMintWhitelistAddresses = pillMerkleRoot;\r\n\r\n        _mintGenesisNFT();\r\n\r\n        emit NewURI(newURI, msg.sender);\r\n        emit UpdatedMerkleRootOfPixelMint(pixelMerkleRoot, msg.sender);\r\n        emit UpdatedMerkleRootOfPillMint(pillMerkleRoot, msg.sender);\r\n        emit UpdatedPlatformWalletAddress(platformAddress, msg.sender);\r\n        emit UpdatedPlatformMintingAddress(platformMintingAddress, msg.sender);\r\n        emit UpdatedSaleStartTime(startTimestamp, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev _mintGenesisNFT mints the NFT when the contract gets deployed\r\n     * and genesis NFT will be sent to contract creator\r\n     *\r\n     * Emits a {GenesisNFTMinted} event.\r\n     *\r\n     **/\r\n\r\n    function _mintGenesisNFT() internal {\r\n        _tokenIds++;\r\n\r\n        emit GenesisNFTMinted(_tokenIds, msg.sender);\r\n\r\n        _mint(msg.sender, _tokenIds, 1, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev getCurrentMintingCount returns the current minting count of NFT .\r\n     *\r\n     */\r\n    function getCurrentMintingCount() external view returns (uint256) {\r\n        return _tokenIds;\r\n    }\r\n\r\n    /**\r\n     * @dev getCurrentNFTMintingPrice returns the current minting price of NFT .\r\n     *\r\n     */\r\n\r\n    function getCurrentNFTMintingPrice() public view returns (uint256) {\r\n        if (block.timestamp < defaultSaleStartTime) return DEFAULT_NFT_PRICE;\r\n\r\n        uint256 calculateTimeDifference = block.timestamp -\r\n            defaultSaleStartTime;\r\n\r\n        uint256 calculateIntervals = calculateTimeDifference /\r\n            DEFAULT_TIME_INTERVAL;\r\n\r\n        if (calculateIntervals >= MAX_DECREASE_ITERATIONS) {\r\n            uint256 calculatePrice = (DEFAULT_NFT_PRICE -\r\n                (DEFAULT_DECREASE_NFT_PRICE_AFTER_TIME_INTERVAL *\r\n                    MAX_DECREASE_ITERATIONS));\r\n\r\n            return calculatePrice;\r\n        } else {\r\n            uint256 calculatePrice = (DEFAULT_NFT_PRICE -\r\n                (DEFAULT_DECREASE_NFT_PRICE_AFTER_TIME_INTERVAL *\r\n                    calculateIntervals));\r\n\r\n            return calculatePrice;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev checkSaleType returns the current sale type status.\r\n     *\r\n     */\r\n\r\n    function checkSaleType() external view returns (SaleType activeSale) {\r\n        if (block.timestamp < defaultSaleStartTime) {\r\n            return SaleType.NotStarted;\r\n        } else if (\r\n            (block.timestamp >= defaultSaleStartTime) &&\r\n            (block.timestamp <\r\n                defaultSaleStartTime + DEFAULT_INITIAL_PUBLIC_SALE)\r\n        ) {\r\n            return SaleType.FirstPublicMint;\r\n        } else if (\r\n            (block.timestamp >=\r\n                defaultSaleStartTime + DEFAULT_INITIAL_PUBLIC_SALE) &&\r\n            (block.timestamp < defaultSaleStartTime + DEFAULT_PIXELMINT_SALE)\r\n        ) {\r\n            return SaleType.PixelMint;\r\n        } else if (\r\n            (block.timestamp >=\r\n                defaultSaleStartTime + DEFAULT_PIXELMINT_SALE) &&\r\n            (block.timestamp < defaultSaleStartTime + DEFAULT_PILLMINT_SALE)\r\n        ) {\r\n            return SaleType.PillMint;\r\n        } else if (\r\n            (block.timestamp >= defaultSaleStartTime + DEFAULT_PILLMINT_SALE) &&\r\n            (block.timestamp < defaultSaleStartTime + DEFAULT_TEAMMINT_SALE)\r\n        ) {\r\n            return SaleType.TeamMint;\r\n        } else if (\r\n            (block.timestamp >= defaultSaleStartTime + DEFAULT_TEAMMINT_SALE)\r\n        ) {\r\n            return SaleType.LastPublicMint;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev updateTokenURI updates the new token URI in contract.\r\n     *\r\n     * Emits a {NewURI} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Only owner of contract can call this function\r\n     **/\r\n\r\n    function updateTokenURI(string memory newuri)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        _setURI(newuri);\r\n        emit NewURI(newuri, msg.sender);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev updatePixelMintMerkleRoot updates the pixel mint merkle hash in contract.\r\n     *\r\n     * Emits a {UpdatedMerkleRootOfPixelMint} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Only owner of contract can call this function\r\n     **/\r\n\r\n    function updatePixelMintMerkleRoot(bytes32 hash)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        merkleRootOfPixelMintWhitelistAddresses = hash;\r\n        emit UpdatedMerkleRootOfPixelMint(hash, msg.sender);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev updatePixelMintMerkleRoot updates the pill mint merkle hash in contract.\r\n     *\r\n     * Emits a {UpdatedMerkleRootOfPillMint} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Only owner of contract can call this function\r\n     **/\r\n\r\n    function updatePillMintMerkleRoot(bytes32 hash)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        merkleRootOfPillMintWhitelistAddresses = hash;\r\n        emit UpdatedMerkleRootOfPillMint(hash, msg.sender);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev updatePlatformWalletAddress updates the platform wallet address in contract.\r\n     *\r\n     * Emits a {UpdatedPlatformWalletAddress} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Only owner of contract can call this function\r\n     **/\r\n\r\n    function updatePlatformWalletAddress(address newAddress)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        defaultPlatformAddress = payable(newAddress);\r\n        emit UpdatedPlatformWalletAddress(newAddress, msg.sender);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev pauseContract is used to pause contract.\r\n     *\r\n     * Emits a {Paused} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Only the owner can call this function\r\n     **/\r\n\r\n    function pauseContract() external onlyOwner returns (bool) {\r\n        _pause();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev unpauseContract is used to unpause contract.\r\n     *\r\n     * Emits a {Unpaused} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Only the owner can call this function\r\n     **/\r\n\r\n    function unpauseContract() external onlyOwner returns (bool) {\r\n        _unpause();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev firstPublicMintingSale mints single NFT in one transaction in First Public Minting.\r\n     *\r\n     * Emits a {NewNFTMintedOnFirstPublicSale} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - User can mint max 3 NFTs in each First Public Sale\r\n     **/\r\n\r\n    function firstPublicMintingSale() external payable returns (bool) {\r\n        if (\r\n            (block.timestamp >= defaultSaleStartTime) &&\r\n            (block.timestamp <\r\n                defaultSaleStartTime + DEFAULT_INITIAL_PUBLIC_SALE)\r\n        ) {\r\n            _tokenIds++;\r\n\r\n            if (_tokenIds > DEFAULT_MAX_FIRST_PUBLIC_SUPPLY)\r\n                revert MaximumPublicMintSupplyReached();\r\n\r\n            if (firstPublicSale[msg.sender] >= LIMIT_IN_PUBLIC_SALE_PER_WALLET)\r\n                revert MaximumMintLimitReachedByUser();\r\n\r\n            uint256 getPriceOFNFT = getCurrentNFTMintingPrice();\r\n\r\n            if (getPriceOFNFT != msg.value)\r\n                revert InvalidBuyNFTPrice(getPriceOFNFT, msg.value);\r\n\r\n            dutchAuctionLastPrice = getPriceOFNFT;\r\n\r\n            firstPublicSale[msg.sender] = firstPublicSale[msg.sender] + 1;\r\n\r\n            emit NewNFTMintedOnFirstPublicSale(\r\n                _tokenIds,\r\n                msg.sender,\r\n                msg.value\r\n            );\r\n\r\n            _mint(msg.sender, _tokenIds, 1, \"\");\r\n\r\n            return true;\r\n        } else {\r\n            revert UnAuthorizedRequest();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev pixelMintingSale mints single NFT in one transaction for whitelist address in Pixel Minting.\r\n     *\r\n     * Emits a {NewNFTMintedOnPixelSale} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - User can mint 1 NFT in Pixel sale if his address is whitelisted\r\n     **/\r\n\r\n    function pixelMintingSale(bytes32[] calldata _merkleProof)\r\n        external\r\n        payable\r\n        returns (bool)\r\n    {\r\n        if (\r\n            (block.timestamp >=\r\n                defaultSaleStartTime + DEFAULT_INITIAL_PUBLIC_SALE) &&\r\n            (block.timestamp < defaultSaleStartTime + DEFAULT_PIXELMINT_SALE)\r\n        ) {\r\n            _tokenIds++;\r\n\r\n            if (dutchAuctionLastPrice != msg.value)\r\n                revert InvalidBuyNFTPrice(dutchAuctionLastPrice, msg.value);\r\n\r\n            if (pixelMintWhitelistedAddresses[msg.sender] != 0)\r\n                revert WhitelistedAddressAlreadyClaimedNFT();\r\n\r\n            bytes32 leaf = keccak256(abi.encodePacked(msg.sender));\r\n\r\n            if (\r\n                !MerkleProof.verify(\r\n                    _merkleProof,\r\n                    merkleRootOfPixelMintWhitelistAddresses,\r\n                    leaf\r\n                )\r\n            ) revert InvalidMerkleProof();\r\n\r\n            pixelMintWhitelistedAddresses[msg.sender] = 1;\r\n\r\n            emit NewNFTMintedOnPixelSale(_tokenIds, msg.sender, msg.value);\r\n\r\n            _mint(msg.sender, _tokenIds, 1, \"\");\r\n\r\n            return true;\r\n        } else {\r\n            revert UnAuthorizedRequest();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev pillMintingSale mints single NFT in one transaction for whitelist address in Pill Minting.\r\n     *\r\n     * Emits a {NewNFTMintedOnPillSale} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - User can mint 1 NFT in Pill sale if his address is whitelisted\r\n     **/\r\n\r\n    function pillMintingSale(bytes32[] calldata _merkleProof)\r\n        external\r\n        payable\r\n        returns (bool)\r\n    {\r\n        if (\r\n            (block.timestamp >=\r\n                defaultSaleStartTime + DEFAULT_PIXELMINT_SALE) &&\r\n            (block.timestamp < defaultSaleStartTime + DEFAULT_PILLMINT_SALE)\r\n        ) {\r\n            _tokenIds++;\r\n\r\n            if (pillMintWhitelistedAddresses[msg.sender] != 0)\r\n                revert WhitelistedAddressAlreadyClaimedNFT();\r\n\r\n            if ((dutchAuctionLastPrice / 2) != msg.value)\r\n                revert InvalidBuyNFTPrice(\r\n                    (dutchAuctionLastPrice / 2),\r\n                    msg.value\r\n                );\r\n\r\n            bytes32 leaf = keccak256(abi.encodePacked(msg.sender));\r\n\r\n            if (\r\n                !MerkleProof.verify(\r\n                    _merkleProof,\r\n                    merkleRootOfPillMintWhitelistAddresses,\r\n                    leaf\r\n                )\r\n            ) revert InvalidMerkleProof();\r\n\r\n            pillMintWhitelistedAddresses[msg.sender] = 1;\r\n\r\n            emit NewNFTMintedOnPillSale(_tokenIds, msg.sender, msg.value);\r\n\r\n            _mint(msg.sender, _tokenIds, 1, \"\");\r\n\r\n            return true;\r\n        } else {\r\n            revert UnAuthorizedRequest();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev teamMintingSale mints 277 NFTs in one transaction for platform wallet address in Team Minting.\r\n     *\r\n     * Emits a {NewNFTMintedOnPillSale} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Team can mint 277 NFTs once in Team sale\r\n     **/\r\n\r\n    function teamMintingSale() external returns (bool) {\r\n        if (\r\n            (block.timestamp >= defaultSaleStartTime + DEFAULT_PILLMINT_SALE) &&\r\n            (block.timestamp < defaultSaleStartTime + DEFAULT_TEAMMINT_SALE)\r\n        ) {\r\n            if (msg.sender != defaultPlatformMintingAddress)\r\n                revert UnAuthorizedRequest();\r\n            if (teamMintWhitelistedAddress)\r\n                revert WhitelistedAddressAlreadyClaimedNFT();\r\n\r\n            teamMintWhitelistedAddress = true;\r\n\r\n            uint256[] memory newIDs = new uint256[](TEAM_MINT_COUNT);\r\n            uint256[] memory newAmounts = new uint256[](TEAM_MINT_COUNT);\r\n\r\n            uint256 _internalTokenID = _tokenIds;\r\n\r\n            for (uint256 i = 0; i < TEAM_MINT_COUNT; i++) {\r\n                _internalTokenID++;\r\n\r\n                newIDs[i] = _internalTokenID;\r\n                newAmounts[i] = 1;\r\n            }\r\n\r\n            _tokenIds = _internalTokenID;\r\n\r\n            emit NewNFTMintedOnTeamSale(newIDs, msg.sender);\r\n\r\n            _mintBatch(msg.sender, newIDs, newAmounts, \"\");\r\n\r\n            return true;\r\n        } else {\r\n            revert UnAuthorizedRequest();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev lastPublicMintingSale mints the new NFT depending upon the sale type.\r\n     *\r\n     * Emits a {NewNFTMintedOnLastPublicSale} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - User can mint max 3 NFTs in Last Public Sale\r\n     **/\r\n\r\n    function lastPublicMintingSale() external payable returns (bool) {\r\n        if ((block.timestamp >= defaultSaleStartTime + DEFAULT_TEAMMINT_SALE)) {\r\n            _tokenIds++;\r\n\r\n            if (_tokenIds > DEFAULT_MAX_MINTING_SUPPLY)\r\n                revert MaximumMintSupplyReached();\r\n\r\n            if (lastPublicSale[msg.sender] >= LIMIT_IN_PUBLIC_SALE_PER_WALLET)\r\n                revert MaximumMintLimitReachedByUser();\r\n\r\n            if (dutchAuctionLastPrice != msg.value)\r\n                revert InvalidBuyNFTPrice(dutchAuctionLastPrice, msg.value);\r\n\r\n            lastPublicSale[msg.sender] = lastPublicSale[msg.sender] + 1;\r\n\r\n            emit NewNFTMintedOnLastPublicSale(_tokenIds, msg.sender, msg.value);\r\n\r\n            _mint(msg.sender, _tokenIds, 1, \"\");\r\n\r\n            return true;\r\n        } else {\r\n            revert UnAuthorizedRequest();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev firstPublicSaleBatchMint mints batch of new NFTs.\r\n     *\r\n     * Emits a {NewNFTBatchMintedOnFirstPublicSale} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - User can mint max 3 NFTs in each First Public Sale\r\n     **/\r\n\r\n    function firstPublicSaleBatchMint(uint256 tokenCount)\r\n        external\r\n        payable\r\n        returns (bool)\r\n    {\r\n        if (\r\n            (block.timestamp >= defaultSaleStartTime) &&\r\n            (block.timestamp <\r\n                defaultSaleStartTime + DEFAULT_INITIAL_PUBLIC_SALE)\r\n        ) {\r\n            if (tokenCount == 0) revert InvalidTokenCountZero();\r\n\r\n            uint256 getPriceOFNFT = getCurrentNFTMintingPrice();\r\n\r\n            if ((getPriceOFNFT * tokenCount) != msg.value)\r\n                revert InvalidBuyNFTPrice(\r\n                    (getPriceOFNFT * tokenCount),\r\n                    msg.value\r\n                );\r\n\r\n            if (\r\n                firstPublicSale[msg.sender] + tokenCount >\r\n                LIMIT_IN_PUBLIC_SALE_PER_WALLET\r\n            ) revert MaximumMintLimitReachedByUser();\r\n\r\n            firstPublicSale[msg.sender] =\r\n                firstPublicSale[msg.sender] +\r\n                tokenCount;\r\n\r\n            uint256[] memory newIDs = new uint256[](tokenCount);\r\n            uint256[] memory newAmounts = new uint256[](tokenCount);\r\n\r\n            if (_tokenIds + tokenCount > DEFAULT_MAX_FIRST_PUBLIC_SUPPLY)\r\n                revert MaximumPublicMintSupplyReached();\r\n\r\n            dutchAuctionLastPrice = getPriceOFNFT;\r\n\r\n            for (uint256 i = 0; i < tokenCount; i++) {\r\n                _tokenIds++;\r\n\r\n                newIDs[i] = _tokenIds;\r\n                newAmounts[i] = 1;\r\n            }\r\n\r\n            emit NewNFTBatchMintedOnFirstPublicSale(\r\n                newIDs,\r\n                msg.sender,\r\n                msg.value\r\n            );\r\n\r\n            _mintBatch(msg.sender, newIDs, newAmounts, \"\");\r\n\r\n            return true;\r\n        } else {\r\n            revert UnAuthorizedRequest();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev lastPublicSaleBatchMint mints batch of new NFTs.\r\n     *\r\n     * Emits a {NewNFTBatchMintedOnLastPublicSale} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - User can mint max 3 NFTs in each First Public Sale\r\n     **/\r\n\r\n    function lastPublicSaleBatchMint(uint256 tokenCount)\r\n        external\r\n        payable\r\n        returns (bool)\r\n    {\r\n        if ((block.timestamp >= defaultSaleStartTime + DEFAULT_TEAMMINT_SALE)) {\r\n            if (tokenCount == 0) revert InvalidTokenCountZero();\r\n\r\n            if (\r\n                lastPublicSale[msg.sender] + tokenCount >\r\n                LIMIT_IN_PUBLIC_SALE_PER_WALLET\r\n            ) revert MaximumMintLimitReachedByUser();\r\n\r\n            if ((dutchAuctionLastPrice * tokenCount) != msg.value)\r\n                revert InvalidBuyNFTPrice(\r\n                    (dutchAuctionLastPrice * tokenCount),\r\n                    msg.value\r\n                );\r\n\r\n            lastPublicSale[msg.sender] =\r\n                lastPublicSale[msg.sender] +\r\n                tokenCount;\r\n\r\n            uint256[] memory newIDs = new uint256[](tokenCount);\r\n            uint256[] memory newAmounts = new uint256[](tokenCount);\r\n\r\n            if (_tokenIds + tokenCount > DEFAULT_MAX_MINTING_SUPPLY)\r\n                revert MaximumMintSupplyReached();\r\n\r\n            for (uint256 i = 0; i < tokenCount; i++) {\r\n                _tokenIds++;\r\n\r\n                newIDs[i] = _tokenIds;\r\n                newAmounts[i] = 1;\r\n            }\r\n\r\n            emit NewNFTBatchMintedOnLastPublicSale(\r\n                newIDs,\r\n                msg.sender,\r\n                msg.value\r\n            );\r\n\r\n            _mintBatch(msg.sender, newIDs, newAmounts, \"\");\r\n\r\n            return true;\r\n        } else {\r\n            revert UnAuthorizedRequest();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev sendPaymentForReimbursement is used to send reimbursement payment on contract for FirstPublicMint buyers can claim it.\r\n     *\r\n     * Emits a {PaymentSentInContractForReimbursements} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Only the defaultPlatformAddress can call this function\r\n     **/\r\n\r\n    function sendPaymentForReimbursement() external payable returns (bool) {\r\n        if (msg.sender != defaultPlatformAddress) revert UnAuthorizedRequest();\r\n\r\n        if (msg.value == 0) revert UnAuthorizedRequest();\r\n\r\n        emit PaymentSentInContractForReimbursements(msg.value, msg.sender);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev withdrawPayment is used to withdraw payment from contract.\r\n     *\r\n     * Emits a {WithdrawnPayment} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Only the defaultPlatformAddress can call this function\r\n     **/\r\n\r\n    function withdrawPayment() external returns (bool) {\r\n        if (msg.sender != defaultPlatformAddress) revert UnAuthorizedRequest();\r\n\r\n        uint256 contractBalance = address(this).balance;\r\n\r\n        if (contractBalance == 0) revert UnAuthorizedRequest();\r\n\r\n        (bool sent, ) = defaultPlatformAddress.call{value: contractBalance}(\"\");\r\n\r\n        if (!sent) revert TransactionFailed();\r\n\r\n        emit WithdrawnPayment(contractBalance, msg.sender);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev reimbursementAirdrop is used to transfer reimbursement payment to\r\n     * buyers of First Public Sale\r\n     * if they bought the NFT at high price. They'll get return of difference\r\n     * of bought price and last price\r\n     *\r\n     * Emits a {ReimbursementClaimedOfPublicSale} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Only the First Public Mint holders can claim funds once\r\n     **/\r\n\r\n    function reimbursementAirdrop(\r\n        address[] memory addresses,\r\n        uint256[] memory values\r\n    ) external returns (bool) {\r\n        if (\r\n            (block.timestamp >= defaultSaleStartTime) &&\r\n            (block.timestamp <\r\n                defaultSaleStartTime + DEFAULT_INITIAL_PUBLIC_SALE)\r\n        ) revert CannotClaimReimbursementInPublicMint();\r\n\r\n        if (msg.sender != defaultPlatformAddress) revert UnAuthorizedRequest();\r\n\r\n        if (addresses.length != values.length) revert UnAuthorizedRequest();\r\n\r\n        for (uint256 i = 0; i < addresses.length; i++) {\r\n            (bool sent, ) = addresses[i].call{value: values[i]}(\"\");\r\n            if (!sent) revert AirdropTransactionFailed(addresses[i], values[i]);\r\n        }\r\n\r\n        emit ReimbursementClaimedOfPublicSale(addresses, values);\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"platformAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"platformMintingAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"pixelMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"pillMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airdropAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"airdropAmount\",\"type\":\"uint256\"}],\"name\":\"AirdropTransactionFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountReimbursementFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotClaimReimbursementInPublicMint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actualPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"invalidInputPrice\",\"type\":\"uint256\"}],\"name\":\"InvalidBuyNFTPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMerkleProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenCountZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaximumMintLimitReachedByUser\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaximumMintSupplyReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaximumPublicMintSupplyReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NothingToClaim\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReimbursementAlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransactionFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnAuthorizedRequest\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WhitelistedAddressAlreadyClaimedNFT\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mintedBy\",\"type\":\"address\"}],\"name\":\"GenesisNFTMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIDs\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mintedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"NewNFTBatchMintedOnFirstPublicSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIDs\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mintedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"NewNFTBatchMintedOnLastPublicSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mintedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"NewNFTMintedOnFirstPublicSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mintedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"NewNFTMintedOnLastPublicSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mintedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"NewNFTMintedOnPillSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mintedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"NewNFTMintedOnPixelSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIDs\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mintedBy\",\"type\":\"address\"}],\"name\":\"NewNFTMintedOnTeamSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"updatedBy\",\"type\":\"address\"}],\"name\":\"NewURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sendBy\",\"type\":\"address\"}],\"name\":\"PaymentSentInContractForReimbursements\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"ReimbursementClaimedOfPublicSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"newHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"updatedBy\",\"type\":\"address\"}],\"name\":\"UpdatedMerkleRootOfPillMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"newHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"updatedBy\",\"type\":\"address\"}],\"name\":\"UpdatedMerkleRootOfPixelMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMintingAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"updatedBy\",\"type\":\"address\"}],\"name\":\"UpdatedPlatformMintingAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPlatformAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"updatedBy\",\"type\":\"address\"}],\"name\":\"UpdatedPlatformWalletAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"saleStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"updatedBy\",\"type\":\"address\"}],\"name\":\"UpdatedSaleStartTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"transferTo\",\"type\":\"address\"}],\"name\":\"WithdrawnPayment\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_DECREASE_NFT_PRICE_AFTER_TIME_INTERVAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_INITIAL_PUBLIC_SALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_MAX_FIRST_PUBLIC_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_MAX_MINTING_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_NFT_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_PILLMINT_SALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_PIXELMINT_SALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_TEAMMINT_SALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_TIME_INTERVAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIMIT_IN_PUBLIC_SALE_PER_WALLET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_DECREASE_ITERATIONS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TEAM_MINT_COUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkSaleType\",\"outputs\":[{\"internalType\":\"enum Ragnarok.SaleType\",\"name\":\"activeSale\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultPlatformAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultPlatformMintingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultSaleStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dutchAuctionLastPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstPublicMintingSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"firstPublicSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenCount\",\"type\":\"uint256\"}],\"name\":\"firstPublicSaleBatchMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentMintingCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentNFTMintingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPublicMintingSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastPublicSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenCount\",\"type\":\"uint256\"}],\"name\":\"lastPublicSaleBatchMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRootOfPillMintWhitelistAddresses\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRootOfPixelMintWhitelistAddresses\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pillMintWhitelistedAddresses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"pillMintingSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pixelMintWhitelistedAddresses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"pixelMintingSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"reimbursementAirdrop\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendPaymentForReimbursement\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamMintWhitelistedAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamMintingSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"updatePillMintMerkleRoot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"updatePixelMintMerkleRoot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updatePlatformWalletAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newuri\",\"type\":\"string\"}],\"name\":\"updateTokenURI\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawPayment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Ragnarok", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007910f0923d6e98290c022e01e9b6a10827f1d0df0000000000000000000000006ab8dca25337a1802cfb85d4999234dba71725b4ddaac2f711d324e054766488df719ce30e72ef30e9d177ccb6e81ecdcf71ae710f2a7e1309a3a72f36ff779d697e0cfeb3e0a0526d54e9eb0217db4d3293c57f000000000000000000000000000000000000000000000000000000006269769000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000003968747470733a2f2f70726f7465637465642d6f617369732d32353933362e6865726f6b756170702e636f6d2f6e66742f7b69647d2e6a736f6e00000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4cd49df87662f619ba0a8b621c7fa9dd86011591c6adb0f1aa30be38d18e47cc"}