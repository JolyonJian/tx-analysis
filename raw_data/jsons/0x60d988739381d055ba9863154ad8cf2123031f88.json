{"SourceCode": "pragma solidity ^ 0.4.24;\r\n\r\n// ----------------------------------------------------------------------------\r\n// \u5b89\u5168\u7684\u52a0\u51cf\u4e58\u9664\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n\tfunction add(uint a, uint b) internal pure returns(uint c) {\r\n\t\tc = a + b;\r\n\t\trequire(c >= a);\r\n\t}\r\n\r\n\tfunction sub(uint a, uint b) internal pure returns(uint c) {\r\n\t\trequire(b <= a);\r\n\t\tc = a - b;\r\n\t}\r\n\r\n\tfunction mul(uint a, uint b) internal pure returns(uint c) {\r\n\t\tc = a * b;\r\n\t\trequire(a == 0 || c / a == b);\r\n\t}\r\n\r\n\tfunction div(uint a, uint b) internal pure returns(uint c) {\r\n\t\trequire(b > 0);\r\n\t\tc = a / b;\r\n\t}\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n\tfunction totalSupply() public constant returns(uint);\r\n\r\n\tfunction balanceOf(address tokenOwner) public constant returns(uint balance);\r\n\r\n\tfunction allowance(address tokenOwner, address spender) public constant returns(uint remaining);\r\n\r\n\tfunction transfer(address to, uint tokens) public returns(bool success);\r\n\r\n\tfunction approve(address spender, uint tokens) public returns(bool success);\r\n\r\n\tfunction transferFrom(address from, address to, uint tokens) public returns(bool success);\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint tokens);\r\n\tevent Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract EttToken{\r\n    function tokenAdd(address user,uint tokens) public returns(bool success);\r\n    function tokenSub(address user,uint tokens) public returns(bool success);\r\n    function balanceOf(address tokenOwner) public constant returns(uint balance);\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// \u6838\u5fc3\u7c7b\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract USDT is ERC20Interface{\r\n\tusing SafeMath for uint;\r\n\r\n\tstring public symbol;\r\n\tstring public name;\r\n\tuint8 public decimals;\r\n\tuint _totalSupply;//\u603b\u53d1\u884c\r\n\r\n\r\n//\tuint public sellPrice; //\u51fa\u552e\u4ef7\u683c 1\u679a\u4ee3\u5e01\u6362\u591a\u5c11\u4ee5\u592a /1000\r\n\tuint public buyPrice; //\u8d2d\u4e70\u4ef7\u683c \u591a\u5c11\u4ee5\u592a\u53ef\u8d2d\u4e701\u679a\u4ee3\u5e01 /1000\r\n\r\n\t\r\n\tuint public transper; //\u8f6c\u8d26\u624b\u7eed\u8d39 /3%\r\n\t\r\n\tbool public actived;\r\n\r\n\tuint public teamper1;//\u56e2\u961f\u5956% \r\n\tuint public teamper2;//\u56e2\u961f\u5956% \r\n\t\r\n\t//uint public sellper;//15\r\n    uint public sysinteth;\r\n\r\n\tmapping(address => uint) balances;//\u603b\u8ba1\r\n\t//mapping(address => uint) myeth;//\u672c\u91d1\r\n//\tmapping(address => uint) froeth;//\u51bb\u7ed3\r\n\t//mapping(address => uint) used;\r\n\tmapping(address => mapping(address => uint)) allowed;\r\n\r\n\t/* \u51bb\u7ed3\u8d26\u6237 */\r\n\tmapping(address => bool) public frozenAccount;\r\n\r\n\t//\u4e0a\u5bb6\u5730\u5740\r\n\tmapping(address => address) public fromaddr;\r\n\t//\u7ba1\u7406\u5458\u5e10\u53f7\r\n\tmapping(address => bool) public admins;\r\n\t// \u8bb0\u5f55\u5404\u4e2a\u8d26\u6237\u7684\u589e\u91cf\u65f6\u95f4\r\n\tmapping(address => uint) public crontime;\r\n\t// \u6316\u77ff\u6b21\u6570\r\n//\tmapping(address => uint) public mintnum;\r\n\tuint[] public permans;\r\n\tmapping(address => uint) public teamget;\r\n\r\n\tstruct sunsdata{\r\n\t\tmapping(uint => uint) n;\t\r\n\t\tmapping(uint => uint) n_effective;\r\n\t}\r\n\t\r\n    mapping(address => sunsdata)  suns;\r\n    address public intertoken;\r\n    modifier onlyInterface {\r\n        require(intertoken != address(0));\r\n\t\trequire(msg.sender == intertoken);\r\n\t\t_;\r\n\t}\r\n\t/* \u901a\u77e5 */\r\n\tevent FrozenFunds(address target, bool frozen);\r\n\taddress public owner;\r\n\taddress public financer;\r\n    modifier onlyOwner {\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n\tmodifier  onlyFinancer {\r\n\t\trequire(msg.sender == financer);\r\n\t\t_;\r\n\t}\r\n\t\r\n\tstruct record{\r\n\t\t\t//\u5f53\u524d\u53ef\u63d0\u73b0\u672c\u91d1\r\n\t\t\tuint can_draw_capital;\r\n\t\t\t//\u5f53\u524d\u5df2\u6295\u8d44\u672c\u91d1\r\n\t\t\tuint not_draw_capital;\r\n\t\t\t//\u603b\u7684\u5e94\u91ca\u653e\u5229\u6da6\r\n\t\t\tuint total_profit;\r\n\t\t\t//\u603b\u7684\u5df2\u91ca\u653e\u5229\u6da6\r\n\t\t\tuint  releasd_profit;\r\n\t\t\t//\u6295\u8d44\u65f6\u95f4\r\n\t\t\tuint last_investdate;\r\n\t\t\tuint history_releasd_profit;\r\n\t\t}\r\n\t\tmapping(address=>record) public user_inverst_record;\r\n\t\t\r\n\t\tstruct plan{\r\n\t\t\tuint account;\r\n\t\t\tuint times;\r\n\t\t}\r\n\t\tmapping(uint => plan) public plans;\r\n\t\t\r\n\t\tstruct node_profit{\r\n\t\t\t\tuint menber_counts;\r\n\t\t\t\tuint percent;\r\n\t\t}\r\n\t\tmapping(uint => node_profit) public node_profits;\r\n\t//\tuint public min_investment;\r\n\t\t\t\t\r\n\r\n\t\tuint  public per;\r\n\t\tuint public OnceWidrawTime;\r\n\t\tmapping(address => bool) _effective_son;\r\n\t\tstruct quit_conf{\r\n\t\t\tuint  interval;\r\n\t\t\tuint rate1;\r\n\t\t\tuint rate2;\r\n\t\t}\r\n\t\tquit_conf public quit_config;\r\n\t\tuint teamPrice1;\r\n\t\tuint teamPrice2;\r\n\t\t\r\n        mapping(address=>bool) public isleader;\r\n        mapping(address =>uint) public leader_eth;\r\n        \r\n        mapping(address=>uint) public userineth;\r\n\t\taddress [] public leaders;\r\n\t\tEttToken public ett;\r\n\t\tuint public ettRate;\r\n\t\tuint generation;\r\n\t\tuint generation_team;\r\n\t\tmapping(address=>address) public ethtop;\r\n\t// ------------------------------------------------------------------------\r\n\t// Constructor\r\n\t// ------------------------------------------------------------------------\r\n\tconstructor(EttToken _ettAddress,address [] _supernodes) public {\r\n\r\n\t\tsymbol = \"USDT\";\r\n\t\tname = \"USDT Coin\";\r\n\t\tdecimals = 18;\r\n\t\t_totalSupply = 1000000000 ether;\r\n\t\tbuyPrice = 138 ether; //\u8d2d\u4e70\u4ef7\u683c 1eth can buy how much mt\r\n\t\t\r\n\r\n\t\ttransper = uint(0);//\u8f6c\u8d26\u624b\u7eed\u8d39 /100\r\n\r\n\t\tteamper1 = 10;//\u56e2\u961f\u5956% /100\r\n\t\tteamper2 = 20;//\u56e2\u961f\u5956% /100\r\n\r\n\t\t//sellper = 85;// /100\r\n\t\tactived = true;\r\n\r\n\r\n        permans = [40,10,12,6];\r\n        //permans = [3,3,2,2];//test\r\n\t\tbalances[this] = _totalSupply;\r\n\t\towner = msg.sender;\r\n\t\tfinancer = msg.sender;\r\n\t\t\r\n        \r\n\t\tper = 1;\r\n\t\tplans[1].account = 7000 ether;\r\n\t\tplans[1].times = 2 ;\r\n\t\tplans[2].account = 35000 ether;\r\n\t\tplans[2].times = 3 ;\r\n\t\tplans[3].account = 70000 ether;\r\n\t\tplans[3].times = 4 ;\r\n\t\tplans[4].account = 210000 ether;\r\n\t\tplans[4].times = 5 ;\r\n\t\r\n\t\tfor(uint i=1;i<=16;i++){\r\n\t\t\tnode_profits[i].menber_counts = i;\r\n\t\t\tif(i==1){\r\n\t\t\t\tnode_profits[i].percent = 100;\r\n\t\t\t}else if(i==2){\r\n\t\t\t\tnode_profits[i].percent = 20;\r\n\t\t\t}else if(i==3){\r\n\t\t\t\tnode_profits[i].percent = 15;\r\n\t\t\t}else if(i == 4){\r\n\t\t\t\tnode_profits[i].percent = 10;\r\n\t\t\t}else{\r\n\t\t\t\tnode_profits[i].percent = 5;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tOnceWidrawTime = 24 hours;\r\n\t\t//OnceWidrawTime = 10 seconds;\r\n\t\t//min_investment = plans[1].account ;\r\n\t\t//quit_config.interval = 30 days\r\n\t\t//quit_config.interval = 30 seconds;\r\n\t\tquit_config.interval = 30 days;\r\n\t\tquit_config.rate1 = 5;\r\n\t\tquit_config.rate2 = 1;\r\n\t\tteamPrice1 = 100000 ether;\r\n\t\tteamPrice2 = 500000 ether;\r\n\t\tettRate = 70 ether;\r\n\t\tgeneration = 16;\r\n\t\tgeneration_team = 8;\r\n\t\tett = _ettAddress;\r\n\t\tfor(uint m;m<_supernodes.length;m++){\r\n\t\t    addLeader(_supernodes[m]);\r\n\t\t}\r\n\t\t\r\n\t\temit Transfer(address(0), owner, _totalSupply);\r\n\r\n\t}\r\n\r\n\t/* \u83b7\u53d6\u7528\u6237\u91d1\u989d */\r\n\tfunction balanceOf(address user) public view returns(uint balance) {\r\n\t\treturn balances[user];\r\n\t}\r\n\tfunction ethbalance(address user) public view returns(uint _balance) {\r\n\t    \r\n\t\t_balance = address(user).balance;\r\n\t}\r\n\r\n\t/*\r\n\t * \u83b7\u53d6\u7528\u6237\u7684\u6316\u77ff\u65f6\u95f4\r\n\t * @param {Object} address\r\n\t */\r\n\tfunction getaddtime(address _addr) public view returns(uint) {\r\n\t\tif(crontime[_addr] < 2) {\r\n\t\t\treturn(0);\r\n\t\t}else{\r\n\t\t    return(crontime[_addr]);\r\n\t\t}\r\n\t\t\r\n\t}\r\n\tfunction getmy(address user) public view returns(\r\n\t    uint myblance,\r\n\t    uint meth,\r\n\t    uint mytime,\r\n\t    uint bprice,\r\n\t    uint tmoney,\r\n\t    uint myineth,\r\n\t    bool _isleader,\r\n\t    uint _leader_eth,\r\n\t    uint [10] _inverst\r\n\t    /*\r\n\t    uint _can_draw_capital,\r\n\t    uint _not_draw_capital,\r\n\t    uint _last_investdate,\r\n\t    uint _total_profit,\r\n\t    uint _releasd_profit,\r\n\t    uint _history_releasd_profit\r\n\t    */\r\n\t){\r\n\t    address _user = user;\r\n\t    myblance = balances[_user];//0\r\n\t    meth = ethbalance(_user);//2\r\n\t    mytime = crontime[_user];//5\r\n\t    bprice = buyPrice;//6\r\n\t    tmoney = balances[this];//9\r\n\t    myineth = userineth[_user];\r\n\t    _isleader = isleader[_user];\r\n\t    _leader_eth = leader_eth[_user];\r\n\t    \r\n\t    _inverst[0]=user_inverst_record[_user].can_draw_capital;\r\n\t    _inverst[1]=user_inverst_record[_user].last_investdate;\r\n\t    _inverst[2]=user_inverst_record[_user].not_draw_capital;\r\n\t    _inverst[3]=user_inverst_record[_user].total_profit;\r\n\t    _inverst[4]=user_inverst_record[_user].releasd_profit;\r\n\t    _inverst[5] = user_inverst_record[_user].history_releasd_profit;\r\n\t    _inverst[6] = ethbalance(_user);\r\n\t    _inverst[7] = getquitfee(_user);\r\n\t    _inverst[8] = ettRate;\r\n\t    _inverst[9] = getettbalance(_user);\r\n\t    /*\r\n\t    _can_draw_capital=user_inverst_record[_user].can_draw_capital;\r\n\t    _last_investdate=user_inverst_record[_user].last_investdate;\r\n\t    _not_draw_capital=user_inverst_record[_user].not_draw_capital;\r\n\t    _total_profit=user_inverst_record[_user].total_profit;\r\n\t    _releasd_profit=user_inverst_record[_user].releasd_profit;\r\n\t    _history_releasd_profit = user_inverst_record[_user].history_releasd_profit;\r\n\t    */\r\n\t}\r\n\t\r\n\tfunction setRwardGeneration(uint _generation,uint _generation_team) public onlyOwner returns(bool){\r\n\t    if(_generation_team>1&&_generation>1&&_generation<=16){\r\n\t        generation = _generation;\r\n\t        generation_team = _generation_team;\r\n\t        return true;\r\n\t    }else{\r\n\t        return false;\r\n\t    }\r\n\t}\r\n\t\r\n\tfunction getRwardGeneration() public view onlyOwner returns(uint _generation,uint _generation_team){\r\n\t    _generation = generation;\r\n\t    _generation_team = generation_team;\r\n\t}\r\n\t\r\n\tfunction geteam(address _user) public view returns(\r\n\t    \r\n\t    uint nn1,//0\r\n\t    uint nn2,//1\r\n\t    uint n_effective1,\r\n\t    uint n_effective2,\r\n\t    \r\n\t    uint [16]  n,\r\n\t    uint [16] n_effective,\r\n\t    uint ms,//6\r\n\t    uint tm,//7\r\n\t    uint lid//11\r\n\t){\r\n\t    \r\n\t    nn1 = suns[_user].n[1];\r\n\t    nn2 = suns[_user].n[2];\r\n\t    n_effective1 = suns[_user].n_effective[1];\r\n\t    n_effective2 = suns[_user].n_effective[2];\r\n        \r\n        for(uint i;i<16;i++){\r\n            \r\n            n[i] = suns[_user].n[i+1];\r\n            n_effective[i] = suns[_user].n_effective[i+1];\r\n        }\r\n\t    ms = teamget[_user];\r\n\t    tm = getaddtime(_user);\r\n\r\n\r\n\t    if(suns[_user].n_effective[2] >= permans[2] && suns[_user].n_effective[1] >= permans[3]){\r\n\t        lid = 1;\r\n\t    }\r\n\t    if(suns[_user].n_effective[2] >= permans[0] && suns[_user].n_effective[1] >= permans[1]){\r\n\t        lid = 2;\r\n\t    }\r\n\t}\r\n\t\r\n\t\r\n\r\n\tfunction getsys() public view returns(\r\n\t    uint tmoney,//0\r\n\t    uint _sysinteth\r\n\t   \r\n\t){\r\n\t    tmoney = _totalSupply.sub(balances[this]);\r\n\t    _sysinteth = sysinteth;\r\n\t    \r\n\t}\r\n    function _transfer(address from, address to, uint tokens) private returns(bool success) {\r\n        require(!frozenAccount[from]);\r\n\t\trequire(!frozenAccount[to]);\r\n\t\trequire(actived == true);\r\n\t\t\r\n\t\tuint addper = tokens*transper/100;\r\n\r\n\t\tuint allmoney = tokens + addper;\r\n\t\trequire(balances[from] >= allmoney);\r\n\t\trequire(tokens > 0 && tokens < _totalSupply);\r\n\t\t// \u9632\u6b62\u8f6c\u79fb\u52300x0\uff0c \u7528burn\u4ee3\u66ff\u8fd9\u4e2a\u529f\u80fd\r\n        require(to != 0x0);\r\n\t\trequire(from != to);\r\n\t\t// \u5c06\u6b64\u4fdd\u5b58\u4e3a\u5c06\u6765\u7684\u65ad\u8a00\uff0c \u51fd\u6570\u6700\u540e\u4f1a\u6709\u4e00\u4e2a\u68c0\u9a8c103 - 3 + 10\r\n        uint previousBalances = balances[from] - addper + balances[to];\r\n\t\t//\u5982\u679c\u7528\u6237\u6ca1\u6709\u4e0a\u5bb6\r\n\t\tif(fromaddr[to] == address(0) && fromaddr[from] != to) {\r\n\t\t\t//\u6307\u5b9a\u4e0a\u5bb6\u5730\u5740\r\n\t\t\tfromaddr[to] = from;\r\n\t\t\taddress top = fromaddr[to];\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tif(isleader[ethtop[top]]){\r\n\t\t\t    ethtop[to] = ethtop[top];\r\n\t\t\t}\r\n\t\t\tif(isleader[top] ){\r\n\t\t\t    ethtop[to] = top;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\taddress _to = to;\r\n\t\t\tfor(uint i = 1;i<=16;i++){\r\n\t\t\t\tif(top != address(0) && top !=_to){\r\n\t\t\t\t\tsuns[top].n[i] += 1;\r\n\t\t\t\t\t_to = top;\r\n\t\t\t\t\ttop = fromaddr[top];\r\n\t\t\t\t\t\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}else{\r\n\t\t\t\t    break;    \r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t} \r\n\t\t\r\n\t\tbalances[from] = balances[from].sub(allmoney);\r\n\t\tbalances[this] = balances[this].add(addper);\r\n\t\tbalances[to] = balances[to].add(tokens);\r\n\t\temit Transfer(from, this, addper);\r\n\t\temit Transfer(from, to, tokens);\r\n\t\t// \u65ad\u8a00\u68c0\u6d4b\uff0c \u4e0d\u5e94\u8be5\u4e3a\u9519\r\n        assert(balances[from] + balances[to] == previousBalances);//90 10\r\n\t\treturn true;\r\n    }\r\n\t/*\r\n\t * \u7528\u6237\u8f6c\u8d26\r\n\t * @param {Object} address\r\n\t */\r\n\tfunction transfer(address to, uint tokens) public returns(bool success) {\r\n\t\t_transfer(msg.sender, to, tokens);\r\n\t\tsuccess = true;\r\n\t}\r\n    function intertransfer(address from, address to, uint tokens) public onlyInterface returns(bool success) {\r\n\t\t_transfer(from, to, tokens);\r\n\t\tsuccess = true;\r\n\t}\r\n\t/*\r\n\t * \u83b7\u53d6\u4e0a\u5bb6\u5730\u5740\r\n\t * @param {Object} address\r\n\t */\r\n\tfunction getfrom(address _addr) public view returns(address) {\r\n\t\treturn(fromaddr[_addr]);\r\n\t}\r\n\r\n\tfunction approve(address spender, uint tokens) public returns(bool success) {\r\n\t    require(tokens > 1 && tokens < _totalSupply);\r\n\t    require(balances[msg.sender] >= tokens);\r\n\t\tallowed[msg.sender][spender] = tokens;\r\n\t\temit Approval(msg.sender, spender, tokens);\r\n\t\treturn true;\r\n\t}\r\n\t/*\r\n\t * \u6388\u6743\u8f6c\u8d26\r\n\t * @param {Object} address\r\n\t */\r\n\tfunction transferFrom(address from, address to, uint tokens) public returns(bool success) {\r\n\t\trequire(actived == true);\r\n\t\trequire(!frozenAccount[from]);\r\n\t\trequire(!frozenAccount[to]);\r\n\t\trequire(tokens > 1 && tokens < _totalSupply);\r\n\t\trequire(balances[from] >= tokens);\r\n\t\tbalances[from] = balances[from].sub(tokens);\r\n\t\tallowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n\t\tbalances[to] = balances[to].add(tokens);\r\n\t\temit Transfer(from, to, tokens);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/*\r\n\t * \u83b7\u53d6\u6388\u6743\u4fe1\u606f\r\n\t * @param {Object} address\r\n\t */\r\n\tfunction allowance(address tokenOwner, address spender) public view returns(uint remaining) {\r\n\t\treturn allowed[tokenOwner][spender];\r\n\t}\r\n\r\n\r\n\r\n\t/// \u51bb\u7ed3 or \u89e3\u51bb\u8d26\u6237\r\n\tfunction freezeAccount(address target, bool freeze) public onlyOwner{\r\n\t\tfrozenAccount[target] = freeze;\r\n\t\temit FrozenFunds(target, freeze);\r\n\t}\r\n\t\r\n\t/*\r\n\t * \u7cfb\u7edf\u8bbe\u7f6e\r\n\t * @param {Object} uint\r\n\t \t\r\n\t */\r\n\tfunction setconf(\r\n    \tuint _per,\r\n    \tuint _newOnceWidrawTime, \r\n    \tuint _newBuyPrice,\r\n    \tuint _ettRate\r\n    ) public onlyOwner{\r\n        require(_per>0);\r\n        require(ettRate>0);\r\n\t\tper = _per;\r\n\t\tOnceWidrawTime = _newOnceWidrawTime;\r\n\t\tbuyPrice = _newBuyPrice;\r\n\t\tettRate = _ettRate;\r\n\t}\r\n\t\r\n\t\r\n\t// * \u83b7\u53d6\u7cfb\u7edf\u8bbe\u7f6e\r\n\t \r\n\tfunction getconf() public view returns(\r\n\t    uint _per,\r\n\t    uint _newOnceWidrawTime, \r\n    \tuint _newBuyPrice,\r\n    \tuint _ettRate) \r\n    {\r\n\t\t _per = per;\r\n\t\t _newOnceWidrawTime = OnceWidrawTime;\r\n\t\t _newBuyPrice = buyPrice;\r\n\t\t _ettRate = ettRate;\r\n\t}\r\n\t\r\n\tfunction setother(\r\n    \tuint _transper,\r\n    \tuint _quit_interval,\r\n    \tuint _quit_rate1,\r\n    \tuint _quit_rate2\r\n\t) public onlyOwner{\r\n\t    transper = _transper;\r\n\t\tquit_config = quit_conf(_quit_interval,_quit_rate1,_quit_rate2);\r\n\t}\r\n\t\r\n\tfunction getquitfee(address _user) public view returns(uint ){\r\n\t    uint _fee;\r\n\t    //require(actived == true&&!frozenAccount[msg.sender]);\r\n\t\tif (user_inverst_record[_user].can_draw_capital > 0){\r\n\t\t    uint interval = now.sub(user_inverst_record[_user].last_investdate);\r\n\t\t    uint rate = quit_config.rate2;\r\n\t\t    if(interval<quit_config.interval){\r\n\t\t\t    rate = quit_config.rate1;\r\n\t\t    }\r\n\t\t    uint fee = user_inverst_record[_user].can_draw_capital*rate/100;\r\n\t\t}\r\n\t\t_fee = fee;\r\n\t\treturn _fee;\r\n\r\n\t}\r\n\t\r\n\tfunction getother() public view returns(\r\n\t    uint _onceWidrawTime, \r\n    \tuint newBuyPrice,\r\n    \tuint _transper,\r\n    \tuint _quit_interval,\r\n    \tuint _quit_rate1,\r\n    \tuint _quit_rate2\r\n\t){\r\n\t    _onceWidrawTime = OnceWidrawTime;//0\r\n\t\tnewBuyPrice = buyPrice;//1\r\n\t\t_transper = transper;\r\n\t\t_quit_interval = quit_config.interval;\r\n\t\t_quit_rate1 = quit_config.rate1;\r\n\t\t_quit_rate2 = quit_config.rate2;\r\n\t}\r\n\t\r\n\tfunction setNodeProfit(uint _node,uint _members,uint _percert) public  onlyOwner returns(bool){\r\n\t    //require(_node<=16&&_node>=1);\r\n\t    require(_node>=1);\r\n\t    require(_members>0&&_percert>0&&_percert<=100);\r\n\t    node_profits[_node] = node_profit(_members,_percert);\r\n\t    return true;\r\n\t}\r\n\tfunction setPlan(uint _plan,uint _account,uint _times) public onlyOwner returns(bool){\r\n\t    require(_plan<=4&&_plan>=1);\r\n\t    require(_account>0&&_times>0);\r\n\t    plans[_plan] = plan(_account,_times);\r\n\t    \r\n\t    return true;\r\n\t}\r\n\tfunction getPlan(uint _plan) public view returns(uint _account,uint _times){\r\n\t    require(_plan>0 && _plan <=4);\r\n\t    _account=plans[_plan].account;\r\n\t    _times = plans[_plan].times;\r\n\t}\r\n\tfunction getNodeProfit(uint _node) public view returns(uint _members,uint _percert){\r\n\t    require(_node>0 && _node <=16);\r\n\t    _members = node_profits[_node].menber_counts;\r\n\t    _percert = node_profits[_node].percent;\r\n\t}\r\n\t\r\n\tfunction setsysteam(\r\n        uint _newteamPrice1,\r\n        uint _newteamPrice2,\r\n    \tuint teamper1s,\r\n    \tuint teamper2s,\r\n    \tuint t1,\r\n    \tuint t2,\r\n    \tuint t3,\r\n    \tuint t4\r\n\t) public onlyOwner{\r\n        teamPrice1=_newteamPrice1;\r\n        teamPrice2=_newteamPrice2;\r\n\t    teamper1 = teamper1s;\r\n\t\tteamper2 = teamper2s;\r\n\t\tpermans = [t1,t2,t3,t4];\r\n\t}\r\n\tfunction getsysteam() public view returns(\r\n        uint teamprice1,\r\n        uint teamprice2,\r\n    \tuint teamper1s,\r\n    \tuint teamper2s,\r\n    \tuint t1,\r\n    \tuint t2,\r\n    \tuint t3,\r\n    \tuint t4\r\n\t){\r\n        teamprice1 = teamPrice1;\r\n        teamprice2 = teamPrice2;\r\n\t\tteamper1s = teamper1;//4\r\n\t\tteamper2s = teamper2;//5\r\n\t\tt1 = permans[0];//6\r\n\t\tt2 = permans[1];//7\r\n\t\tt3 = permans[2];//8\r\n\t\tt4 = permans[3];//9\r\n\t}\r\n\t/*\r\n\t * \u8bbe\u7f6e\u662f\u5426\u5f00\u542f\r\n\t * @param {Object} bool\r\n\t */\r\n\tfunction setactive(bool tags) public onlyOwner {\r\n\t\tactived = tags;\r\n\t}\r\n\r\n\tfunction setadmin(address adminaddr) onlyOwner public {\r\n\t    require(adminaddr != owner && adminaddr != address(0));\r\n\t\towner = adminaddr;\r\n\t}\r\n\tfunction setfinancer(address financeraddr) onlyOwner public {\r\n\t\tfinancer = financeraddr;\r\n\t}\r\n\t/*\r\n\t * \u83b7\u53d6\u603b\u53d1\u884c\r\n\t */\r\n\tfunction totalSupply() public view returns(uint) {\r\n\t\treturn _totalSupply;\r\n\t}\r\n\tfunction addusermoney(address target, uint256 mintedAmount) private{\r\n\t    require(!frozenAccount[target]);\r\n\t\trequire(actived == true);\r\n        require(balances[this] > mintedAmount);\r\n\t\tbalances[target] = balances[target].add(mintedAmount);\r\n\t\tbalances[this] = balances[this].sub(mintedAmount);\r\n\t\temit Transfer(this, target, mintedAmount);\r\n\t}\r\n\tfunction subusermoney(address target, uint256 mintedAmount) private{\r\n\t    require(!frozenAccount[target]);\r\n\t\trequire(actived == true);\r\n        require(balances[target] > mintedAmount);\r\n\t\tbalances[target] = balances[target].sub(mintedAmount);\r\n\t\tbalances[this] = balances[this].add(mintedAmount);\r\n\t\temit Transfer( target,this, mintedAmount);\r\n\t}\r\n\t/*\r\n\t * \u5411\u6307\u5b9a\u8d26\u6237\u62e8\u53d1\u8d44\u91d1\r\n\t * @param {Object} address\r\n\t */\r\n\tfunction adduser(address target, uint256 mintedAmount) public onlyFinancer{\r\n\t\taddusermoney(target, mintedAmount);\r\n\t}\r\n\tfunction subuser(address target, uint256 mintedAmount) public onlyFinancer{\r\n\t\tsubusermoney(target, mintedAmount);\r\n\t}\r\n\t/*\r\n\tfunction interadduser(address target, uint256 mintedAmount) public onlyInterface{\r\n\t\taddusermoney(target, mintedAmount);\r\n\t}\r\n\tfunction intersubuser(address target, uint256 mintedAmount) public onlyInterface{\r\n\t\tsubusermoney(target, mintedAmount);\r\n\t}\r\n\t*/\r\n\t\r\n\tfunction setteam(address user, uint amount) private returns(bool) {\r\n\t\trequire(amount >0);\r\n\t\tteamget[user] += amount;\r\n\t    if(suns[user].n_effective[2] >= permans[2] && suns[user].n_effective[1] >= permans[3]){\r\n\t        //teamget[user] += amount;\r\n\t        uint chkmoney = teamPrice1;\r\n\t        uint sendmoney = teamget[user]*teamper1/100;\r\n\t        if(suns[user].n_effective[2] >= permans[0] && suns[user].n_effective[1] >= permans[1]){\r\n\t            chkmoney = teamPrice2;\r\n\t            sendmoney = teamget[user]*teamper2/100;\r\n\t        }\r\n\t        if(teamget[user] >= chkmoney) {\r\n\t        \t_update_user_inverst(user,sendmoney);\r\n\t        \tteamget[user] = uint(0);\r\n\t        \t\r\n\t        }\r\n\t    }\r\n\t    return(true);\r\n\t}\t\r\n\t\r\n\r\n\r\n\tfunction _reset_user_inverst(address user) private returns(bool){\r\n\t\t\tuser_inverst_record[user].can_draw_capital = uint(0);\r\n\t\t\tuser_inverst_record[user].not_draw_capital = uint(0);\r\n\t\t\tuser_inverst_record[user].releasd_profit = uint(0);\r\n\t\t\t//user_inverst_record[user].last_investdate = uint(0);\r\n\t\t\tuser_inverst_record[user].total_profit = uint(0);\r\n\t\t\tcrontime[user]=uint(0);\r\n\t\t\treturn(true);\r\n\t}\r\n\tfunction _update_user_inverst(address user,uint rewards) private returns(uint){\r\n\t    \r\n\t\trequire(rewards >0);\r\n\t\tuint _mint_account;\r\n\t\tif(user_inverst_record[user].not_draw_capital==uint(0)){\r\n\t\t    return _mint_account;\r\n\t\t}\r\n\t\t/*\u5269\u4f59\u53ef\u91ca\u653e*/\r\n\t\tuint releasable = user_inverst_record[user].total_profit.sub(user_inverst_record[user].releasd_profit);\r\n\t\tif(releasable<=rewards){\r\n\t\t\t_reset_user_inverst(user);\r\n\t\t\t_mint_account = releasable;\r\n\t\t}\r\n\t\telse{\r\n\t\t\t/*\r\n\t\t\t\t\u4fee\u6539\u53ef\u63d0\u73b0\u672c\u91d1\r\n\t\t\t*/\r\n\t\t\t_mint_account = rewards;\r\n\t\t\tif(user_inverst_record[user].can_draw_capital>0){\r\n\t\t\t\tif(user_inverst_record[user].can_draw_capital>rewards){\r\n\t\t\t\t\tuser_inverst_record[user].can_draw_capital=user_inverst_record[user].can_draw_capital.sub(rewards);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tuser_inverst_record[user].can_draw_capital = uint(0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t/*\r\n\t\t\t\t\u4fee\u6539\u5df2\u91ca\u653e\u5229\u6da6\r\n\t\t\t*/\r\n\t\t\tuser_inverst_record[user].releasd_profit += _mint_account;\r\n\t\t}\r\n\t\trequire(balances[this]>= _mint_account);\r\n\t\tuser_inverst_record[user].history_releasd_profit += _mint_account;\r\n\t\tbalances[user] += _mint_account;\r\n\t\tbalances[this] -= _mint_account;\r\n\t\temit Transfer(this, user, _mint_account);\r\n\t\treturn _mint_account;\r\n\t}\r\n\t\r\n\tfunction hasReward(address _user)public view returns(bool){\r\n\t    if(crontime[_user] <= now - OnceWidrawTime && crontime[_user]!=0){\r\n\t        return true;\r\n\t    }\r\n\t    else{\r\n\t        return false;\r\n\t    }\r\n\t}\r\n\t\r\n\tfunction reward() public returns(bool){\r\n\t    require(actived == true&&!frozenAccount[msg.sender]);\r\n\t\taddress user = msg.sender;\r\n\t\trequire(crontime[user] <= now - OnceWidrawTime && crontime[user]!=0);\r\n\t\t/*\r\n\t\t\u9759\u6001\r\n\t\t*/\r\n\t\tuint rewards = user_inverst_record[user].not_draw_capital*per/1000;\t\t\r\n\t\t/*\u6316\u77ff\u6570\u91cf*/\r\n\t\tuint _mint_account = _update_user_inverst(user,rewards);\r\n\r\n\t\t\r\n\t\t/*\r\n\t\t\t\u52a8\u6001\r\n\t\t*/\r\n\t\taddress  top = fromaddr[user];\r\n\t\taddress _user = user;\r\n\t \tfor(uint i=1;i<=generation;i++){\r\n\t \t\t\tif(top != address(0) && top != _user){\r\n\t \t\t\t\tif(suns[top].n_effective[1]>=node_profits[i].menber_counts){\r\n\t \t\t\t\t\tuint upmoney = _mint_account*node_profits[i].percent/100;\r\n\t \t\t\t\t\t//settop(top, upmoney);\r\n\t \t\t\t\t\t\r\n\t \t\t\t\t\t_update_user_inverst(top,upmoney);\r\n\t \t\t\t\t\t//setteam(top,_mint_account);\r\n\t \t\t\t\t}\r\n\t \t\t\t\t_user = top;\r\n\t \t\t\t\ttop = fromaddr[top];\r\n\t \t\t\t\t\r\n\t \t\t\t\tcontinue;\r\n                }\r\n                 break;\r\n\t \t}\r\n\t \t//\u56e2\u961f\u4e1a\u7ee9\u7edf\u8ba1\r\n\t \t_user = user;\r\n\t \ttop = fromaddr[user];\r\n\t \tfor(uint n=1;n<=generation_team;n++){\r\n\t \t\tif(top != address(0) && top != _user){\r\n\t \t\t\tsetteam(top,_mint_account);\r\n\t \t\t\t_user = top;\r\n\t \t\t\ttop = fromaddr[top];\r\n\t \t\t\tcontinue;\r\n\t \t\t}\r\n\t \t\tbreak;\r\n\t \t}\r\n\t \t\r\n\t \t\t\t/*\u4fee\u6539\u4e0b\u6b21\u63d0\u73b0\u65f6\u95f4*/\r\n\r\n\t\tif(crontime[user]>uint(0)){\r\n\t\t    crontime[user] = now + OnceWidrawTime;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\t/*\r\n\t * \u7528\u6237\u53c2\u4e0e\u6316\u77ff\r\n\t */\r\n\r\n\t function mint(uint _tokens) public {\r\n\t \t\trequire(actived == true&&!frozenAccount[msg.sender]);\r\n\t \t\taddress user = msg.sender;\r\n  \t \t\trequire(_tokens>=plans[1].account && balances[user]>=_tokens);\r\n\t \t\trequire(!frozenAccount[user]);\r\n\t\t\t\r\n\t\t\t/*16\u4ee3\u4ee5\u5185\u6709\u6548\u7528\u6237\u8bbe\u7f6e\uff0c\u53ef\u4ee5\u6539\u6210N\u4ee3*/\r\n\t\t\taddress top = fromaddr[user];\r\n\t\t\taddress _user = user;\r\n\t\t\tfor(uint n=1;n<=16;n++){\t\r\n\t\t\t\tif(top != address(0) && top !=_user){\r\n\t\t\t\t\tif(!_effective_son[user] && n==1){\r\n\t\t\t\t\t\t++suns[top].n_effective[n];\r\n\t\t\t\t\t\t_effective_son[user] = true;\r\n\t\t\t\t\t\ttop = fromaddr[top];\r\n\t\t\t\t\t\tcontinue;\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if(n >=2){\r\n\t\t\t\t\t\t++suns[top].n_effective[n];\r\n\t\t\t\t\t\t_user = top;\r\n\t\t\t\t\t\ttop = fromaddr[top];\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t \t\t/*\r\n\t \t\t\u4fee\u6539\u6295\u8d44\u4fe1\u606f\r\n\t \t\t*/\r\n\t \t\tuser_inverst_record[user].can_draw_capital += _tokens;\r\n\t \t\tuser_inverst_record[user].not_draw_capital += _tokens;\r\n\t \t\tuser_inverst_record[user].last_investdate = now;\r\n\r\n\t\t\t/*\r\n\t\t\t\u589e\u52a0\u603b\u6295\u8d44\u5229\u6da6\r\n\t\t\t*/\r\n\t\t\tuint _profits;\r\n\t \t\tfor(uint i=4;i>=1;i--){\r\n\t \t\t\t\tif(_tokens >= plans[i].account){\r\n\t \t\t\t\t\t\t_profits = plans[i].times * _tokens;\r\n\t \t\t\t\t\t\tbreak;\r\n\t \t\t\t\t}\r\n\t \t\t}\r\n\t \t\t\r\n\t \t\tuser_inverst_record[user].total_profit += _profits;\r\n\r\n\r\n\t \t\t\r\n\t \t\tbalances[user] -= _tokens;\r\n\t \t\tbalances[this] += _tokens;\r\n\t \t\tcrontime[user] = now + OnceWidrawTime;\r\n\t \t}\r\n\r\n\r\n\tfunction quitMint() public returns(bool){\r\n\t\trequire(actived == true&&!frozenAccount[msg.sender]);\r\n\t\trequire(user_inverst_record[msg.sender].can_draw_capital > 0);\r\n\t\tuint interval = now.sub(user_inverst_record[msg.sender].last_investdate);\r\n\t\tuint rate = quit_config.rate2;\r\n\t\tif(interval<quit_config.interval){\r\n\t\t\trate = quit_config.rate1;\r\n\t\t}\r\n\t\tuint fee = user_inverst_record[msg.sender].can_draw_capital*rate/100;\r\n\t\tuint refund = user_inverst_record[msg.sender].can_draw_capital.sub(fee);\r\n\t\t_reset_user_inverst(msg.sender);\r\n\t\trequire(balances[this]>=refund);\r\n\t\tbalances[msg.sender] += refund;\r\n\t\tbalances[this] -= refund;\r\n\t\t\r\n\t\temit Transfer(this, msg.sender,refund);\r\n\t\treturn(true);\t\r\n\t}\r\n\t \r\n\tfunction addleadereth(address _user,uint _ethvalue) private returns(bool){\r\n\t    address _ethtop = ethtop[_user];\r\n\t    if(_ethtop!=address(0) ){\r\n\t        leader_eth[_ethtop] += _ethvalue;\r\n\t    }\r\n\t    /*\r\n\t    if(isleader[_user]){\r\n\t        leader_eth[_user] += _ethvalue;\r\n\t    }\r\n\t    */\r\n\t    /*\r\n\t    address user = _user;\r\n\t    address top = fromaddr[_user];\r\n\t    for(uint i=1;;i++){\r\n\t       if(top!=address(0)&&top!= user){\r\n\t           if(isleader[top]){\r\n    \t           leader_eth[top] += _ethvalue;\r\n    \t           break;\r\n\t           }\r\n\t           (user,top)=(top,fromaddr[top]);\r\n\t           continue;\r\n\t       }\r\n\t       break;\r\n\t   }\r\n\t   */\r\n\t    return(true);\r\n\t}\r\n\tfunction addLeader(address _leader) public onlyOwner returns(bool){\r\n\t    require(_leader!=address(0) && !isleader[_leader]);\r\n\t    isleader[_leader] = true;\r\n\t    leaders.push(_leader);\r\n\t    return(true);\r\n\t}\r\n\tfunction subLeader(address _leader)public onlyOwner returns(bool){\r\n\t    require(_leader!=address(0) && isleader[_leader]);\r\n\t   isleader[_leader] = false;\r\n\t    return(true);\r\n\t}\r\n\t/*\r\n\t*\r\n\t*/\r\n\tfunction getleaders()public view  returns(address [] memory _leaders,uint [] memory _eths){\r\n        uint l;\r\n        for(uint i;i<leaders.length;i++){\r\n            if(isleader[leaders[i]]){\r\n                l++;\r\n            }\r\n        }\r\n        address [] memory  _leaders1 = new address[](l);\r\n        uint [] memory _eths1 = new uint[](l);\r\n        for(uint n;n<leaders.length;n++){\r\n            if(isleader[leaders[n]]){\r\n                l--;\r\n                \r\n                _leaders1[l] = leaders[n];\r\n                _eths1[l] = leader_eth[leaders[n]];\r\n            }\r\n        }\r\n        _eths = _eths1;\r\n        _leaders = _leaders1;\r\n\t}\r\n\tfunction setEttTokenAddress(address _ett) public onlyOwner returns(bool){\r\n\t    require(_ett!=address(0) && _ett != address(this));\r\n\t    ett = EttToken(_ett);\r\n\t    return true;\r\n\t}\r\n\t/*\r\n\tfunction setEttRate(uint _rate) public onlyOwner returns(bool){\r\n\t    require(_rate>0);\r\n\t    ettRate = _rate;\r\n\t    return true;\r\n\t}\r\n\t*/\r\n\t/*\r\n\t* sell usdt\r\n\t*/\r\n\t\r\n\tfunction  usdt2ett(uint _tokens) public returns(bool){\r\n\t    require(actived);\r\n\t    require(_tokens>0 && balances[msg.sender] >= _tokens);\r\n\t    require(ett!=address(0));\r\n\t    uint _ettAmount = _tokens * ettRate / 1 ether;\r\n\t    ett.tokenAdd(msg.sender,_ettAmount);\r\n\t    balances[msg.sender] -= _tokens;\r\n\t    emit Transfer(msg.sender,this,_tokens);\r\n\t    return true;\r\n\t}\r\n\t\r\n\t/*\r\n\t* sell ett\r\n\t*/\r\n\tfunction ett2usdt(uint _tokens) public returns(bool){\r\n\t    require(actived);\r\n\t    require(_tokens>0);\r\n\t    require(ett!=address(0));\r\n\t    if(getettbalance(msg.sender)>= _tokens){\r\n\t        uint _usdts = _tokens*1 ether/ettRate;    \r\n\t        ett.tokenSub(msg.sender,_tokens);\r\n\t        require(balances[this]> _usdts);\r\n\t        balances[msg.sender] += _usdts;\r\n\t        balances[this] -= _usdts;\r\n\t        emit Transfer(this,msg.sender,_tokens);\r\n\t    }else{\r\n\t        return false;\r\n\t    }\r\n\t    return true;\r\n\t}\r\n\t\r\n\tfunction getettbalance(address _user) public view returns(uint256 _balance){\r\n\t    require(ett!=address(0));\r\n\t    _balance = ett.balanceOf(_user);\r\n\t}\r\n\t\r\n\t/*\r\n\t * \u83b7\u53d6\u603b\u8d26\u76ee\r\n\t */\r\n\tfunction getall() public view returns(uint256 money) {\r\n\t\tmoney = address(this).balance;\r\n\t}\r\n\t/*\r\n\t * \u8d2d\u4e70\r\n\t */\r\n\tfunction buy() public payable returns(uint) {\r\n\t\trequire(msg.value > 0 && actived);\r\n\t\taddress user = msg.sender;\r\n\t\trequire(!frozenAccount[user]);\r\n\t\tuint amount = msg.value * buyPrice/1 ether;\r\n\t\trequire(balances[this] >= amount && amount < _totalSupply);\r\n\t\t\r\n\t\tbalances[user] = balances[user].add(amount);\r\n\t\t\r\n\t\tsysinteth += msg.value;\r\n\t\tuserineth[user] += msg.value;\r\n\r\n\t\tbalances[this] = balances[this].sub(amount);\r\n        \r\n\t\taddleadereth(user,msg.value);\r\n\t\t\r\n\t\towner.transfer(msg.value);\r\n\t\t\r\n\t\temit Transfer(this, user, amount);\r\n\t\treturn(amount);\r\n\t}\r\n\t\r\n\t\r\n\r\n\tfunction() payable public {\r\n\t\tbuy();\r\n\t}\r\n\r\n\t\r\n\t/*\r\n\t * \u6279\u91cf\u53d1\u5e01\r\n\t * @param {Object} address\r\n\t */\r\n\tfunction addBalances(address[] recipients, uint256[] moenys) public onlyOwner{\r\n\t\tuint256 sum = 0;\r\n\t\tfor(uint256 i = 0; i < recipients.length; i++) {\r\n\t\t\tbalances[recipients[i]] = balances[recipients[i]].add(moenys[i]);\r\n\t\t\tsum = sum.add(moenys[i]);\r\n\t\t\temit Transfer(this, recipients[i], moenys[i]);\r\n\t\t}\r\n\t\tbalances[this] = balances[this].sub(sum);\r\n\r\n\t}\r\n\t/*\r\n\t * \u6279\u91cf\u51cf\u5e01\r\n\t * @param {Object} address\r\n\t */\r\n\tfunction subBalances(address[] recipients, uint256[] moenys) public onlyOwner{\r\n\t\tuint256 sum = 0;\r\n\t\tfor(uint256 i = 0; i < recipients.length; i++) {\r\n\t\t\tbalances[recipients[i]] = balances[recipients[i]].sub(moenys[i]);\r\n\t\t\tsum = sum.add(moenys[i]);\r\n\t\t\temit Transfer(recipients[i], this, moenys[i]);\r\n\t\t}\r\n\t\tbalances[this] = balances[this].add(sum);\r\n\r\n\t}\r\n\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"_node\",\"type\":\"uint256\"}],\"name\":\"getNodeProfit\",\"outputs\":[{\"name\":\"_members\",\"type\":\"uint256\"},{\"name\":\"_percert\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"financeraddr\",\"type\":\"address\"}],\"name\":\"setfinancer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_leader\",\"type\":\"address\"}],\"name\":\"subLeader\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OnceWidrawTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reward\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_plan\",\"type\":\"uint256\"}],\"name\":\"getPlan\",\"outputs\":[{\"name\":\"_account\",\"type\":\"uint256\"},{\"name\":\"_times\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"node_profits\",\"outputs\":[{\"name\":\"menber_counts\",\"type\":\"uint256\"},{\"name\":\"percent\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ettRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getaddtime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"adduser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getsysteam\",\"outputs\":[{\"name\":\"teamprice1\",\"type\":\"uint256\"},{\"name\":\"teamprice2\",\"type\":\"uint256\"},{\"name\":\"teamper1s\",\"type\":\"uint256\"},{\"name\":\"teamper2s\",\"type\":\"uint256\"},{\"name\":\"t1\",\"type\":\"uint256\"},{\"name\":\"t2\",\"type\":\"uint256\"},{\"name\":\"t3\",\"type\":\"uint256\"},{\"name\":\"t4\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getother\",\"outputs\":[{\"name\":\"_onceWidrawTime\",\"type\":\"uint256\"},{\"name\":\"newBuyPrice\",\"type\":\"uint256\"},{\"name\":\"_transper\",\"type\":\"uint256\"},{\"name\":\"_quit_interval\",\"type\":\"uint256\"},{\"name\":\"_quit_rate1\",\"type\":\"uint256\"},{\"name\":\"_quit_rate2\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_generation\",\"type\":\"uint256\"},{\"name\":\"_generation_team\",\"type\":\"uint256\"}],\"name\":\"setRwardGeneration\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getconf\",\"outputs\":[{\"name\":\"_per\",\"type\":\"uint256\"},{\"name\":\"_newOnceWidrawTime\",\"type\":\"uint256\"},{\"name\":\"_newBuyPrice\",\"type\":\"uint256\"},{\"name\":\"_ettRate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sysinteth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipients\",\"type\":\"address[]\"},{\"name\":\"moenys\",\"type\":\"uint256[]\"}],\"name\":\"subBalances\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromaddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getquitfee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"leader_eth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethtop\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getmy\",\"outputs\":[{\"name\":\"myblance\",\"type\":\"uint256\"},{\"name\":\"meth\",\"type\":\"uint256\"},{\"name\":\"mytime\",\"type\":\"uint256\"},{\"name\":\"bprice\",\"type\":\"uint256\"},{\"name\":\"tmoney\",\"type\":\"uint256\"},{\"name\":\"myineth\",\"type\":\"uint256\"},{\"name\":\"_isleader\",\"type\":\"bool\"},{\"name\":\"_leader_eth\",\"type\":\"uint256\"},{\"name\":\"_inverst\",\"type\":\"uint256[10]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_plan\",\"type\":\"uint256\"},{\"name\":\"_account\",\"type\":\"uint256\"},{\"name\":\"_times\",\"type\":\"uint256\"}],\"name\":\"setPlan\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"permans\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_per\",\"type\":\"uint256\"},{\"name\":\"_newOnceWidrawTime\",\"type\":\"uint256\"},{\"name\":\"_newBuyPrice\",\"type\":\"uint256\"},{\"name\":\"_ettRate\",\"type\":\"uint256\"}],\"name\":\"setconf\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamget\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"ethbalance\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamper2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transper\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"per\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"quit_config\",\"outputs\":[{\"name\":\"interval\",\"type\":\"uint256\"},{\"name\":\"rate1\",\"type\":\"uint256\"},{\"name\":\"rate2\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userineth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getall\",\"outputs\":[{\"name\":\"money\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"crontime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"geteam\",\"outputs\":[{\"name\":\"nn1\",\"type\":\"uint256\"},{\"name\":\"nn2\",\"type\":\"uint256\"},{\"name\":\"n_effective1\",\"type\":\"uint256\"},{\"name\":\"n_effective2\",\"type\":\"uint256\"},{\"name\":\"n\",\"type\":\"uint256[16]\"},{\"name\":\"n_effective\",\"type\":\"uint256[16]\"},{\"name\":\"ms\",\"type\":\"uint256\"},{\"name\":\"tm\",\"type\":\"uint256\"},{\"name\":\"lid\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"intertransfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRwardGeneration\",\"outputs\":[{\"name\":\"_generation\",\"type\":\"uint256\"},{\"name\":\"_generation_team\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ett\",\"type\":\"address\"}],\"name\":\"setEttTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"leaders\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getettbalance\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"user_inverst_record\",\"outputs\":[{\"name\":\"can_draw_capital\",\"type\":\"uint256\"},{\"name\":\"not_draw_capital\",\"type\":\"uint256\"},{\"name\":\"total_profit\",\"type\":\"uint256\"},{\"name\":\"releasd_profit\",\"type\":\"uint256\"},{\"name\":\"last_investdate\",\"type\":\"uint256\"},{\"name\":\"history_releasd_profit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"intertoken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamper1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plans\",\"outputs\":[{\"name\":\"account\",\"type\":\"uint256\"},{\"name\":\"times\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"usdt2ett\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newteamPrice1\",\"type\":\"uint256\"},{\"name\":\"_newteamPrice2\",\"type\":\"uint256\"},{\"name\":\"teamper1s\",\"type\":\"uint256\"},{\"name\":\"teamper2s\",\"type\":\"uint256\"},{\"name\":\"t1\",\"type\":\"uint256\"},{\"name\":\"t2\",\"type\":\"uint256\"},{\"name\":\"t3\",\"type\":\"uint256\"},{\"name\":\"t4\",\"type\":\"uint256\"}],\"name\":\"setsysteam\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isleader\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"financer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ett\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_node\",\"type\":\"uint256\"},{\"name\":\"_members\",\"type\":\"uint256\"},{\"name\":\"_percert\",\"type\":\"uint256\"}],\"name\":\"setNodeProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"subuser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"adminaddr\",\"type\":\"address\"}],\"name\":\"setadmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipients\",\"type\":\"address[]\"},{\"name\":\"moenys\",\"type\":\"uint256[]\"}],\"name\":\"addBalances\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getleaders\",\"outputs\":[{\"name\":\"_leaders\",\"type\":\"address[]\"},{\"name\":\"_eths\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getsys\",\"outputs\":[{\"name\":\"tmoney\",\"type\":\"uint256\"},{\"name\":\"_sysinteth\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"actived\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getfrom\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"quitMint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_leader\",\"type\":\"address\"}],\"name\":\"addLeader\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tags\",\"type\":\"bool\"}],\"name\":\"setactive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"hasReward\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"ett2usdt\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transper\",\"type\":\"uint256\"},{\"name\":\"_quit_interval\",\"type\":\"uint256\"},{\"name\":\"_quit_rate1\",\"type\":\"uint256\"},{\"name\":\"_quit_rate2\",\"type\":\"uint256\"}],\"name\":\"setother\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_ettAddress\",\"type\":\"address\"},{\"name\":\"_supernodes\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "USDT", "CompilerVersion": "v0.4.25+commit.59dbf8f1", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000003152089a1700abdf66dfe45159069e814be6c2940000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000d0000000000000000000000004aeb3d07101bc6b5b85723143aeb8f230961b5ed000000000000000000000000e7526fa8ea297ff0c49bd1d708abd104c2355b6a00000000000000000000000000ad0c1ea42c832303d249a006a4a5b8cd5f738100000000000000000000000066ba4d733c60116a5c217f51f8dc414230334d230000000000000000000000009b7aba0ca90e318ebd414023fd53e22bdde74a7f000000000000000000000000e27d6ce787f1c704ae89a0f1a8fcd7d5aca183da000000000000000000000000cd3c7c5b41e8ff4471ab2ce1d8b117be48e813b5000000000000000000000000ad2da2a5259dbde4ab1487880fb8a871c6e04e06000000000000000000000000ff1b6f20291f6889663692c9b7281e0e7b2f8250000000000000000000000000aae907903dc65fd07b8b3ce20d2085aedd9d91880000000000000000000000008264ab8d3423574e64c27b15bec9ae79000bcbb3000000000000000000000000cfa67f8c5aa513457738188e9f7e3e6d4682f0d8000000000000000000000000b361addedc0cbb5d8d93808564049b6cfebddd38", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://1c431d65e5b5850ec15a14cc596d361c9e647c78341d8f16e47645ea7c834574"}