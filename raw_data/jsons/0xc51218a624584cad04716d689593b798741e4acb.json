{"SourceCode": "pragma solidity 0.4.24;\r\n\r\n            // www.eagleturst.money\r\n          \r\n          //------ busniness plan ------\r\n\r\n    // level 1 -0.05 +0.005  maintinance fee\r\n    // level 2 -0.10 +0.010  maintinance fee\r\n    // level 3 -0.15 +0.015  maintinance fee\r\n    // level 4 -   0.30 +0.03 maintinance fee\r\n    // level 5 -   1 +0.10   maintinance fee\r\n    // level 6 -   2  +0.20  maintinance fee  \r\n    // level 7 -   4 +0.40   maintinance fee\r\n    // level 8 -   8 +0.80   maintinance fee\r\n    // level 9 -   16 +1.60   maintinance fee\r\n    // level 10 -   32 +3.2    maintinance fee\r\n    // level 11 -   64+6.4    maintinance fee\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a); \r\n    return c;\r\n  }\r\n}\r\ncontract EagleTurstMoney {\r\n    event Multisended(uint256 value , address sender);\r\n    using SafeMath for uint256;\r\n\r\n    function multisendEther(address[] _contributors, uint256[] _balances) public payable {\r\n        uint256 total = msg.value;\r\n        uint256 i = 0;\r\n        for (i; i < _contributors.length; i++) {\r\n            require(total >= _balances[i] );\r\n            total = total.sub(_balances[i]);\r\n            _contributors[i].transfer(_balances[i]);\r\n        }\r\n        emit Multisended(msg.value, msg.sender);\r\n    }\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"_contributors\",\"type\":\"address[]\"},{\"name\":\"_balances\",\"type\":\"uint256[]\"}],\"name\":\"multisendEther\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Multisended\",\"type\":\"event\"}]", "ContractName": "EagleTurstMoney", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://122a4c65707eabcb1463782efcef7fd89352ecc5595bca3944f009ee03d4a5c8"}