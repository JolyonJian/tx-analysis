{"SourceCode": "pragma solidity ^0.4.16; \r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; } \r\ncontract TokenERC20 { \r\n    // Public variables of the token\r\n    string public name; \r\n    string public symbol;\r\n    uint8 public decimals = 18; // 18 decimals is the strongly suggested default, avoid changing it \r\n    uint256 public totalSupply; // This creates an array with all balances \r\n    mapping (address => uint256) public balanceOf; \r\n    mapping (address => mapping (address => uint256)) public allowance; \r\n    // This generates a public event on the blockchain that will notify clients \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    // This notifies clients about the amount burnt\r\n    event Burn(address indexed from, uint256 value); \r\n    /** * Constrctor function * * Initializes contract with initial supply tokens to the creator of the contract */ \r\n    function TokenERC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public\r\n    { totalSupply = initialSupply * 10 ** uint256(decimals); \r\n    // Update total supply with the decimal amount\r\n    balanceOf[msg.sender] = totalSupply; \r\n    // Give the creator all initial  tokens\r\n    name = tokenName; \r\n    // Set the name for display     purposes \r\n    symbol = tokenSymbol; // Set the  symbol for display purposes \r\n    } \r\n    \r\n    /** * Internal transfer, only can be called by this contract */ \r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        // Prevent transfer to 0x0 address.         Use burn() instead \r\n        require(_to != 0x0);\r\n        // Check if the sender has enough \r\n        require(balanceOf[_from] >= _value); \r\n        // Check for overflows\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n        // Save this for an assertion in the future\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to]; \r\n        // Subtract from the sender \r\n        balanceOf[_from] -= _value; \r\n        // Add the same to the recipient \r\n        balanceOf[_to] += _value; Transfer(_from, _to, _value); \r\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances); }\r\n        /** * Transfer tokens * * Send `_value` tokens to `_to` from your account * * @param _to The address of the recipient * @param _value the amount to send */ \r\n        function transfer(address _to, uint256 _value) public { _transfer(msg.sender, _to, _value); }\r\n        /** * Transfer tokens from other address * * Send `_value` tokens to `_to` on behalf of `_from` * * @param _from The address of the sender * @param _to The address of the recipient * @param _value the amount to send */\r\n        function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) { require(_value <= allowance[_from][msg.sender]);\r\n        // Check allowance \r\n        allowance[_from][msg.sender] -= _value; \r\n        _transfer(_from, _to, _value); return true; }\r\n        /** * Set allowance for other address * * Allows `_spender` to spend no more than `_value` tokens on your behalf * * @param _spender The address authorized to spend * @param _value the max amount they can spend */ \r\n        function approve(address _spender, uint256 _value) public returns (bool success) { allowance[msg.sender][_spender] = _value; return true; }\r\n        /** * Set allowance for other address and notify * * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it * * @param _spender The address authorized to spend * @param _value the max amount they can spend * @param _extraData some extra information to send to the approved contract */ \r\n        function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) { tokenRecipient spender = tokenRecipient(_spender); if (approve(_spender, _value)) { spender.receiveApproval(msg.sender, _value, this, _extraData); return true; } } \r\n        /** * Destroy tokens * * Remove `_value` tokens from the system irreversibly * * @param _value the amount of money to burn */ \r\n        function burn(uint256 _value) public returns (bool success) { require(balanceOf[msg.sender] >= _value); \r\n        // Check if the sender has enough\r\n        balanceOf[msg.sender] -= _value; \r\n        // Subtract from the sender\r\n        totalSupply -= _value; \r\n        // Updates totalSupply \r\n        Burn(msg.sender, _value); return true; }\r\n        /** * Destroy tokens from other account * * Remove `_value` tokens from the system irreversibly on behalf of `_from`. * * @param _from the address of the sender * @param _value the amount of money to burn */ \r\n        function burnFrom(address _from, uint256 _value) public returns (bool success) { require(balanceOf[_from] >= _value);\r\n        // Check if the targeted balance is enough\r\n        require(_value <= allowance[_from][msg.sender]); \r\n        // Check allowance \r\n        balanceOf[_from] -= _value;\r\n        // Subtract from the targeted balance \r\n        allowance[_from][msg.sender] -= _value; \r\n        // Subtract from the sender's allowance \r\n        totalSupply -= _value;\r\n        // Update totalSupply\r\n        Burn(_from, _value); return true; } }", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]", "ContractName": "TokenERC20", "CompilerVersion": "v0.4.20-nightly.2018.1.17+commit.4715167e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000a5665696e5f436861696e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a5665696e5f436861696e00000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://dbe57b546c07a40978922efbcd01904061b63d7ff9d60fdb5ea8d34e75c711c9"}