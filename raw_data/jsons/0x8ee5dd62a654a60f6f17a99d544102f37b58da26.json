{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [////IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * ////IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    address[] internal _owners;\r\n\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return interfaceId == type(IERC721).interfaceId || interfaceId == type(IERC721Metadata).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n\r\n        uint256 count;\r\n        for (uint256 i; i < _owners.length; ++i) {\r\n            if (owner == _owners[i]) ++count;\r\n        }\r\n        return count;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()), \"ERC721: approve caller is not owner nor approved for all\");\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return tokenId < _owners.length && _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n        _owners.push(to);\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n        _owners[tokenId] = address(0);\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver.onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n}\r\n\r\ncontract VRFRequestIDBase {\r\n    /**\r\n     * @notice returns the seed which is actually input to the VRF coordinator\r\n     *\r\n     * @dev To prevent repetition of VRF output due to repetition of the\r\n     * @dev user-supplied seed, that seed is combined in a hash with the\r\n     * @dev user-specific nonce, and the address of the consuming contract. The\r\n     * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\r\n     * @dev the final seed, but the nonce does protect against repetition in\r\n     * @dev requests which are included in a single block.\r\n     *\r\n     * @param _userSeed VRF seed input provided by user\r\n     * @param _requester Address of the requesting contract\r\n     * @param _nonce User-specific nonce at the time of the request\r\n     */\r\n    function makeVRFInputSeed(\r\n        bytes32 _keyHash,\r\n        uint256 _userSeed,\r\n        address _requester,\r\n        uint256 _nonce\r\n    ) internal pure returns (uint256) {\r\n        return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the id for this request\r\n     * @param _keyHash The serviceAgreement ID to be used for this request\r\n     * @param _vRFInputSeed The seed to be passed directly to the VRF\r\n     * @return The id for this request\r\n     *\r\n     * @dev Note that _vRFInputSeed is not the seed passed by the consuming\r\n     * @dev contract, but the one generated by makeVRFInputSeed\r\n     */\r\n    function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\r\n    }\r\n}\r\n\r\ninterface LinkTokenInterface {\r\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool success);\r\n\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    function decimals() external view returns (uint8 decimalPlaces);\r\n\r\n    function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\r\n\r\n    function increaseApproval(address spender, uint256 subtractedValue) external;\r\n\r\n    function name() external view returns (string memory tokenName);\r\n\r\n    function symbol() external view returns (string memory tokenSymbol);\r\n\r\n    function totalSupply() external view returns (uint256 totalTokensIssued);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool success);\r\n\r\n    function transferAndCall(\r\n        address to,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) external returns (bool success);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool success);\r\n}\r\n\r\n/**\r\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\r\n * enumerability of all the token ids in the contract as well as all token ids owned by each\r\n * account but rips out the core of the gas-wasting processing that comes from OpenZeppelin.\r\n */\r\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\r\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _owners.length;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenByIndex}.\r\n     */\r\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\r\n        require(index < _owners.length, \"ERC721Enumerable: global index out of bounds\");\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256 tokenId) {\r\n        require(index < balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\r\n\r\n        uint256 count;\r\n        for (uint256 i; i < _owners.length; i++) {\r\n            if (owner == _owners[i]) {\r\n                if (count == index) return i;\r\n                else count++;\r\n            }\r\n        }\r\n\r\n        revert(\"ERC721Enumerable: owner index out of bounds\");\r\n    }\r\n}\r\n\r\ninterface IIllogics {\r\n    function isAdmin(address addr) external view returns (bool);\r\n\r\n    function mintGoop(address _addr, uint256 _goop) external;\r\n\r\n    function burnGoop(address _addr, uint256 _goop) external;\r\n\r\n    function spendGoop(uint256 _item, uint256 _count) external;\r\n\r\n    function mintGoopBatch(address[] calldata _addr, uint256 _goop) external;\r\n\r\n    function burnGoopBatch(address[] calldata _addr, uint256 _goop) external;\r\n}\r\n\r\n/** ****************************************************************************\r\n * @notice Interface for contracts using VRF randomness\r\n * *****************************************************************************\r\n * @dev PURPOSE\r\n *\r\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\r\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\r\n * @dev making his output up to suit himself. Reggie provides Vera a public key\r\n * @dev to which he knows the secret key. Each time Vera provides a seed to\r\n * @dev Reggie, he gives back a value which is computed completely\r\n * @dev deterministically from the seed and the secret key.\r\n *\r\n * @dev Reggie provides a proof by which Vera can verify that the output was\r\n * @dev correctly computed once Reggie tells it to her, but without that proof,\r\n * @dev the output is indistinguishable to her from a uniform random sample\r\n * @dev from the output space.\r\n *\r\n * @dev The purpose of this contract is to make it easy for unrelated contracts\r\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\r\n * @dev simple access to a verifiable source of randomness.\r\n * *****************************************************************************\r\n * @dev USAGE\r\n *\r\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\r\n * @dev initialize VRFConsumerBase's attributes in their constructor as\r\n * @dev shown:\r\n *\r\n * @dev   contract VRFConsumer {\r\n * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\r\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\r\n * @dev         <initialization with other arguments goes here>\r\n * @dev       }\r\n * @dev   }\r\n *\r\n * @dev The oracle will have given you an ID for the VRF keypair they have\r\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\r\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\r\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\r\n * @dev want to generate randomness from.\r\n *\r\n * @dev Once the VRFCoordinator has received and validated the oracle's response\r\n * @dev to your request, it will call your contract's fulfillRandomness method.\r\n *\r\n * @dev The randomness argument to fulfillRandomness is the actual random value\r\n * @dev generated from your seed.\r\n *\r\n * @dev The requestId argument is generated from the keyHash and the seed by\r\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\r\n * @dev requests open, you can use the requestId to track which seed is\r\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\r\n * @dev details. (See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\r\n * @dev if your contract could have multiple requests in flight simultaneously.)\r\n *\r\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\r\n * @dev differ. (Which is critical to making unpredictable randomness! See the\r\n * @dev next section.)\r\n *\r\n * *****************************************************************************\r\n * @dev SECURITY CONSIDERATIONS\r\n *\r\n * @dev A method with the ability to call your fulfillRandomness method directly\r\n * @dev could spoof a VRF response with any random value, so it's critical that\r\n * @dev it cannot be directly called by anything other than this base contract\r\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\r\n *\r\n * @dev For your users to trust that your contract's random behavior is free\r\n * @dev from malicious interference, it's best if you can write it so that all\r\n * @dev behaviors implied by a VRF response are executed *during* your\r\n * @dev fulfillRandomness method. If your contract must store the response (or\r\n * @dev anything derived from it) and use it later, you must ensure that any\r\n * @dev user-significant behavior which depends on that stored value cannot be\r\n * @dev manipulated by a subsequent VRF request.\r\n *\r\n * @dev Similarly, both miners and the VRF oracle itself have some influence\r\n * @dev over the order in which VRF responses appear on the blockchain, so if\r\n * @dev your contract could have multiple VRF requests in flight simultaneously,\r\n * @dev you must ensure that the order in which the VRF responses arrive cannot\r\n * @dev be used to manipulate your contract's user-significant behavior.\r\n *\r\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\r\n * @dev block in which the request is made, user-provided seeds have no impact\r\n * @dev on its economic security properties. They are only included for API\r\n * @dev compatability with previous versions of this contract.\r\n *\r\n * @dev Since the block hash of the block which contains the requestRandomness\r\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\r\n * @dev miner could, in principle, fork the blockchain to evict the block\r\n * @dev containing the request, forcing the request to be included in a\r\n * @dev different block with a different hash, and therefore a different input\r\n * @dev to the VRF. However, such an attack would incur a substantial economic\r\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\r\n * @dev until it calls responds to a request.\r\n */\r\nabstract contract VRFConsumerBase is VRFRequestIDBase {\r\n    /**\r\n     * @notice fulfillRandomness handles the VRF response. Your contract must\r\n     * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for ////important\r\n     * @notice principles to keep in mind when implementing your fulfillRandomness\r\n     * @notice method.\r\n     *\r\n     * @dev VRFConsumerBase expects its subcontracts to have a method with this\r\n     * @dev signature, and will call it once it has verified the proof\r\n     * @dev associated with the randomness. (It is triggered via a call to\r\n     * @dev rawFulfillRandomness, below.)\r\n     *\r\n     * @param requestId The Id initially returned by requestRandomness\r\n     * @param randomness the VRF output\r\n     */\r\n    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual;\r\n\r\n    /**\r\n     * @dev In order to keep backwards compatibility we have kept the user\r\n     * seed field around. We remove the use of it because given that the blockhash\r\n     * enters later, it overrides whatever randomness the used seed provides.\r\n     * Given that it adds no security, and can easily lead to misunderstandings,\r\n     * we have removed it from usage and can now provide a simpler API.\r\n     */\r\n    uint256 private constant USER_SEED_PLACEHOLDER = 0;\r\n\r\n    /**\r\n     * @notice requestRandomness initiates a request for VRF output given _seed\r\n     *\r\n     * @dev The fulfillRandomness method receives the output, once it's provided\r\n     * @dev by the Oracle, and verified by the vrfCoordinator.\r\n     *\r\n     * @dev The _keyHash must already be registered with the VRFCoordinator, and\r\n     * @dev the _fee must exceed the fee specified during registration of the\r\n     * @dev _keyHash.\r\n     *\r\n     * @dev The _seed parameter is vestigial, and is kept only for API\r\n     * @dev compatibility with older versions. It can't *hurt* to mix in some of\r\n     * @dev your own randomness, here, but it's not necessary because the VRF\r\n     * @dev oracle will mix the hash of the block containing your request into the\r\n     * @dev VRF seed it ultimately uses.\r\n     *\r\n     * @param _keyHash ID of public key against which randomness is generated\r\n     * @param _fee The amount of LINK to send with the request\r\n     *\r\n     * @return requestId unique ID for this request\r\n     *\r\n     * @dev The returned requestId can be used to distinguish responses to\r\n     * @dev concurrent requests. It is passed as the first argument to\r\n     * @dev fulfillRandomness.\r\n     */\r\n    function requestRandomness(bytes32 _keyHash, uint256 _fee) internal returns (bytes32 requestId) {\r\n        LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\r\n        // This is the seed passed to VRFCoordinator. The oracle will mix this with\r\n        // the hash of the block containing this request to obtain the seed/input\r\n        // which is finally passed to the VRF cryptographic machinery.\r\n        uint256 vRFSeed = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\r\n        // nonces[_keyHash] must stay in sync with\r\n        // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\r\n        // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\r\n        // This provides protection against the user repeating their input seed,\r\n        // which would result in a predictable/duplicate output, if multiple such\r\n        // requests appeared in the same block.\r\n        nonces[_keyHash] = nonces[_keyHash] + 1;\r\n        return makeRequestId(_keyHash, vRFSeed);\r\n    }\r\n\r\n    LinkTokenInterface internal immutable LINK;\r\n    address private immutable vrfCoordinator;\r\n\r\n    // Nonces for each VRF key from which randomness has been requested.\r\n    //\r\n    // Must stay in sync with VRFCoordinator[_keyHash][this]\r\n    mapping(bytes32 => uint256) /* keyHash */ /* nonce */\r\n        private nonces;\r\n\r\n    /**\r\n     * @param _vrfCoordinator address of VRFCoordinator contract\r\n     * @param _link address of LINK token contract\r\n     *\r\n     * @dev https://docs.chain.link/docs/link-token-contracts\r\n     */\r\n    constructor(address _vrfCoordinator, address _link) {\r\n        vrfCoordinator = _vrfCoordinator;\r\n        LINK = LinkTokenInterface(_link);\r\n    }\r\n\r\n    // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\r\n    // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\r\n    // the origin of the call\r\n    function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\r\n        require(msg.sender == vrfCoordinator, \"Only VRFCoordinator can fulfill\");\r\n        fulfillRandomness(requestId, randomness);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * ////IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev These functions deal with verification of Merkle Trees proofs.\r\n *\r\n * The proofs can be generated using the JavaScript library\r\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\r\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\r\n *\r\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\r\n */\r\nlibrary MerkleProof {\r\n    /**\r\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\r\n     * defined by `root`. For this, a `proof` must be provided, containing\r\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\r\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\r\n     */\r\n    function verify(\r\n        bytes32[] memory proof,\r\n        bytes32 root,\r\n        bytes32 leaf\r\n    ) internal pure returns (bool) {\r\n        return processProof(proof, leaf) == root;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\r\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\r\n     * hash matches the root of the tree. When processing the proof, the pairs\r\n     * of leafs & pre-images are assumed to be sorted.\r\n     *\r\n     * _Available since v4.4._\r\n     */\r\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\r\n        bytes32 computedHash = leaf;\r\n        for (uint256 i = 0; i < proof.length; i++) {\r\n            bytes32 proofElement = proof[i];\r\n            if (computedHash <= proofElement) {\r\n                // Hash(current computed hash + current element of the proof)\r\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\r\n            } else {\r\n                // Hash(current element of the proof + current computed hash)\r\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\r\n            }\r\n        }\r\n        return computedHash;\r\n    }\r\n}\r\n\r\ninterface ILab {\r\n    function getIllogical(uint256 _tokenId) external view returns (uint256);\r\n}\r\n\r\ncontract illogics is IIllogics, ERC721Enumerable, Ownable, VRFConsumerBase {\r\n    /**************************\r\n     *\r\n     *  DATA STRUCTURES & ENUM\r\n     *\r\n     **************************/\r\n\r\n    // Data structure that defines the elements of stakedToken\r\n    struct StakedToken {\r\n        address ownerOfNFT;\r\n        uint256 timestamp;\r\n        uint256 lastRerollPeriod;\r\n    }\r\n\r\n    // Data structure that defines the elements of a saleId\r\n    struct Sale {\r\n        string description;\r\n        bool saleStatus;\r\n        uint256 price;\r\n        uint256 supply;\r\n        uint256 maxPurchase;\r\n    }\r\n\r\n    /**************************\r\n     *\r\n     *  State Variables\r\n     *\r\n     **************************/\r\n\r\n    // ***** constants and assignments *****\r\n    uint256 public maxMint = 2; // ill-list max per minter address\r\n    uint256 public constant REROLL_COST = 50; // Goop required to reroll a token\r\n    uint256 public constant GOOP_INTERVAL = 12 hours; // The interval upon which Goop is calcualated\r\n    uint256 public goopPerInterval = 5; // Goop awarded per interval\r\n    address public teamWallet = 0xB3D1b19202423EcD55ACF1E635ea1Bded11a5c9f; // address of the team wallet\r\n\r\n    // ***** ill-list minting *****\r\n    bool public mintingState; // enable/disable minting\r\n    bytes32 public merkleRoot; // ill-list Merkle Root\r\n\r\n    // ***** Chainlink VRF & tokenID *****\r\n    IERC20 public link; // address of Chainlink token contract\r\n    uint256 public VRF_fee; // Chainlink VRF fee\r\n    uint256 public periodCounter; // current VRF period\r\n    bytes32 public VRF_keyHash; // Chainlink VRF random number keyhash\r\n    string public baseURI; // URI to illogics metadata\r\n\r\n    // ***** Goop ecosystem & Sales *****\r\n    uint256 public totalGoopSupply; // total Goop in circulation\r\n    uint256 public totalGoopSpent; // total Goop spent in the ecosystem\r\n    uint256 public saleId; // last saleID applied to a saleItem\r\n\r\n    // ***** feature state management *****\r\n    bool public spendState; // Goop spending state\r\n    bool public rerollState; // reroll function state\r\n    bool public stakingState; // staking state\r\n    bool public transferState; // Goop P2P transfer state\r\n    bool public claimStatus; // Goop claim status\r\n    bool public verifyVRF; // can only be set once, used to validate the Chainlink config prior to mint\r\n\r\n    // ***** OpenSea *****\r\n    address public proxyRegistryAddress; // proxyRegistry address\r\n\r\n    // ***** TheLab *****\r\n    address public labAddress; // the address of TheLab ;)\r\n\r\n    /**************************\r\n     *\r\n     *  Mappings\r\n     *\r\n     **************************/\r\n\r\n    mapping(uint256 => Sale) public saleItems; // mapping of saleId to the Sale data scructure\r\n    mapping(uint256 => StakedToken) public stakedToken; // mapping of tokenId to the StakedToken data structure\r\n    mapping(address => uint256) public goop; // mapping of address to a Goop balance\r\n    mapping(address => uint256[]) public staker; // mapping of address to owned tokens staked\r\n    mapping(uint256 => uint256) public collectionDNA; // mapping of VRF period to seed DNA for said period\r\n    mapping(uint256 => uint256[]) public rollTracker; // mapping reroll period (periodCounter) entered to tokenIds\r\n    mapping(address => bool) private admins; // mapping of address to an administrative status\r\n    mapping(address => bool) public projectProxy; // mapping of address to projectProxy status\r\n    mapping(address => bool) public addressToMinted; // mapping of address to minted status\r\n    mapping(address => mapping(uint256 => uint256)) public addressPurchases; // mapping of an address to an saleItemId to number of units purchased\r\n\r\n    /**********************************************************\r\n     *\r\n     *  Events\r\n     *\r\n     **********************************************************/\r\n\r\n    event RequestedRandomNumber(bytes32 indexed requestId); // emitted when the ChainLink VRF is requested\r\n    event RecievedRandomNumber(bytes32 indexed requestId, uint256 periodCounter, uint256 randomNumber); // emitted when a random number is recieved by the Chainlink VRF callback()\r\n    event spentGoop(address indexed purchaser, uint256 indexed item, uint256 indexed count); //emitted when an item is purchased with Goop\r\n\r\n    /**********************************************************\r\n     *\r\n     *  Constructor\r\n     *\r\n     **********************************************************/\r\n\r\n    /**\r\n     * @dev Initializes the contract by:\r\n     *  - setting a `name` and a `symbol` in the ERC721 constructor\r\n     *  - setting the Chainlnk VRFConsumerBase constructor\r\n     *  - setting collection dependant assignments\r\n     */\r\n\r\n    constructor(\r\n        bytes32 _VRF_keyHash,\r\n        uint256 _VRF_Fee,\r\n        address _vrfCoordinator,\r\n        address _linkToken\r\n    ) ERC721(\"illogics\", \"ill\") VRFConsumerBase(_vrfCoordinator, _linkToken) {\r\n        VRF_keyHash = _VRF_keyHash;\r\n        VRF_fee = _VRF_Fee;\r\n        link = IERC20(address(_linkToken));\r\n        admins[_msgSender()] = true;\r\n        proxyRegistryAddress = 0xa5409ec958C83C3f309868babACA7c86DCB077c1;\r\n    }\r\n\r\n    /**********************************************************\r\n     *\r\n     *  Modifiers\r\n     *\r\n     **********************************************************/\r\n\r\n    /**\r\n     * @dev Ensures only contract admins can execute privileged functions\r\n     */\r\n    modifier onlyAdmin() {\r\n        require(isAdmin(_msgSender()), \"admins only\");\r\n        _;\r\n    }\r\n\r\n    /**********************************************************\r\n     *\r\n     *  Contract Management\r\n     *\r\n     **********************************************************/\r\n\r\n    /**\r\n     * @dev Check is an address is an admin\r\n     */\r\n    function isAdmin(address _addr) public view override returns (bool) {\r\n        return owner() == _addr || admins[_addr];\r\n    }\r\n\r\n    /**\r\n     * @dev Grant administrative control to an address\r\n     */\r\n    function addAdmin(address _addr) external onlyAdmin {\r\n        admins[_addr] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Revoke administrative control for an address\r\n     */\r\n    function removeAdmin(address _addr) external onlyAdmin {\r\n        admins[_addr] = false;\r\n    }\r\n\r\n    /**********************************************************\r\n     *\r\n     *  Admin and Contract setters\r\n     *\r\n     **********************************************************/\r\n\r\n    /**\r\n     *  @dev running this after the constructor adds the deployed address\r\n     *  of this contract to the admins\r\n     */\r\n    function init() external onlyAdmin {\r\n        admins[address(this)] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev enables//disables minting state\r\n     */\r\n    function setMintingState(bool _state) external onlyAdmin {\r\n        mintingState = _state;\r\n    }\r\n\r\n    /**\r\n     * @dev enable/disable staking, this does not impact unstaking\r\n     */\r\n    function setStakingState(bool _state) external onlyAdmin {\r\n        stakingState = _state;\r\n    }\r\n\r\n    /**\r\n     *  @dev enable/disable reroll, this must be in a disabled state\r\n     *  prior to calling the final VRF\r\n     */\r\n    function setRerollState(bool _state) external onlyAdmin {\r\n        rerollState = _state;\r\n    }\r\n\r\n    /**\r\n     * @dev enable/disable P2P transfer of Goop\r\n     */\r\n    function setTransferState(bool _state) external onlyAdmin {\r\n        transferState = _state;\r\n    }\r\n\r\n    /**\r\n     * @dev enable/disable the ability to spend Goop\r\n     */\r\n    function setSpendState(bool _state) external onlyAdmin {\r\n        spendState = _state;\r\n    }\r\n\r\n    /**\r\n     * @dev set TheLab address (likely some future Alpha here)\r\n     */\r\n    function setLabAddress(address _labAddress) external onlyAdmin {\r\n        labAddress = _labAddress;\r\n    }\r\n\r\n    /**\r\n     * @dev set the baseURI.\r\n     */\r\n    function setBaseURI(string memory _baseURI) public onlyAdmin {\r\n        baseURI = _baseURI;\r\n    }\r\n\r\n    /**\r\n     * @dev Set the maxMint\r\n     */\r\n    function setMaxMint(uint256 _maxMint) external onlyAdmin {\r\n        maxMint = _maxMint;\r\n    }\r\n\r\n    /**\r\n     * @dev set the amount of Goop earned per interval\r\n     */\r\n    function setGoopPerInterval(uint256 _goopPerInterval) external onlyAdmin {\r\n        goopPerInterval = _goopPerInterval;\r\n    }\r\n\r\n    /**\r\n     * @dev enable/disable Goop claiming\r\n     */\r\n    function setClaim(bool _claimStatus) external onlyAdmin {\r\n        claimStatus = _claimStatus;\r\n    }\r\n\r\n    /**********************************************************\r\n     *\r\n     *  The illest ill-list\r\n     *\r\n     **********************************************************/\r\n\r\n    /**\r\n     * @dev set the merkleTree root\r\n     */\r\n    function setMerkleRoot(bytes32 _merkleRoot) public onlyAdmin {\r\n        merkleRoot = _merkleRoot;\r\n    }\r\n\r\n    /**\r\n     * @dev calculates the leaf hash\r\n     */\r\n    function leaf(string memory payload) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(payload));\r\n    }\r\n\r\n    /**\r\n     * @dev verifies the inclusion of the leaf hash in the merkleTree\r\n     */\r\n    function verify(bytes32 leaf, bytes32[] memory proof) internal view returns (bool) {\r\n        return MerkleProof.verify(proof, merkleRoot, leaf);\r\n    }\r\n\r\n    /**********************************************************\r\n     *\r\n     *  TheLab\r\n     *\r\n     **********************************************************/\r\n\r\n    /**\r\n     * @notice expect big things from this...\r\n     */\r\n    function multiHelix(uint256 _tokenId) public view returns (uint256) {\r\n        require(labAddress != address(0x0), \"The Lab is being setup.\");\r\n        return ILab(labAddress).getIllogical(_tokenId);\r\n    }\r\n\r\n    /**********************************************************\r\n     *\r\n     *  Token management\r\n     *\r\n     **********************************************************/\r\n\r\n    /**\r\n     *  @dev ill-list leverages merkleTree for the mint, there is no public sale.\r\n     *\r\n     *  The first token in the collection is 0 and the last token is 8887, which\r\n     *  equates to a collection size of 8888. Gas optimization uses an index based\r\n     *  model that returns an array size of 8888. As another gas optimization, we\r\n     *  refrained from <= or >= and as a result we must +1, hence the < 8889.\r\n     */\r\n    function illListMint(bytes32[] calldata proof) public payable {\r\n        string memory payload = string(abi.encodePacked(_msgSender()));\r\n        uint256 totalSupply = _owners.length;\r\n\r\n        require(mintingState, \"Ill-list not active\");\r\n        require(verify(leaf(payload), proof), \"Invalid Merkle Tree proof supplied\");\r\n        require(addressToMinted[_msgSender()] == false, \"can not mint twice\");\r\n        require(totalSupply + maxMint < 8889, \"project fully minted\");\r\n\r\n        addressToMinted[_msgSender()] = true;\r\n\r\n        for (uint256 i; i < maxMint; i++) {\r\n            _mint(_msgSender(), totalSupply + i);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev mints 'tId' to 'address'\r\n     */\r\n    function _mint(address to, uint256 tId) internal virtual override {\r\n        _owners.push(to);\r\n        emit Transfer(address(0), to, tId);\r\n    }\r\n\r\n    /**********************************************************\r\n     *\r\n     *  TOKEN\r\n     *\r\n     **********************************************************/\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for the `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 _tId) public view override returns (string memory) {\r\n        require(_exists(_tId), \"Token does not exist.\");\r\n        return string(abi.encodePacked(baseURI, Strings.toString(_tId)));\r\n    }\r\n\r\n    /**\r\n     * @dev transfer an array of tokens from '_from' address to '_to' address\r\n     */\r\n    function batchTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256[] memory _tIds\r\n    ) public {\r\n        for (uint256 i = 0; i < _tIds.length; i++) {\r\n            transferFrom(_from, _to, _tIds[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev safe transfer an array of tokens from '_from' address to '_to' address\r\n     */\r\n    function batchSafeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256[] memory _tIds,\r\n        bytes memory data_\r\n    ) public {\r\n        for (uint256 i = 0; i < _tIds.length; i++) {\r\n            safeTransferFrom(_from, _to, _tIds[i], data_);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev returns a confirmation that 'tIds' are owned by 'account'\r\n     */\r\n    function isOwnerOf(address account, uint256[] calldata _tIds) external view returns (bool) {\r\n        for (uint256 i; i < _tIds.length; ++i) {\r\n            if (_owners[_tIds[i]] != account) return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Retunrs the tokenIds of 'owner'\r\n     */\r\n    function walletOfOwner(address _owner) public view returns (uint256[] memory) {\r\n        uint256 tokenCount = balanceOf(_owner);\r\n        if (tokenCount == 0) return new uint256[](0);\r\n\r\n        uint256[] memory tokensId = new uint256[](tokenCount);\r\n        for (uint256 i; i < tokenCount; i++) {\r\n            tokensId[i] = tokenOfOwnerByIndex(_owner, i);\r\n        }\r\n\r\n        return tokensId;\r\n    }\r\n\r\n    /**********************************************************\r\n     *\r\n     *  GENEROSITY + ETH FUNDING\r\n     *\r\n     **********************************************************/\r\n\r\n    /**\r\n     * @dev Just in case someone sends ETH to the contract\r\n     */\r\n    function withdraw() public {\r\n        (bool success, ) = teamWallet.call{value: address(this).balance}(\"\");\r\n        require(success, \"Failed to send.\");\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    /**********************************************************\r\n     *\r\n     *  CHAINLINK VRF & TOKEN DNA\r\n     *\r\n     **********************************************************/\r\n\r\n    /**\r\n     * @dev Requests a random number from the Chainlink VRF\r\n     */\r\n    function requestRandomNumber() external onlyAdmin returns (bytes32 requestId) {\r\n        require(LINK.balanceOf(address(this)) >= VRF_fee, \"Not enough LINK\");\r\n        requestId = requestRandomness(VRF_keyHash, VRF_fee);\r\n\r\n        emit RequestedRandomNumber(requestId);\r\n    }\r\n\r\n    /**\r\n     * @dev Receives the random number from the Chainlink VRF callback\r\n     */\r\n    function fulfillRandomness(bytes32 _requestId, uint256 _randomNumber) internal override {\r\n        periodCounter++;\r\n        collectionDNA[periodCounter] = _randomNumber;\r\n\r\n        emit RecievedRandomNumber(_requestId, periodCounter, _randomNumber);\r\n    }\r\n\r\n    /**\r\n     * @dev this allows you to test the VRF call to ensure it works as expected prior to mint\r\n     * It resets the collectionDNA and period counter to defaults prior to minting.\r\n     */\r\n    function setVerifyVRF() external onlyAdmin {\r\n        require(!verifyVRF, \"this is a one way function it can not be called twice\");\r\n        collectionDNA[1] = 0;\r\n        periodCounter = 0;\r\n        verifyVRF = true;\r\n    }\r\n\r\n    /**\r\n     *  @notice A reroll is an opportunity to change your tokenDNA and only available when reroll is enabled.\r\n     *  A token that is rerolled gets brand new tokenDNA that is generated in the next reroll period\r\n     *  with the result of the Chainlink VRF requestRandomNumber(). Its impossible to know the result\r\n     *  of your reroll in advance of the Chainlink call and as a result you may end up with a rarer\r\n     *  or less rare tokenDNA.\r\n     */\r\n    function reroll(uint256[] calldata _tokenIds) external {\r\n        uint256 amount = REROLL_COST * _tokenIds.length;\r\n        require(rerollState, \"reroll not enabled\");\r\n        require(goop[_msgSender()] >= amount, \"not enough goop for reroll\");\r\n\r\n          for (uint256 i = 0; i < _tokenIds.length; i++) {\r\n\r\n            require(stakedToken[_tokenIds[i]].ownerOfNFT == _msgSender(), \"you dont own this token or its not staked\");\r\n\r\n            rollTracker[periodCounter + 1].push(_tokenIds[i]);\r\n            stakedToken[_tokenIds[i]].lastRerollPeriod = periodCounter;\r\n        }\r\n\r\n        _burnGoop(_msgSender(), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Set/change the Chainlink VRF keyHash\r\n     */\r\n    function setVRFKeyHash(bytes32 _keyHash) external onlyAdmin {\r\n        VRF_keyHash = _keyHash;\r\n    }\r\n\r\n    /**\r\n     * @dev Set/change the Chainlink VRF fee\r\n     */\r\n    function setVRFFee(uint256 _fee) external onlyAdmin {\r\n        VRF_fee = _fee;\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  - tokenDNA is generated dynamically based on the relevant Chainlink VRF seed. If a token is never\r\n     *    rerolled, it will be constructed based on period 1 (initial VRF) seed. if a token is rerolled in\r\n     *    period 5, its DNA will be based on the VRF seed for period 6. This ensures that no one can\r\n     *    predict or manipulate tokenDNA\r\n     *  - tokenDNA is generated on the fly and not maintained as state on-chain or off-chain.\r\n     *  - tokenDNA is used to construct the unique metadata for each NFT\r\n     *\r\n     *  - Some people may not like this function as its based on nested loops, so here is the logic\r\n     *    1. this is an external function and is never called by this contract or future contract\r\n     *    2. the maximum depth of i will ever be 20, after which all tokenDNA is permanent\r\n     *    3. it ensures tokenDNA is always correct under all circumstances\r\n     *    4. it has 0 gas implications\r\n     */\r\n    function getTokenDNA(uint256 _tId) external view returns (uint256) {\r\n        require(_tId < _owners.length, \"tokenId out of range\");\r\n\r\n        for (uint256 i = periodCounter; i > 0; i--) {\r\n            if (i == 1) {\r\n                return uint256(keccak256(abi.encode(collectionDNA[i], _tId)));\r\n            } else {\r\n                for (uint256 j = 0; j < rollTracker[i].length; j++) {\r\n                    if (rollTracker[i][j] == _tId) {\r\n                        return uint256(keccak256(abi.encode(collectionDNA[i], _tId)));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice To maintain transparency with awarding the \"1/1\" tokens we are leveraging\r\n     * ChainlinkVRF. To accomplish this we are calling requestRandomNumber() after the reveal\r\n     * and will use the next periodCounter to derive a fair one of one giveaway.\r\n     */\r\n    function get1of1() external view returns (uint256[] memory) {\r\n        uint256[] memory oneOfOnes = new uint256[](20);\r\n        uint256 counter;\r\n        uint256 addCounter;\r\n        bool matchStatus;\r\n\r\n        while (addCounter < 20) {\r\n            uint256 result = (uint256(keccak256(abi.encode(collectionDNA[2], counter))) % 8887);\r\n\r\n            for (uint256 i = 0; i < oneOfOnes.length; i++) {\r\n                if (result == oneOfOnes[i]) {\r\n                    matchStatus = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!matchStatus) {\r\n                oneOfOnes[addCounter] = result;\r\n                addCounter++;\r\n            } else {\r\n                matchStatus = false;\r\n            }\r\n            counter++;\r\n        }\r\n        return oneOfOnes;\r\n    }\r\n\r\n    /**********************************************************\r\n     *\r\n     *  STAKING & UNSTAKING\r\n     *\r\n     **********************************************************/\r\n\r\n    /**\r\n     * @notice Staking your NFT transfers ownership to (this) contract until you unstake it.\r\n     * When an NFT is staked you will earn Goop, which can be used within the illogics\r\n     * ecosystem to procure items we have for sale.\r\n     */\r\n    function stakeNFT(uint256[] calldata _tokenIds) external {\r\n        require(stakingState, \"staking not enabled\");\r\n\r\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\r\n            require(ownerOf(_tokenIds[i]) == _msgSender(), \"you are not the owner\");\r\n\r\n            safeTransferFrom(_msgSender(), address(this), _tokenIds[i]);\r\n\r\n            stakedToken[_tokenIds[i]].ownerOfNFT = _msgSender();\r\n            stakedToken[_tokenIds[i]].timestamp = block.timestamp;\r\n            staker[_msgSender()].push(_tokenIds[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice unstaking a token that has unrealized Goop forfeits the Goop associated\r\n     * with the token(s) being unstaked. This was done intentionally as a holder may\r\n     * not to pay the gas costs associated with claiming Goop. Please see unstakeAndClaim\r\n     * to also claim Goop.\r\n     *\r\n     * Unstaking your NFT transfers ownership back to the address that staked it.\r\n     * When an NFT is unstaked, you will no longer be earning Goop.\r\n     */\r\n    function unstakeNFT(uint256[] calldata _tokenIds) public {\r\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\r\n\r\n            require(stakedToken[_tokenIds[i]].ownerOfNFT == _msgSender(), \"you are not the owner\");\r\n            require(canBeUnstaked(_tokenIds[i]), \"token in reroll or cool down period\");\r\n\r\n            _transfer(address(this), _msgSender(), _tokenIds[i]);\r\n\r\n            delete stakedToken[_tokenIds[i]].ownerOfNFT;\r\n            delete stakedToken[_tokenIds[i]].timestamp;\r\n            delete stakedToken[_tokenIds[i]].lastRerollPeriod;\r\n\r\n            /**\r\n             * @dev - iterates the array of tokens staked and pops the one being unstaked\r\n             */\r\n            for (uint256 j = 0; j < staker[_msgSender()].length; j++) {\r\n                if (staker[_msgSender()][j] == _tokenIds[i]) {\r\n                    staker[_msgSender()][j] = staker[_msgSender()][staker[_msgSender()].length - 1];\r\n                    staker[_msgSender()].pop();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev unstakeAndClaim will unstake the token and realize the Goop that it has earned.\r\n     * If you are not interested in earning Goop you can call unstaske and save the gas.\r\n     * Unstaking your NFT transfers ownership back to the address that staked it.\r\n     * When an NFT is unstaked you will no longer be earning Goop.\r\n     */\r\n    function unstakeAndClaim(uint256[] calldata _tokenIds) external {\r\n        claimGoop();\r\n        unstakeNFT(_tokenIds);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     * - An address requests a reroll for a tokenId, the tokenDNA is updated after the subsequent VRF request.\r\n     * - To prevent the sale of a token prior to the tokenDNA and metadata being refreshed in the marketplace,\r\n     *   we have implemented a cool-down period. The cool down period will allow a token to be unstaked when\r\n     *   it is not in the previous period\r\n     */\r\n    function canBeUnstaked(uint256 _tokenId) public view returns (bool) {\r\n        // token has never been rerolled and can be unstaked\r\n        if (stakedToken[_tokenId].lastRerollPeriod == 0) {\r\n            return true;\r\n        }\r\n        // token waiting for next VRF and can not be unstaked\r\n        if (stakedToken[_tokenId].lastRerollPeriod == periodCounter) {\r\n            return false;\r\n        }\r\n        // token in cooldown period after the reroll and can not be unstaked\r\n        if (periodCounter - stakedToken[_tokenId].lastRerollPeriod == 1) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev returns an array of tokens that an address has staked\r\n     */\r\n    function ownerStaked(address _addr) public view returns (uint256[] memory) {\r\n        return staker[_addr];\r\n    }\r\n\r\n    // enables safeTransferFrom function to send ERC721 tokens to this contract (used in staking)\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tId,\r\n        bytes calldata data\r\n    ) external pure returns (bytes4) {\r\n        return bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"));\r\n    }\r\n\r\n    /**********************************************************\r\n     *\r\n     *  GOOP ECOSYSTEM\r\n     *\r\n     **********************************************************/\r\n\r\n    /**\r\n     * @notice\r\n     *  - Goop is an internal point system, there are no goop tokenomics as it\r\n     *    is minted when claimed and burned when spent. As such the amount of goop\r\n     *    in circulation is constantly changing.\r\n     *  - Goop may resemble an ERC20, it can be transferred or donated P2P, however\r\n     *    it cannot be traded on an exchange and has no monetary value, further it\r\n     *    can only be used in the illogics ecosystem.\r\n     *  - Goop exists in 2 forms, claimed and unclaimed, in order to spend goop\r\n     *    it must be claimed.\r\n     */\r\n\r\n    /**\r\n     * @dev Goop earned as a result of staking but not yet claimed/realized\r\n     */\r\n    function unclaimedGoop() external view returns (uint256) {\r\n        address addr = _msgSender();\r\n        uint256 stakedTime;\r\n\r\n        for (uint256 i = 0; i < staker[addr].length; i++) {\r\n\r\n            stakedTime += block.timestamp - stakedToken[staker[addr][i]].timestamp;\r\n        }\r\n        return (stakedTime / GOOP_INTERVAL) * goopPerInterval;\r\n    }\r\n\r\n    /**\r\n     * @dev claim earned Goop without unstaking\r\n     */\r\n    function claimGoop() public {\r\n        require(claimStatus, \"GOOP: claim not enabled\");\r\n\r\n        address addr = _msgSender();\r\n        uint256 stakedTime;\r\n\r\n        for (uint256 i = 0; i < staker[addr].length; i++) {\r\n            stakedTime += block.timestamp - stakedToken[staker[addr][i]].timestamp;\r\n            stakedToken[staker[addr][i]].timestamp = block.timestamp;\r\n        }\r\n        _mintGoop(addr, (stakedTime / GOOP_INTERVAL) * goopPerInterval);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @dev Moves `amount` Goop from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     */\r\n    function transferGoop(address _to, uint256 _amount) public returns (bool) {\r\n        address owner = _msgSender();\r\n        _transferGoop(owner, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of Goop from `sender` to `recipient`.\r\n     */\r\n    function _transferGoop(\r\n        address from,\r\n        address to,\r\n        uint256 _amount\r\n    ) internal {\r\n        require(transferState, \"GOOP: transfer not enabled\");\r\n        require(from != address(0), \"GOOP: transfer from the zero address\");\r\n        require(to != address(0), \"GOOP: transfer to the zero address\");\r\n\r\n        uint256 fromBalance = goop[from];\r\n        require(goop[from] >= _amount, \"GOOP: insufficient balance \");\r\n        unchecked {\r\n            goop[from] = fromBalance - _amount;\r\n        }\r\n        goop[to] += _amount;\r\n    }\r\n\r\n    /**\r\n     * @dev admin function to mint Goop to a single address\r\n     */\r\n    function mintGoop(address _addr, uint256 _goop) external override onlyAdmin {\r\n        _mintGoop(_addr, _goop);\r\n    }\r\n\r\n    /**\r\n     * @dev admin function to mint Goop to multiple addresses\r\n     */\r\n    function mintGoopBatch(address[] calldata _addr, uint256 _goop) external override onlyAdmin {\r\n        for (uint256 i = 0; i < _addr.length; i++) {\r\n            _mintGoop(_addr[i], _goop);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Creates `amount` Goop and assigns them to `account`\r\n     */\r\n    function _mintGoop(address account, uint256 amount) internal {\r\n        require(account != address(0), \"GOOP: mint to the zero address\");\r\n\r\n        totalGoopSupply += amount;\r\n        goop[account] += amount;\r\n    }\r\n\r\n    /**\r\n     * @dev admin function to burn Goop from a single address\r\n     */\r\n    function burnGoop(address _addr, uint256 _goop) external override onlyAdmin {\r\n        _burnGoop(_addr, _goop);\r\n    }\r\n\r\n    /**\r\n     * @dev admin function to burn Goop from multiple addresses\r\n     */\r\n    function burnGoopBatch(address[] calldata _addr, uint256 _goop) external override onlyAdmin {\r\n        for (uint256 i = 0; i < _addr.length; i++) {\r\n            _burnGoop(_addr[i], _goop);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev permits Goop to be spent within the illogics ecosystem\r\n     */\r\n    function spendGoop(uint256 _item, uint256 _count) public override {\r\n        addressPurchases[_msgSender()][_item] += _count;\r\n\r\n        require(spendState, \"GOOP: spending not enabled\");\r\n        require(saleItems[_item].saleStatus, \"Item not currently for sale\");\r\n        require(saleItems[_item].supply >= _count, \"Item sold out.\");\r\n        require(addressPurchases[_msgSender()][_item] <= saleItems[_item].maxPurchase, \"Exceeded allowed purchase quantity\");\r\n\r\n        uint256 cost = _count * saleItems[_item].price;\r\n        require(goop[_msgSender()] >= cost, \"Insufficient goop.\");\r\n\r\n        _burnGoop(_msgSender(), cost);\r\n\r\n        saleItems[_item].supply -= _count;\r\n        totalGoopSpent += _count * saleItems[_item].price;\r\n\r\n        emit spentGoop(_msgSender(), _item, _count);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` Goop from `account`\r\n     */\r\n    function _burnGoop(address account, uint256 amount) internal {\r\n        require(account != address(0), \"GOOP: burn from the zero address\");\r\n\r\n        uint256 accountBalance = goop[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            goop[account] = accountBalance - amount;\r\n        }\r\n        totalGoopSupply -= amount;\r\n    }\r\n\r\n    /**********************************************************\r\n     *\r\n     *  GOOP SALE\r\n     *\r\n     **********************************************************/\r\n\r\n    /**\r\n     * @dev creates a new sale item and sets the sale elements\r\n     */\r\n    function createNewSale(\r\n        string memory _description,\r\n        bool _saleState,\r\n        uint256 _price,\r\n        uint256 _supply,\r\n        uint256 _maxPurchase\r\n    ) external onlyAdmin {\r\n        saleId++;\r\n        saleItems[saleId] = Sale(_description, _saleState, _price, _supply, _maxPurchase);\r\n    }\r\n\r\n    /**\r\n     * @dev changes the description of the selected item\r\n     */\r\n    function setSaleDescription(uint256 _item, string memory _description) external onlyAdmin {\r\n        saleItems[_item].description = _description;\r\n    }\r\n\r\n    /**\r\n     * @dev enable/disable the sale of the selected item     \r\n     */\r\n    function setSaleStatus(uint256 _item, bool _saleStatus) external onlyAdmin {\r\n        saleItems[_item].saleStatus = _saleStatus;\r\n    }\r\n\r\n    /**\r\n     * @dev changes the sale price of the selected item\r\n     */\r\n    function setSalePrice(uint256 _item, uint256 _price) external onlyAdmin {\r\n        saleItems[_item].price = _price;\r\n    }\r\n\r\n    /**\r\n     * @dev changes supply of the selected item\r\n     */\r\n    function setSaleSupply(uint256 _item, uint256 _supply) external onlyAdmin {\r\n        saleItems[_item].supply = _supply;\r\n    }\r\n\r\n    /**\r\n     * @dev changes the max amount an address can purchase of the selected item\r\n     */\r\n    function setMaxPurchase(uint256 _item, uint256 _maxPurchase) external onlyAdmin {\r\n        saleItems[_item].maxPurchase = _maxPurchase;\r\n    }\r\n\r\n    /**********************************************************\r\n     *\r\n     *  OPENSEA\r\n     *\r\n     **********************************************************/\r\n\r\n    function setProxyRegistryAddress(address _proxyRegistryAddress) external onlyAdmin {\r\n        proxyRegistryAddress = _proxyRegistryAddress;\r\n    }\r\n\r\n    function flipProxyState(address proxyAddress) public onlyOwner {\r\n        projectProxy[proxyAddress] = !projectProxy[proxyAddress];\r\n    }\r\n\r\n    function isApprovedForAll(address _owner, address operator) public view override returns (bool) {\r\n        OpenSeaProxyRegistry proxyRegistry = OpenSeaProxyRegistry(proxyRegistryAddress);\r\n        if (address(proxyRegistry.proxies(_owner)) == operator || projectProxy[operator]) return true;\r\n        return super.isApprovedForAll(_owner, operator);\r\n    }\r\n}\r\n\r\ncontract OwnableDelegateProxy {}\r\n\r\ncontract OpenSeaProxyRegistry {\r\n    mapping(address => OwnableDelegateProxy) public proxies;\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_VRF_keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_VRF_Fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_linkToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"periodCounter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"randomNumber\",\"type\":\"uint256\"}],\"name\":\"RecievedRandomNumber\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"RequestedRandomNumber\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"item\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"spentGoop\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GOOP_INTERVAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REROLL_COST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VRF_fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VRF_keyHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addressPurchases\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToMinted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"batchSafeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tIds\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_goop\",\"type\":\"uint256\"}],\"name\":\"burnGoop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addr\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_goop\",\"type\":\"uint256\"}],\"name\":\"burnGoopBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"canBeUnstaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimGoop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"collectionDNA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_saleState\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPurchase\",\"type\":\"uint256\"}],\"name\":\"createNewSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxyAddress\",\"type\":\"address\"}],\"name\":\"flipProxyState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get1of1\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tId\",\"type\":\"uint256\"}],\"name\":\"getTokenDNA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"goop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"goopPerInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"illListMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tIds\",\"type\":\"uint256[]\"}],\"name\":\"isOwnerOf\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"labAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"link\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_goop\",\"type\":\"uint256\"}],\"name\":\"mintGoop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addr\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_goop\",\"type\":\"uint256\"}],\"name\":\"mintGoopBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"multiHelix\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"ownerStaked\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"projectProxy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"rawFulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestRandomNumber\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"reroll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rerollState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rollTracker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"saleItems\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"saleStatus\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPurchase\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_claimStatus\",\"type\":\"bool\"}],\"name\":\"setClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_goopPerInterval\",\"type\":\"uint256\"}],\"name\":\"setGoopPerInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_labAddress\",\"type\":\"address\"}],\"name\":\"setLabAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxMint\",\"type\":\"uint256\"}],\"name\":\"setMaxMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_item\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPurchase\",\"type\":\"uint256\"}],\"name\":\"setMaxPurchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setMintingState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxyRegistryAddress\",\"type\":\"address\"}],\"name\":\"setProxyRegistryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setRerollState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_item\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"setSaleDescription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_item\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setSalePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_item\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_saleStatus\",\"type\":\"bool\"}],\"name\":\"setSaleStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_item\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"}],\"name\":\"setSaleSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setSpendState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setStakingState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setTransferState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setVRFFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"}],\"name\":\"setVRFKeyHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setVerifyVRF\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_item\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"spendGoop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spendState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"stakeNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakedToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"ownerOfNFT\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRerollPeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"staker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalGoopSpent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalGoopSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferGoop\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unclaimedGoop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"unstakeAndClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"unstakeNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifyVRF\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "illogics", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "aa77729d3466ca35ae8d28b3bbac7cc36a5031efdc430821c02bc31a238af4450000000000000000000000000000000000000000000000001bc16d674ec80000000000000000000000000000f0d54349addcf704f77ae15b96510dea15cb7952000000000000000000000000514910771af9ca656af840dff83e8264ecf986ca", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://75c4ad51e850e5cb1dfdbd6f4783e73cc68049be7e864248ce99350befd24c64"}