{"SourceCode": "// File: contracts/DkargoPrefix.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n/// @title DkargoPrefix\r\n/// @notice \ub514\uce74\ub974\uace0 \ucee8\ud2b8\ub799\ud2b8 \uc5ec\ubd80 \uc2dd\ubcc4\uc6a9 prefix \ucee8\ud2b8\ub799\ud2b8 \uc815\uc758\r\n/// @author jhhong\r\ncontract DkargoPrefix {\r\n    \r\n    string internal _dkargoPrefix; // \ub514\uce74\ub974\uace0-\ud504\ub9ac\ud53d\uc2a4\r\n    \r\n    /// @author jhhong\r\n    /// @notice \ub514\uce74\ub974\uace0 \ud504\ub9ac\ud53d\uc2a4\ub97c \ubc18\ud658\ud55c\ub2e4.\r\n    /// @return \ub514\uce74\ub974\uace0 \ud504\ub9ac\ud53d\uc2a4 (string)\r\n    function getDkargoPrefix() public view returns(string memory) {\r\n        return _dkargoPrefix;\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice \ub514\uce74\ub974\uace0 \ud504\ub9ac\ud53d\uc2a4\ub97c \uc124\uc815\ud55c\ub2e4.\r\n    /// @param prefix \uc124\uc815\ud560 \ud504\ub9ac\ud53d\uc2a4\r\n    function _setDkargoPrefix(string memory prefix) internal {\r\n        _dkargoPrefix = prefix;\r\n    }\r\n}\r\n\r\n// File: contracts/authority/Ownership.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n/// @title Onwership\r\n/// @dev \uc624\ub108 \ud655\uc778 \ubc0f \uc18c\uc720\uad8c \uc774\uc804 \ucc98\ub9ac\r\n/// @author jhhong\r\ncontract Ownership {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed old, address indexed expected);\r\n\r\n    /// @author jhhong\r\n    /// @notice \uc18c\uc720\uc790\ub9cc \uc811\uadfc\ud560 \uc218 \uc788\uc74c\uc744 \uba85\uc2dc\ud55c\ub2e4.\r\n    modifier onlyOwner() {\r\n        require(isOwner() == true, \"Ownership: only the owner can call\");\r\n        _;\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice \ucee8\ud2b8\ub799\ud2b8 \uc0dd\uc131\uc790\uc774\ub2e4.\r\n    constructor() internal {\r\n        emit OwnershipTransferred(_owner, msg.sender);\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice \uc18c\uc720\uad8c\uc744 \ub118\uaca8\uc900\ub2e4.\r\n    /// @param expected \uc0c8\ub85c\uc6b4 \uc624\ub108 \uacc4\uc815\r\n    function transferOwnership(address expected) public onlyOwner {\r\n        require(expected != address(0), \"Ownership: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, expected);\r\n        _owner = expected;\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice \uc624\ub108 \uc8fc\uc18c\ub97c \ubc18\ud658\ud55c\ub2e4.\r\n    /// @return \uc624\ub108 \uc8fc\uc18c\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice \uc18c\uc720\uc790\uc778\uc9c0 \ud655\uc778\ud55c\ub2e4.\r\n    /// @return \ud655\uc778 \uacb0\uacfc (boolean)\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n}\r\n\r\n// File: contracts/libs/refs/SafeMath.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\r\n     * @dev Get it via `npm install @openzeppelin/contracts@next`.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/chain/AddressChain.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n/// @title AddressChain\r\n/// @notice \uc8fc\uc18c \uccb4\uc778 \uc815\uc758 \ubc0f \uad00\ub9ac\r\n/// @dev \ud1a0\ud070\ud640\ub354, \ud68c\uc6d0\uc815\ubcf4 \ub4f1\uacfc \uac19\uc740 \uc720\uc800 \ub9ac\uc2a4\ud2b8 \uad00\ub9ac\uc5d0 \uc4f0\uc778\ub2e4.\r\n/// @author jhhong\r\ncontract AddressChain {\r\n    using SafeMath for uint256;\r\n\r\n    // \uad6c\uc870\uccb4 : \ub178\ub4dc \uc815\ubcf4\r\n    struct NodeInfo {\r\n        address prev; // \uc774\uc804 \ub178\ub4dc\r\n        address next; // \ub2e4\uc74c \ub178\ub4dc\r\n    }\r\n    // \uad6c\uc870\uccb4 : \ub178\ub4dc \uccb4\uc778\r\n    struct NodeList {\r\n        uint256 count; // \ub178\ub4dc\uc758 \ucd1d \uac1c\uc218\r\n        address head; // \uccb4\uc778\uc758 \uba38\ub9ac\r\n        address tail; // \uccb4\uc778\uc758 \uaf2c\ub9ac\r\n        mapping(address => NodeInfo) map; // \uacc4\uc815\uc5d0 \ub300\ud55c \ub178\ub4dc \uc815\ubcf4 \ub9e4\ud551\r\n    }\r\n\r\n    // \ubcc0\uc218 \uc120\uc5b8\r\n    NodeList private _slist; // \ub178\ub4dc \uccb4\uc778 (\uc2f1\uae00\ub9ac\uc2a4\ud2b8)\r\n\r\n    // \uc774\ubca4\ud2b8 \uc120\uc5b8\r\n    event AddressChainLinked(address indexed node); // \uc774\ubca4\ud2b8: \uccb4\uc778\uc5d0 \ucd94\uac00\ub428\r\n    event AddressChainUnlinked(address indexed node); // \uc774\ubca4\ud2b8: \uccb4\uc778\uc5d0\uc11c \ube60\uc9d0\r\n\r\n    /// @author jhhong\r\n    /// @notice \uccb4\uc778\uc5d0 \uc5f0\uacb0\ub41c \uc6d0\uc18c\uc758 \uac1c\uc218\ub97c \ubc18\ud658\ud55c\ub2e4.\r\n    /// @return \uccb4\uc778\uc5d0 \uc5f0\uacb0\ub41c \uc6d0\uc18c\uc758 \uac1c\uc218\r\n    function count() public view returns(uint256) {\r\n        return _slist.count;\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice \uccb4\uc778 \ud5e4\ub4dc \uc815\ubcf4\ub97c \ubc18\ud658\ud55c\ub2e4.\r\n    /// @return \uccb4\uc778 \ud5e4\ub4dc \uc815\ubcf4\r\n    function head() public view returns(address) {\r\n        return _slist.head;\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice \uccb4\uc778 \uaf2c\ub9ac \uc815\ubcf4\ub97c \ubc18\ud658\ud55c\ub2e4.\r\n    /// @return \uccb4\uc778 \uaf2c\ub9ac \uc815\ubcf4\r\n    function tail() public view returns(address) {\r\n        return _slist.tail;\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice node\uc758 \ub2e4\uc74c \ub178\ub4dc \uc815\ubcf4\ub97c \ubc18\ud658\ud55c\ub2e4.\r\n    /// @param node \ub178\ub4dc \uc815\ubcf4 (\uccb4\uc778\uc5d0 \uc5f0\uacb0\ub418\uc5b4 \uc788\uc744 \uc218\ub3c4 \uc788\uace0 \uc544\ub2d0 \uc218\ub3c4 \uc788\uc74c)\r\n    /// @return node\uc758 \ub2e4\uc74c \ub178\ub4dc \uc815\ubcf4\r\n    function nextOf(address node) public view returns(address) {\r\n        return _slist.map[node].next;\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice node\uc758 \uc774\uc804 \ub178\ub4dc \uc815\ubcf4\ub97c \ubc18\ud658\ud55c\ub2e4.\r\n    /// @param node \ub178\ub4dc \uc815\ubcf4 (\uccb4\uc778\uc5d0 \uc5f0\uacb0\ub418\uc5b4 \uc788\uc744 \uc218\ub3c4 \uc788\uace0 \uc544\ub2d0 \uc218\ub3c4 \uc788\uc74c)\r\n    /// @return node\uc758 \uc774\uc804 \ub178\ub4dc \uc815\ubcf4\r\n    function prevOf(address node) public view returns(address) {\r\n        return _slist.map[node].prev;\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice node\uac00 \uccb4\uc778\uc5d0 \uc5f0\uacb0\ub41c \uc0c1\ud0dc\uc778\uc9c0\ub97c \ud655\uc778\ud55c\ub2e4.\r\n    /// @param node \uccb4\uc778 \uc5f0\uacb0 \uc5ec\ubd80\ub97c \ud655\uc778\ud560 \ub178\ub4dc \uc8fc\uc18c\r\n    /// @return \uc5f0\uacb0 \uc5ec\ubd80 (boolean), true: \uc5f0\uacb0\ub428(linked), false: \uc5f0\uacb0\ub418\uc9c0 \uc54a\uc74c(unlinked)\r\n    function isLinked(address node) public view returns (bool) {\r\n        if(_slist.count == 1 && _slist.head == node && _slist.tail == node) {\r\n            return true;\r\n        } else {\r\n            return (_slist.map[node].prev == address(0) && _slist.map[node].next == address(0))? (false) :(true);\r\n        }\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice \uc0c8\ub85c\uc6b4 \ub178\ub4dc \uc815\ubcf4\ub97c \ub178\ub4dc \uccb4\uc778\uc5d0 \uc5f0\uacb0\ud55c\ub2e4.\r\n    /// @param node \ub178\ub4dc \uccb4\uc778\uc5d0 \uc5f0\uacb0\ud560 \ub178\ub4dc \uc8fc\uc18c\r\n    function _linkChain(address node) internal {\r\n        require(node != address(0), \"AddressChain: try to link to the zero address\");\r\n        require(!isLinked(node), \"AddressChain: the node is aleady linked\");\r\n        if(_slist.count == 0) {\r\n            _slist.head = _slist.tail = node;\r\n        } else {\r\n            _slist.map[node].prev = _slist.tail;\r\n            _slist.map[_slist.tail].next = node;\r\n            _slist.tail = node;\r\n        }\r\n        _slist.count = _slist.count.add(1);\r\n        emit AddressChainLinked(node);\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice node \ub178\ub4dc\ub97c \uccb4\uc778\uc5d0\uc11c \uc5f0\uacb0 \ud574\uc81c\ud55c\ub2e4.\r\n    /// @param node \ub178\ub4dc \uccb4\uc778\uc5d0\uc11c \uc5f0\uacb0 \ud574\uc81c\ud560 \ub178\ub4dc \uc8fc\uc18c\r\n    function _unlinkChain(address node) internal {\r\n        require(node != address(0), \"AddressChain: try to unlink to the zero address\");\r\n        require(isLinked(node), \"AddressChain: the node is aleady unlinked\");\r\n        address tempPrev = _slist.map[node].prev;\r\n        address tempNext = _slist.map[node].next;\r\n        if (_slist.head == node) {\r\n            _slist.head = tempNext;\r\n        }\r\n        if (_slist.tail == node) {\r\n            _slist.tail = tempPrev;\r\n        }\r\n        if (tempPrev != address(0)) {\r\n            _slist.map[tempPrev].next = tempNext;\r\n            _slist.map[node].prev = address(0);\r\n        }\r\n        if (tempNext != address(0)) {\r\n            _slist.map[tempNext].prev = tempPrev;\r\n            _slist.map[node].next = address(0);\r\n        }\r\n        _slist.count = _slist.count.sub(1);\r\n        emit AddressChainUnlinked(node);\r\n    }\r\n}\r\n\r\n// File: contracts/introspection/ERC165/IERC165.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n/// @title IERC165\r\n/// @dev EIP165 interface \uc120\uc5b8\r\n/// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n/// @author jhhong\r\ninterface IERC165 {\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: contracts/introspection/ERC165/ERC165.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n/// @title ERC165\r\n/// @dev EIP165 interface \uad6c\ud604\r\n/// @author jhhong\r\ncontract ERC165 is IERC165 {\r\n    \r\n    mapping(bytes4 => bool) private _infcs; // INTERFACE ID\ubcc4 \uc9c0\uc6d0\uc5ec\ubd80\ub97c \uc800\uc7a5\ud558\uae30 \uc704\ud55c \ub9e4\ud551 \ubcc0\uc218\r\n\r\n    /// @author jhhong\r\n    /// @notice \ucee8\ud2b8\ub799\ud2b8 \uc0dd\uc131\uc790\uc774\ub2e4.\r\n    /// @dev bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\r\n    constructor() internal {\r\n        _registerInterface(0x01ffc9a7); // supportsInterface()\uc758 INTERFACE ID \ub4f1\ub85d\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice \ucee8\ud2b8\ub799\ud2b8\uac00 INTERFACE ID\ub97c \uc9c0\uc6d0\ud558\ub294\uc9c0\uc758 \uc5ec\ubd80\ub97c \ubc18\ud658\ud55c\ub2e4.\r\n    /// @param infcid \uc9c0\uc6d0\uc5ec\ubd80\ub97c \ud655\uc778\ud560 INTERFACE ID (Function Selector)\r\n    /// @return \uc9c0\uc6d0\uc5ec\ubd80 (boolean)\r\n    function supportsInterface(bytes4 infcid) external view returns (bool) {\r\n        return _infcs[infcid];\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice INTERFACE ID\ub97c \ub4f1\ub85d\ud55c\ub2e4.\r\n    /// @param infcid \ub4f1\ub85d\ud560 INTERFACE ID (Function Selector)\r\n    function _registerInterface(bytes4 infcid) internal {\r\n        require(infcid != 0xffffffff, \"ERC165: invalid interface id\");\r\n        _infcs[infcid] = true;\r\n    }\r\n}\r\n\r\n// File: contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n/// @title IERC20\r\n/// @notice EIP20 interface \uc120\uc5b8\r\n/// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n/// @author jhhong\r\ninterface IERC20 {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n\r\n/// @title ERC20\r\n/// @notice EIP20 interface \uc815\uc758 \ubc0f mint/burn (internal) \ud568\uc218 \uad6c\ud604\r\n/// @author jhhong\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n    \r\n    uint256 private _supply; // \ucd1d \ud1b5\ud654\ub7c9\r\n    mapping(address => uint256) private _balances; // \uacc4\uc815\ubcc4 \ud1b5\ud654\ub7c9 \uc800\uc7a5\uc18c\r\n    mapping(address => mapping(address => uint256)) private _allowances; // \uac01 \uacc4\uc815\uc5d0 \ub300\ud574 \"\uacc4\uc815\ubcc4 \uc704\uc784\ub7c9\"\uc744 \uc800\uc7a5\r\n    \r\n    /// @author jhhong\r\n    /// @notice \ucee8\ud2b8\ub799\ud2b8 \uc0dd\uc131\uc790\uc774\ub2e4.\r\n    /// @param supply \ucd08\uae30 \ubc1c\ud589\ub7c9\r\n    constructor(uint256 supply) internal {\r\n        uint256 pebs = supply;\r\n        _mint(msg.sender, pebs);\r\n    }\r\n    \r\n    /// @author jhhong\r\n    /// @notice \uacc4\uc815(spender)\uc5d0\uac8c \ud1b5\ud654\ub7c9(value)\uc744 \uc704\uc784\ud55c\ub2e4.\r\n    /// @param spender \uc704\uc784\ubc1b\uc744 \uacc4\uc815\r\n    /// @param amount \uc704\uc784\ud560 \ud1b5\ud654\ub7c9\r\n    /// @return \uc815\uc0c1\ucc98\ub9ac \uc2dc true\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n    \r\n    /// @author jhhong\r\n    /// @notice \uacc4\uc815(recipient)\uc5d0\uac8c \ud1b5\ud654\ub7c9(amount)\uc744 \uc804\uc1a1\ud55c\ub2e4.\r\n    /// @param recipient \uc804\uc1a1\ubc1b\uc744 \uacc4\uc815\r\n    /// @param amount \uae08\uc561\r\n    /// @return \uc815\uc0c1\ucc98\ub9ac \uc2dc true\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n    \r\n    /// @author jhhong\r\n    /// @notice \uacc4\uc815(sender)\uc774 \uacc4\uc815(recipient)\uc5d0\uac8c \ud1b5\ud654\ub7c9(amount)\uc744 \uc804\uc1a1\ud55c\ub2e4.\r\n    /// @param sender \uc804\uc1a1\ud560 \uacc4\uc815\r\n    /// @param recipient \uc804\uc1a1\ubc1b\uc744 \uacc4\uc815\r\n    /// @param amount \uae08\uc561\r\n    /// @return \uc815\uc0c1\ucc98\ub9ac \uc2dc true\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice \ubc1c\ud589\ub41c \ucd1d \ud1b5\ud654\ub7c9\uc744 \ubc18\ud658\ud55c\ub2e4.\r\n    /// @return \ucd1d \ud1b5\ud654\ub7c9\r\n    function totalSupply() public view returns (uint256) {\r\n        return _supply;\r\n    }\r\n    \r\n    /// @author jhhong\r\n    /// @notice \uacc4\uc815(account)\uc774 \ubcf4\uc720\ud55c \ud1b5\ud654\ub7c9\uc744 \ubc18\ud658\ud55c\ub2e4.\r\n    /// @param account \uacc4\uc815\r\n    /// @return \uacc4\uc815(account)\uc774 \ubcf4\uc720\ud55c \ud1b5\ud654\ub7c9\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    \r\n    /// @author jhhong\r\n    /// @notice \uacc4\uc815(approver)\uc774 \uacc4\uc815(spender)\uc5d0\uac8c \uc704\uc784\ud55c \ud1b5\ud654\ub7c9\uc744 \ubc18\ud658\ud55c\ub2e4.\r\n    /// @param approver \uc704\uc784\ud560 \uacc4\uc815\r\n    /// @param spender \uc704\uc784\ubc1b\uc744 \uacc4\uc815\r\n    /// @return \uacc4\uc815(approver)\uc774 \uacc4\uc815(spender)\uc5d0\uac8c \uc704\uc784\ud55c \ud1b5\ud654\ub7c9\r\n    function allowance(address approver, address spender) public view returns (uint256) {\r\n        return _allowances[approver][spender];\r\n    }\r\n    \r\n    /// @author jhhong\r\n    /// @notice \uacc4\uc815(approver)\uc774 \uacc4\uc815(spender)\uc5d0\uac8c \ud1b5\ud654\ub7c9(value)\uc744 \uc704\uc784\ud55c\ub2e4.\r\n    /// @param approver \uc704\uc784\ud560 \uacc4\uc815\r\n    /// @param spender \uc704\uc784\ubc1b\uc744 \uacc4\uc815\r\n    /// @param value \uc704\uc784\ud560 \ud1b5\ud654\ub7c9\r\n    function _approve(address approver, address spender, uint256 value) internal {\r\n        require(approver != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[approver][spender] = value;\r\n        emit Approval(approver, spender, value);\r\n    }\r\n    \r\n    /// @author jhhong\r\n    /// @notice \uacc4\uc815(sender)\uc774 \uacc4\uc815(recipient)\uc5d0\uac8c \ud1b5\ud654\ub7c9(amount)\uc744 \uc804\uc1a1\ud55c\ub2e4.\r\n    /// @param sender \uc704\uc784\ud560 \uacc4\uc815\r\n    /// @param recipient \uc704\uc784\ubc1b\uc744 \uacc4\uc815\r\n    /// @param amount \uae08\uc561\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice \ud1b5\ud654\ub7c9(amount)\ub9cc\ud07c \uc8fc\uc870\ud558\uc5ec \uacc4\uc815(account)\uc758 \ud1b5\ud654\ub7c9\uc5d0 \ub354\ud574\uc900\ub2e4.\r\n    /// @dev ERC20Mint\uc5d0 \uc815\uc758\ud558\uba74 private \uc18d\uc131\uc778 supply\uc640 balances\uc5d0 access\ud560 \uc218 \uc5c6\uc5b4\uc11c ERC20\uc5d0 internal\ub85c \uc815\uc758\ud568.\r\n    /// @param account \uc8fc\uc870\ub41c \ud1b5\ud654\ub7c9\uc744 \ubc1b\uc744 \uacc4\uc815\r\n    /// @param amount \uc8fc\uc870\ud560 \ud1b5\ud654\ub7c9\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _supply = _supply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice \ud1b5\ud654\ub7c9(value)\ub9cc\ud07c \uc18c\uac01\ud558\uc5ec \uacc4\uc815(account)\uc758 \ud1b5\ud654\ub7c9\uc5d0\uc11c \ube80\ub2e4.\r\n    /// @dev ERC20Mint\uc5d0 \uc815\uc758\ud558\uba74 private \uc18d\uc131\uc778 supply\uc640 balances\uc5d0 access\ud560 \uc218 \uc5c6\uc5b4\uc11c ERC20\uc5d0 internal\ub85c \uc815\uc758\ud568.\r\n    /// @param account \ud1b5\ud654\ub7c9\uc744 \uc18c\uac01\uc2dc\ud0ac \uacc4\uc815\r\n    /// @param value \uc18c\uac01\uc2dc\ud0ac \ud1b5\ud654\ub7c9\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        _balances[account] = _balances[account].sub(value, \"ERC20: burn amount exceeds balance\");\r\n        _supply = _supply.sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n}\r\n\r\n// File: contracts/token/ERC20/ERC20Safe.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n\r\n/// @title ERC20Safe\r\n/// @notice Approve Bug Fix \ubc84\uc804 (\uc911\ubcf5 \uc704\uc784 \ubc29\uc9c0)\r\n/// @author jhhong\r\ncontract ERC20Safe is ERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    /// @author jhhong\r\n    /// @notice \uacc4\uc815(spender)\uc5d0\uac8c \ud1b5\ud654\ub7c9(amount)\uc744 \uc704\uc784\ud55c\ub2e4.\r\n    /// @dev \uac12\uc774 \ub36e\uc5b4\uc368\uc9d0\uc744 \ubc29\uc9c0\ud558\uae30 \uc704\ud574 \uae30\uc874\uc5d0 \uc704\uc784\ubc1b\uc740 \ud1b5\ud654\ub7c9\uc774 0\uc778 \uacbd\uc6b0\uc5d0\ub9cc \ud638\ucd9c\uc744 \ud5c8\uc6a9\ud55c\ub2e4.\r\n    /// @param spender \uc704\uc784\ubc1b\uc744 \uacc4\uc815\r\n    /// @param amount \uc704\uc784\ud560 \ud1b5\ud654\ub7c9\r\n    /// @return \uc815\uc0c1\ucc98\ub9ac \uc2dc true\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        require((amount == 0) || (allowance(msg.sender, spender) == 0), \"ERC20Safe: approve from non-zero to non-zero allowance\");\r\n        return super.approve(spender, amount);\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice \uacc4\uc815(spender)\uc5d0 \uc704\uc784\ub41c \ud1b5\ud654\ub7c9\uc5d0 \ud1b5\ud654\ub7c9(addedValue)\ub97c \ub354\ud55c\uac12\uc744 \uc704\uc784\ud55c\ub2e4.\r\n    /// @dev \uc704\uc784\ub41c \ud1b5\ud654\ub7c9\uc774 \uc788\uc744 \uacbd\uc6b0, \ud1b5\ud654\ub7c9 \uc99d\uac00\ub294 \uc0c1\uae30 \ud568\uc218\ub85c \uc218\ud589\ud560 \uac83\r\n    /// @param spender \uc704\uc784\ubc1b\uc744 \uacc4\uc815\r\n    /// @param addedValue \ub354\ud574\uc9c8 \ud1b5\ud654\ub7c9\r\n    /// @return \uc815\uc0c1\ucc98\ub9ac \uc2dc true\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        uint256 amount = allowance(msg.sender, spender).add(addedValue);\r\n        return super.approve(spender, amount);\r\n    }\r\n    \r\n    /// @author jhhong\r\n    /// @notice \uacc4\uc815(spender)\uc5d0 \uc704\uc784\ub41c \ud1b5\ud654\ub7c9\uc5d0 \ud1b5\ud654\ub7c9(subtractedValue)\ub97c \ube80\uac12\uc744 \uc704\uc784\ud55c\ub2e4.\r\n    /// @dev \uc704\uc784\ub41c \ud1b5\ud654\ub7c9\uc774 \uc788\uc744 \uacbd\uc6b0, \ud1b5\ud654\ub7c9 \uac10\uc18c\ub294 \uc0c1\uae30 \ud568\uc218\ub85c \uc218\ud589\ud560 \uac83\r\n    /// @param spender \uc704\uc784\ubc1b\uc744 \uacc4\uc815\r\n    /// @param subtractedValue \ube7c\uc9c8 \ud1b5\ud654\ub7c9\r\n    /// @return \uc815\uc0c1\ucc98\ub9ac \uc2dc true\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        uint256 amount = allowance(msg.sender, spender).sub(subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        return super.approve(spender, amount);\r\n    }\r\n}\r\n\r\n// File: contracts/DkargoToken.sol\r\n\r\npragma solidity >=0.5.0 <0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title DkargoToken\r\n/// @notice \ub514\uce74\ub974\uace0 \ud1a0\ud070 \ucee8\ud2b8\ub799\ud2b8 \uc815\uc758 (\uba54\uc778\ub137 deploy\uc6a9)\r\n/// @dev burn \uae30\ub2a5 \ucd94\uac00 (public)\r\n/// @author jhhong\r\ncontract DkargoToken is Ownership, ERC20Safe, AddressChain, ERC165, DkargoPrefix {\r\n    \r\n    string private _name; // \ud1a0\ud070 \uc774\ub984\r\n    string private _symbol; // \ud1a0\ud070 \uc2ec\ubcfc\r\n    \r\n    /// @author jhhong\r\n    /// @notice \ucee8\ud2b8\ub799\ud2b8 \uc0dd\uc131\uc790\uc774\ub2e4.\r\n    /// @dev \ucd08\uae30 \ubc1c\ud589\ub7c9\uc774 \uc788\uc744 \uacbd\uc6b0, msg.sender\ub97c \ud640\ub354 \ub9ac\uc2a4\ud2b8\uc5d0 \ucd94\uac00\ud55c\ub2e4.\r\n    /// @param name \ud1a0\ud070 \uc774\ub984\r\n    /// @param symbol \ud1a0\ud070 \uc2ec\ubcfc\r\n    /// @param supply \ucd08\uae30 \ubc1c\ud589\ub7c9\r\n    constructor(string memory name, string memory symbol, uint256 supply) ERC20(supply) public {\r\n        _setDkargoPrefix(\"token\"); // \ud504\ub9ac\ud53d\uc2a4 \uc124\uc815 (token)\r\n        _registerInterface(0x946edbed); // INTERFACE ID \ub4f1\ub85d (getDkargoPrefix)\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _linkChain(msg.sender);\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice \ubcf8\uc778\uc758 \ubcf4\uc720\uae08\uc561 \uc911 \uc9c0\uc815\ub41c \uae08\uc561\ub9cc\ud07c \uc18c\uac01\ud55c\ub2e4.\r\n    /// @param amount \uc18c\uac01\uc2dc\ud0ac \ud1b5\ud654\ub7c9\r\n    function burn(uint256 amount) external {\r\n        _burn(msg.sender, amount);\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice \ud1a0\ud070\uc744 \uc804\uc1a1\ud55c\ub2e4. (\uc804\uc1a1\uc8fc\uccb4: msg.sender)\r\n    /// @dev \uc804\uc1a1 \ud6c4 \ubcc0\uacbd\ub41c \ud1a0\ud070 \ud640\ub354 \uc0c1\ud0dc\ub97c \uccb4\uc778\uc5d0 \uae30\ub85d\ud55c\ub2e4.\r\n    /// @param to \ud1a0\ud070\uc744 \ubc1b\uc744 \uc8fc\uc18c\r\n    /// @param value \uc804\uc1a1 \uae08\uc561 (\ud1a0\ud070\ub7c9)\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        bool ret = super.transfer(to, value);\r\n        if(isLinked(msg.sender) && balanceOf(msg.sender) == 0) {\r\n            _unlinkChain(msg.sender);\r\n        }\r\n        if(!isLinked(to) && balanceOf(to) > 0) {\r\n            _linkChain(to);\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice \ud1a0\ud070\uc744 \uc804\uc1a1\ud55c\ub2e4. (\uc804\uc1a1\uc8fc\uccb4: from)\r\n    /// @dev \uc804\uc1a1 \ud6c4 \ubcc0\uacbd\ub41c \ud1a0\ud070 \ud640\ub354 \uc0c1\ud0dc\ub97c \uccb4\uc778\uc5d0 \uae30\ub85d\ud55c\ub2e4.\r\n    /// @param from \ud1a0\ud070\uc744 \ubcf4\ub0bc \uacc4\uc815\r\n    /// @param to \ud1a0\ud070\uc744 \ubc1b\uc744 \uacc4\uc815\r\n    /// @param value \uc804\uc1a1 \uae08\uc561 (\ud1a0\ud070\ub7c9)\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        bool ret = super.transferFrom(from, to, value);\r\n        if(isLinked(from) && balanceOf(from) == 0) {\r\n            _unlinkChain(from);\r\n        }\r\n        if(!isLinked(to) && balanceOf(to) > 0) {\r\n            _linkChain(to);\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice \ud1a0\ud070\uc758 \uc774\ub984\uc744 \ubc18\ud658\ud55c\ub2e4.\r\n    /// @return \ud1a0\ud070 \uc774\ub984\r\n    function name() public view returns(string memory) {\r\n        return _name;\r\n    }\r\n    \r\n    /// @author jhhong\r\n    /// @notice \ud1a0\ud070\uc758 \uc2ec\ubcfc\uc744 \ubc18\ud658\ud55c\ub2e4.\r\n    /// @return \ud1a0\ud070 \uc2ec\ubcfc\r\n    function symbol() public view returns(string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /// @author jhhong\r\n    /// @notice \ud1a0\ud070 \ub370\uc2dc\uba40\uc744 \ubc18\ud658\ud55c\ub2e4.\r\n    /// @dev \ub370\uc2dc\uba40 \uac12\uc740 18 (peb) \ub85c \uace0\uc815\uc774\ub2e4.\r\n    /// @return \ud1a0\ud070 \ub370\uc2dc\uba40\r\n    function decimals() public pure returns(uint256) {\r\n        return 18;\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"infcid\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tail\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"head\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDkargoPrefix\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"node\",\"type\":\"address\"}],\"name\":\"nextOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"approver\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"expected\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"node\",\"type\":\"address\"}],\"name\":\"prevOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"node\",\"type\":\"address\"}],\"name\":\"isLinked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"node\",\"type\":\"address\"}],\"name\":\"AddressChainLinked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"node\",\"type\":\"address\"}],\"name\":\"AddressChainUnlinked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"old\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"expected\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]", "ContractName": "DkargoToken", "CompilerVersion": "v0.5.6+commit.b259423e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000001027e72f1f128130880000000000000000000000000000000000000000000000000000000000000000000006644b6172676f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003444b410000000000000000000000000000000000000000000000000000000000", "EVMVersion": "constantinople", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://e89b01004bc315350f003204c48aec71d2bfef0998c836fd1c9f78a343296ab0"}