{"SourceCode": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.0;\n\n\n\n// Part: Base64\n\n/// @author Brecht Devos - <brecht@loopring.org>\n/// @notice Provides a function for encoding some bytes in base64\n/// @notice NOT BUILT BY SHEET FIGHTER TEAM. THANK YOU BRECHT DEVOS!\n/// @notice For any curious devs, this appears to be the same base64 encoding used by Ether Orcs and Anonymice\nlibrary Base64 {\n    string internal constant TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n    function encode(bytes memory data) internal pure returns (string memory) {\n        if (data.length == 0) return '';\n        \n        // load the table into memory\n        string memory table = TABLE;\n\n        // multiply by 4/3 rounded up\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\n\n        // add some extra buffer at the end required for the writing\n        string memory result = new string(encodedLen + 32);\n\n        assembly {\n            // set the actual output length\n            mstore(result, encodedLen)\n            \n            // prepare the lookup table\n            let tablePtr := add(table, 1)\n            \n            // input ptr\n            let dataPtr := data\n            let endPtr := add(dataPtr, mload(data))\n            \n            // result ptr, jump over length\n            let resultPtr := add(result, 32)\n            \n            // run over the input, 3 bytes at a time\n            for {} lt(dataPtr, endPtr) {}\n            {\n               dataPtr := add(dataPtr, 3)\n               \n               // read 3 bytes\n               let input := mload(dataPtr)\n               \n               // write 4 characters\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\n               resultPtr := add(resultPtr, 1)\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\n               resultPtr := add(resultPtr, 1)\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr( 6, input), 0x3F)))))\n               resultPtr := add(resultPtr, 1)\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(        input,  0x3F)))))\n               resultPtr := add(resultPtr, 1)\n            }\n            \n            // padding with '='\n            switch mod(mload(data), 3)\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\n        }\n        \n        return result;\n    }\n}\n\n// Part: IBridge\n\n/// @dev Interface for Bridge\ninterface IBridge {\n    function bridgeTokensCallback(address tokenOwner, uint256[] calldata tokenIds) external;\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@4.2.0/Address\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) private pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@4.2.0/Context\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@4.2.0/ECDSA\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return recover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return recover(hash, r, vs);\n        } else {\n            revert(\"ECDSA: invalid signature length\");\n        }\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return recover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`, `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (281): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (282): v \u2208 {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        require(\n            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\n            \"ECDSA: invalid signature 's' value\"\n        );\n        require(v == 27 || v == 28, \"ECDSA: invalid signature 'v' value\");\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        require(signer != address(0), \"ECDSA: invalid signature\");\n\n        return signer;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@4.2.0/IERC165\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@4.2.0/IERC721Receiver\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@4.2.0/Strings\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n\n// Part: SheetFighterUtilities\n\n/// @notice Utilities for Sheet Fighter\nlibrary SheetFighterUtilities {\n\n    /// @notice Substring string on range [_startIndex, _endIndex)\n    /// @param _str String to substring\n    /// @param _startIndex Start index, inclusive\n    /// @param _endIndex End index, exclusive\n    /// @return Substring from range [_startIndex, endIndex)\n    function substring(string memory _str, uint256 _startIndex, uint256 _endIndex) internal pure returns(string memory) {\n        bytes memory _strBytes = bytes(_str);\n        bytes memory _substringBytes = new bytes(_endIndex - _startIndex);\n        uint256 strIndex = 0;\n        for(uint256 i = _startIndex; i < _endIndex; i++) {\n            _substringBytes[strIndex] = _strBytes[i];\n            strIndex++;\n        } \n\n        return string(_substringBytes);\n    }\n\n\n    /// @notice Split a flavor text string, deliminated by a pipe (\"|\"), with four partitions \n    /// @dev This function does NOT test for edge cases, like consecutive pipes, or strings ending with a pipe\n    /// @param _str String to split, deliminated by a pipe: \"|\"\n    /// @return A list of strings, resulting from spliting _str\n    function splitFlavorTextString(string memory _str) internal pure returns(string[5] memory) {\n\n        bytes memory str = bytes(_str);\n        uint256 startIndex = 0;\n        uint partitionIndex = 0;\n\n        // Array to hold partitions\n        string[5] memory strArr;\n\n        for(uint256 i = 0; i < str.length; i++) {\n            if(str[i] == \"|\") {\n                // Save partition\n                strArr[partitionIndex] = substring(_str, startIndex, i);\n\n                // Continue to next partition\n                startIndex = i + 1;\n                partitionIndex += 1;\n            } \n        }\n\n        // Save last partition\n        strArr[4] = substring(_str, startIndex, str.length);\n\n        return strArr;\n    }\n\n    /// @dev    Get a bit mask\n    /// @param  _numBits Number of bits to use for the max\n    /// @return A bit mask to be used with the bit-wise operator &\n    function getBitMask(uint256 _numBits) internal pure returns(uint256) {\n        return (2 << (_numBits + 1)) - 1;\n    }\n\n    /// @notice Get fighter stat\n    /// @param _stats       Stats for the fighter\n    /// @param _shiftBits   Number of bits to shift to get to the stat\n    /// @param _min         Min value for the stat\n    /// @param _max         Max value for the stat\n    /// @return The stat, bounded by _min and _max\n    function getFighterStat(\n        uint256 _stats, \n        uint8 _shiftBits, \n        uint8 _min, \n        uint8 _max\n    )\n        internal\n        pure \n        returns(uint8) \n    {\n\n        uint256 bitMask = 0xFF; // Equivalent to 11111111 in binary\n        uint256 rangeWidth = _max - _min;\n\n        // Get the stat unnormalized (i.e. not bounded between _min and _max)\n        uint8 statUnnormalized = uint8((_stats >> _shiftBits) & bitMask);\n\n        // Get the stat normalized (i.e. bounded between _min and _max, inclusive)\n        uint8 statNormalized = (uint8(statUnnormalized % (rangeWidth + 1))) + _min;\n\n        return statNormalized;\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@4.2.0/ERC165\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@4.2.0/IERC721\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@4.2.0/Ownable\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@4.2.0/IERC721Enumerable\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@4.2.0/IERC721Metadata\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n\n// Part: ERC721A\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata and Enumerable extension. Built to optimize for lower gas during batch mints.\n *\n * Assumes serials are sequentially minted starting at 0 (e.g. 0, 1, 2, 3..).\n *\n * Does not support burning tokens to address(0).\n */\ncontract ERC721A is\n  Context,\n  ERC165,\n  IERC721,\n  IERC721Metadata,\n  IERC721Enumerable\n{\n  using Address for address;\n  using Strings for uint256;\n\n  struct TokenOwnership {\n    address addr;\n    uint64 startTimestamp;\n  }\n\n  struct AddressData {\n    uint128 balance;\n    uint128 numberMinted;\n  }\n\n  uint256 private currentIndex = 0;\n\n  uint256 internal immutable maxBatchSize;\n\n  // Token name\n  string private _name;\n\n  // Token symbol\n  string private _symbol;\n\n  // Mapping from token ID to ownership details\n  // An empty struct value does not necessarily mean the token is unowned. See ownershipOf implementation for details.\n  mapping(uint256 => TokenOwnership) private _ownerships;\n\n  // Mapping owner address to address data\n  mapping(address => AddressData) private _addressData;\n\n  // Mapping from token ID to approved address\n  mapping(uint256 => address) private _tokenApprovals;\n\n  // Mapping from owner to operator approvals\n  mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n  /**\n   * @dev\n   * `maxBatchSize` refers to how much a minter can mint at a time.\n   */\n  constructor(\n    string memory name_,\n    string memory symbol_,\n    uint256 maxBatchSize_\n  ) {\n    require(maxBatchSize_ > 0, \"ERC721A: max batch size must be nonzero\");\n    _name = name_;\n    _symbol = symbol_;\n    maxBatchSize = maxBatchSize_;\n  }\n\n  /**\n   * @dev See {IERC721Enumerable-totalSupply}.\n   */\n  function totalSupply() public view override returns (uint256) {\n    return currentIndex;\n  }\n\n  /**\n   * @dev See {IERC721Enumerable-tokenByIndex}.\n   */\n  function tokenByIndex(uint256 index) public view override returns (uint256) {\n    require(index < totalSupply(), \"ERC721A: global index out of bounds\");\n    return index;\n  }\n\n  /**\n   * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n   * This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first.\n   * It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\n   */\n  function tokenOfOwnerByIndex(address owner, uint256 index)\n    public\n    view\n    override\n    returns (uint256)\n  {\n    require(index < balanceOf(owner), \"ERC721A: owner index out of bounds\");\n    uint256 numMintedSoFar = totalSupply();\n    uint256 tokenIdsIdx = 0;\n    address currOwnershipAddr = address(0);\n    for (uint256 i = 0; i < numMintedSoFar; i++) {\n      TokenOwnership memory ownership = _ownerships[i];\n      if (ownership.addr != address(0)) {\n        currOwnershipAddr = ownership.addr;\n      }\n      if (currOwnershipAddr == owner) {\n        if (tokenIdsIdx == index) {\n          return i;\n        }\n        tokenIdsIdx++;\n      }\n    }\n    revert(\"ERC721A: unable to get token of owner by index\");\n  }\n\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(bytes4 interfaceId)\n    public\n    view\n    virtual\n    override(ERC165, IERC165)\n    returns (bool)\n  {\n    return\n      interfaceId == type(IERC721).interfaceId ||\n      interfaceId == type(IERC721Metadata).interfaceId ||\n      interfaceId == type(IERC721Enumerable).interfaceId ||\n      super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev See {IERC721-balanceOf}.\n   */\n  function balanceOf(address owner) public view override returns (uint256) {\n    require(owner != address(0), \"ERC721A: balance query for the zero address\");\n    return uint256(_addressData[owner].balance);\n  }\n\n  function _numberMinted(address owner) internal view returns (uint256) {\n    require(\n      owner != address(0),\n      \"ERC721A: number minted query for the zero address\"\n    );\n    return uint256(_addressData[owner].numberMinted);\n  }\n\n  function ownershipOf(uint256 tokenId)\n    internal\n    view\n    returns (TokenOwnership memory)\n  {\n    require(_exists(tokenId), \"ERC721A: owner query for nonexistent token\");\n\n    uint256 lowestTokenToCheck;\n    if (tokenId >= maxBatchSize) {\n      lowestTokenToCheck = tokenId - maxBatchSize + 1;\n    }\n\n    for (uint256 curr = tokenId; curr >= lowestTokenToCheck; curr--) {\n      TokenOwnership memory ownership = _ownerships[curr];\n      if (ownership.addr != address(0)) {\n        return ownership;\n      }\n    }\n\n    revert(\"ERC721A: unable to determine the owner of token\");\n  }\n\n  /**\n   * @dev See {IERC721-ownerOf}.\n   */\n  function ownerOf(uint256 tokenId) public view override returns (address) {\n    return ownershipOf(tokenId).addr;\n  }\n\n  /**\n   * @dev See {IERC721Metadata-name}.\n   */\n  function name() public view virtual override returns (string memory) {\n    return _name;\n  }\n\n  /**\n   * @dev See {IERC721Metadata-symbol}.\n   */\n  function symbol() public view virtual override returns (string memory) {\n    return _symbol;\n  }\n\n  /**\n   * @dev See {IERC721Metadata-tokenURI}.\n   */\n  function tokenURI(uint256 tokenId)\n    public\n    view\n    virtual\n    override\n    returns (string memory)\n  {\n    require(\n      _exists(tokenId),\n      \"ERC721Metadata: URI query for nonexistent token\"\n    );\n\n    string memory baseURI = _baseURI();\n    return\n      bytes(baseURI).length > 0\n        ? string(abi.encodePacked(baseURI, tokenId.toString()))\n        : \"\";\n  }\n\n  /**\n   * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n   * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n   * by default, can be overriden in child contracts.\n   */\n  function _baseURI() internal view virtual returns (string memory) {\n    return \"\";\n  }\n\n  /**\n   * @dev See {IERC721-approve}.\n   */\n  function approve(address to, uint256 tokenId) public override {\n    address owner = ERC721A.ownerOf(tokenId);\n    require(to != owner, \"ERC721A: approval to current owner\");\n\n    require(\n      _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n      \"ERC721A: approve caller is not owner nor approved for all\"\n    );\n\n    _approve(to, tokenId, owner);\n  }\n\n  /**\n   * @dev See {IERC721-getApproved}.\n   */\n  function getApproved(uint256 tokenId) public view override returns (address) {\n    require(_exists(tokenId), \"ERC721A: approved query for nonexistent token\");\n\n    return _tokenApprovals[tokenId];\n  }\n\n  /**\n   * @dev See {IERC721-setApprovalForAll}.\n   */\n  function setApprovalForAll(address operator, bool approved) public override {\n    require(operator != _msgSender(), \"ERC721A: approve to caller\");\n\n    _operatorApprovals[_msgSender()][operator] = approved;\n    emit ApprovalForAll(_msgSender(), operator, approved);\n  }\n\n  /**\n   * @dev See {IERC721-isApprovedForAll}.\n   */\n  function isApprovedForAll(address owner, address operator)\n    public\n    view\n    virtual\n    override\n    returns (bool)\n  {\n    return _operatorApprovals[owner][operator];\n  }\n\n  /**\n   * @dev See {IERC721-transferFrom}.\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 tokenId\n  ) public override {\n    _transfer(from, to, tokenId);\n  }\n\n  /**\n   * @dev See {IERC721-safeTransferFrom}.\n   */\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId\n  ) public override {\n    safeTransferFrom(from, to, tokenId, \"\");\n  }\n\n  /**\n   * @dev See {IERC721-safeTransferFrom}.\n   */\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes memory _data\n  ) public override {\n    _transfer(from, to, tokenId);\n    require(\n      _checkOnERC721Received(from, to, tokenId, _data),\n      \"ERC721A: transfer to non ERC721Receiver implementer\"\n    );\n  }\n\n  /**\n   * @dev Returns whether `tokenId` exists.\n   *\n   * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n   *\n   * Tokens start existing when they are minted (`_mint`),\n   */\n  function _exists(uint256 tokenId) internal view returns (bool) {\n    return tokenId < currentIndex;\n  }\n\n  function _safeMint(address to, uint256 quantity) internal {\n    _safeMint(to, quantity, \"\");\n  }\n\n  /**\n   * @dev Mints `quantity` tokens and transfers them to `to`.\n   *\n   * Requirements:\n   *\n   * - `to` cannot be the zero address.\n   * - `quantity` cannot be larger than the max batch size.\n   *\n   * Emits a {Transfer} event.\n   */\n  function _safeMint(\n    address to,\n    uint256 quantity,\n    bytes memory _data\n  ) internal {\n    uint256 startTokenId = currentIndex;\n    require(to != address(0), \"ERC721A: mint to the zero address\");\n    // We know if the first token in the batch doesn't exist, the other ones don't as well, because of serial ordering.\n    require(!_exists(startTokenId), \"ERC721A: token already minted\");\n    require(quantity <= maxBatchSize, \"ERC721A: quantity to mint too high\");\n\n    _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n    AddressData memory addressData = _addressData[to];\n    _addressData[to] = AddressData(\n      addressData.balance + uint128(quantity),\n      addressData.numberMinted + uint128(quantity)\n    );\n    _ownerships[startTokenId] = TokenOwnership(to, uint64(block.timestamp));\n\n    uint256 updatedIndex = startTokenId;\n\n    for (uint256 i = 0; i < quantity; i++) {\n      emit Transfer(address(0), to, updatedIndex);\n      require(\n        _checkOnERC721Received(address(0), to, updatedIndex, _data),\n        \"ERC721A: transfer to non ERC721Receiver implementer\"\n      );\n      updatedIndex++;\n    }\n\n    currentIndex = updatedIndex;\n    _afterTokenTransfers(address(0), to, startTokenId, quantity);\n  }\n\n  /**\n   * @dev Transfers `tokenId` from `from` to `to`.\n   *\n   * Requirements:\n   *\n   * - `to` cannot be the zero address.\n   * - `tokenId` token must be owned by `from`.\n   *\n   * Emits a {Transfer} event.\n   */\n  function _transfer(\n    address from,\n    address to,\n    uint256 tokenId\n  ) private {\n    TokenOwnership memory prevOwnership = ownershipOf(tokenId);\n\n    bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr ||\n      getApproved(tokenId) == _msgSender() ||\n      isApprovedForAll(prevOwnership.addr, _msgSender()));\n\n    require(\n      isApprovedOrOwner,\n      \"ERC721A: transfer caller is not owner nor approved\"\n    );\n\n    require(\n      prevOwnership.addr == from,\n      \"ERC721A: transfer from incorrect owner\"\n    );\n    require(to != address(0), \"ERC721A: transfer to the zero address\");\n\n    _beforeTokenTransfers(from, to, tokenId, 1);\n\n    // Clear approvals from the previous owner\n    _approve(address(0), tokenId, prevOwnership.addr);\n\n    _addressData[from].balance -= 1;\n    _addressData[to].balance += 1;\n    _ownerships[tokenId] = TokenOwnership(to, uint64(block.timestamp));\n\n    // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\n    // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\n    uint256 nextTokenId = tokenId + 1;\n    if (_ownerships[nextTokenId].addr == address(0)) {\n      if (_exists(nextTokenId)) {\n        _ownerships[nextTokenId] = TokenOwnership(\n          prevOwnership.addr,\n          prevOwnership.startTimestamp\n        );\n      }\n    }\n\n    emit Transfer(from, to, tokenId);\n    _afterTokenTransfers(from, to, tokenId, 1);\n  }\n\n  /**\n   * @dev Approve `to` to operate on `tokenId`\n   *\n   * Emits a {Approval} event.\n   */\n  function _approve(\n    address to,\n    uint256 tokenId,\n    address owner\n  ) private {\n    _tokenApprovals[tokenId] = to;\n    emit Approval(owner, to, tokenId);\n  }\n\n  uint256 public nextOwnerToExplicitlySet = 0;\n\n  /**\n   * @dev Explicitly set `owners` to eliminate loops in future calls of ownerOf().\n   */\n  function _setOwnersExplicit(uint256 quantity) internal {\n    uint256 oldNextOwnerToSet = nextOwnerToExplicitlySet;\n    require(quantity > 0, \"quantity must be nonzero\");\n    uint256 endIndex = oldNextOwnerToSet + quantity - 1;\n    if (endIndex > currentIndex - 1) {\n      endIndex = currentIndex - 1;\n    }\n    // We know if the last one in the group exists, all in the group exist, due to serial ordering.\n    require(_exists(endIndex), \"not enough minted yet for this cleanup\");\n    for (uint256 i = oldNextOwnerToSet; i <= endIndex; i++) {\n      if (_ownerships[i].addr == address(0)) {\n        TokenOwnership memory ownership = ownershipOf(i);\n        _ownerships[i] = TokenOwnership(\n          ownership.addr,\n          ownership.startTimestamp\n        );\n      }\n    }\n    nextOwnerToExplicitlySet = endIndex + 1;\n  }\n\n  /**\n   * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n   * The call is not executed if the target address is not a contract.\n   *\n   * @param from address representing the previous owner of the given token ID\n   * @param to target address that will receive the tokens\n   * @param tokenId uint256 ID of the token to be transferred\n   * @param _data bytes optional data to send along with the call\n   * @return bool whether the call correctly returned the expected magic value\n   */\n  function _checkOnERC721Received(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes memory _data\n  ) private returns (bool) {\n    if (to.isContract()) {\n      try\n        IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data)\n      returns (bytes4 retval) {\n        return retval == IERC721Receiver(to).onERC721Received.selector;\n      } catch (bytes memory reason) {\n        if (reason.length == 0) {\n          revert(\"ERC721A: transfer to non ERC721Receiver implementer\");\n        } else {\n          assembly {\n            revert(add(32, reason), mload(reason))\n          }\n        }\n      }\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\n   *\n   * startTokenId - the first token id to be transferred\n   * quantity - the amount to be transferred\n   *\n   * Calling conditions:\n   *\n   * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n   * transferred to `to`.\n   * - When `from` is zero, `tokenId` will be minted for `to`.\n   */\n  function _beforeTokenTransfers(\n    address from,\n    address to,\n    uint256 startTokenId,\n    uint256 quantity\n  ) internal virtual {}\n\n  /**\n   * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\n   * minting.\n   *\n   * startTokenId - the first token id to be transferred\n   * quantity - the amount to be transferred\n   *\n   * Calling conditions:\n   *\n   * - when `from` and `to` are both non-zero.\n   * - `from` and `to` are never both zero.\n   */\n  function _afterTokenTransfers(\n    address from,\n    address to,\n    uint256 startTokenId,\n    uint256 quantity\n  ) internal virtual {}\n}\n\n// File: SheetFighterToken.sol\n\n/// @title  Contract creating non-fungible in-game utility tokens for the game Sheet Fighter, which represent players' fighters\n/// @author Overlord Paper Co\n/// @notice This defines the non-fungible in-game utility tokens for the game Sheet Fighter, which represent players' fighters\ncontract SheetFighterToken is ERC721A, Ownable {\n\n    /// @dev Contains a fighter's stats\n    struct FighterStats {\n        uint8 HP;\n        uint8 critical;\n        uint8 heal;\n        uint8 defense;\n        uint8 attack;\n        SheetColor color;\n        PaperStock stock;\n    }\n\n    /// @notice Defines possible colors for a Sheet\n    enum SheetColor {\n        BLUE,\n        RED,\n        GREEN,\n        ORANGE,\n        PINK,\n        PURPLE\n    }\n\n    /// @notice Defines possible paper stock\n    enum PaperStock {\n        GLOSSY,\n        MATTE,\n        SATIN\n    }\n\n    /// @notice The maximum number of tokens that can be minted\n    uint256 public constant MAX_TOKENS = 8_888;                         // 8,888 tokens can minted, max\n\n    /// @notice The maximum number of mints allowed in a single mint transactions\n    uint256 public constant MAX_MINTS_PER_TXN = 20;                     // 20 Sheet Fighters mint limit per transaction\n\n    // Token stats variables\n    uint8 internal constant MIN_HP = 1;\n    uint8 internal constant MIN_CRITICAL = 1;\n    uint8 internal constant MIN_HEAL = 1;\n    uint8 internal constant MIN_DEFENSE = 1;\n    uint8 internal constant MIN_ATTACK = 1;\n    uint8 internal constant MAX_HP = 255;\n    uint8 internal constant MAX_CRITICAL = 255;\n    uint8 internal constant MAX_HEAL = 255;\n    uint8 internal constant MAX_DEFENSE = 255;\n    uint8 internal constant MAX_ATTACK = 255;\n    uint256 internal constant RARE_MOVE_THRESHOLD = 95;                   // This is 95%\n\n    /// @notice The price of minting a single Sheet Fighter\n    uint256 public constant PRICE = 5 ether / 100;                      // 0.05 ETH price\n\n    /// @dev A nonce for the seed\n    uint256 internal seedNonce = 0;\n\n    /// @notice Indicates whether or not the sale is open for minting\n    bool public saleOpen = false;\n\n    /// @notice Address of the GPT-3 signer\n    address public mintSigner;\n\n    /// @notice Flavor text of tokens\n    mapping(uint256 => string) public flavorTexts;\n\n    /// @notice Stats of tokens\n    mapping(uint256 => FighterStats) public tokenStats;\n\n    /// @notice Address of the Polygon bridge\n    address public bridge;\n\n    /// @notice Address of the ERC20 CellToken contract\n    address public cellTokenAddress;\n\n    mapping(bytes32 => bool) signatureHashUsed;\n\n    /// @notice Construct Sheet Fighter in-game utility NFT\n    /// @dev    Call default ERC721 contructor with token name and symbol, and implicitly execute Ownable constructor\n    /// @param _mintSigner Address that will be signing mint transactions\n    constructor(address _mintSigner) ERC721A(\"Sheet Fighter\", \"SHEET\", MAX_MINTS_PER_TXN) Ownable() {\n        mintSigner = _mintSigner;\n    }\n\n    /// @notice Update the address of the CellToken contract\n    /// @param _contractAddress Address of the CellToken contract\n    function setCellTokenAddress(address _contractAddress) external onlyOwner {\n        cellTokenAddress = _contractAddress;\n    }\n\n    /// @notice Update the address which signs the mint transactions\n    /// @dev    Used for ensuring GPT-3 values have not been altered\n    /// @param  _mintSigner New address for the mintSigner\n    function setMintSigner(address _mintSigner) external onlyOwner {\n        mintSigner = _mintSigner;\n    }\n\n    /// @notice Update the address of the bridge\n    /// @dev Used for authorization\n    /// @param  _bridge New address for the bridge\n    function setBridge(address _bridge) external onlyOwner {\n        bridge = _bridge;\n    }\n\n    /// @dev Withdraw funds as owner\n    function withdraw() external onlyOwner {\n        uint balance = address(this).balance;\n        payable(msg.sender).transfer(balance);\n    }\n\n    /// @notice Open or close the sale\n    /// @param  _saleOpen Whether or not the sale should be open\n    function setSaleOpen(bool _saleOpen) external onlyOwner {\n        saleOpen = _saleOpen;\n    }\n\n    /// @notice Mint up to 20 Sheet Fighters\n    /// @dev This function uses that ERC721A _safeMint function\n    /// @param  numTokens Number of Sheet Fighter tokens to mint (1 to 20)\n    /// @param  _flavorTexts Array of strings with flavor texts concatonated with a pipe character\n    /// @param  signature Signature verifying flavorTexts are unmodified\n    function mint(\n        uint256 numTokens, \n        string[] memory _flavorTexts,\n        bytes memory signature\n    ) \n        external \n        payable \n    {\n        require(numTokens > 0, \"Invalid number of tokens\");\n        require(saleOpen, \"Minting is closed\");\n        require(msg.value >= PRICE * numTokens, \"Insufficient payment\");\n        require(totalSupply() + numTokens <= MAX_TOKENS, \"There aren't that many unminted tokens\");\n        require(numTokens == _flavorTexts.length, \"Invalid parameters\");\n\n        // Check flavor text integrity\n        require(\n            ECDSA.recover(\n                ECDSA.toEthSignedMessageHash(keccak256(abi.encode(_flavorTexts))), \n                signature\n            ) == mintSigner, \n            \"Invalid signature\"\n        );\n\n        // Prevent signature replay \n        bytes32 signatureHash = keccak256(signature);\n        require(!signatureHashUsed[signatureHash], \"Signature has already been used\");\n        signatureHashUsed[keccak256(signature)] = true;\n        \n        // Print values\n        for(uint256 i = 0; i < numTokens; i++) {\n            uint256 tokenId = totalSupply() + i;\n            tokenStats[tokenId] =  _generateTokenStats(tokenId);\n            flavorTexts[tokenId] = _flavorTexts[i];\n        }\n\n        // Mint tokens\n        _safeMint(msg.sender, numTokens);\n    }\n\n    /// @notice Bridge the Sheets\n    /// @dev Transfers Sheets to bridge\n    /// @param tokenOwner Address of the tokenOwner who is bridging their tokens\n    /// @param tokenIds Array of tokenIds that tokenOwner is bridging\n    function bridgeSheets(address tokenOwner, uint256[] calldata tokenIds) external {\n        require(bridge != address(0), \"Bridge is not set\");\n        require(msg.sender == bridge, \"Only bridge can do this\");\n        for(uint256 index = 0; index < tokenIds.length; index++) {\n            transferFrom(tokenOwner, msg.sender, tokenIds[index]);\n        }\n        IBridge(msg.sender).bridgeTokensCallback(tokenOwner, tokenIds);\n    }\n\n    /// @notice Update the sheet to sync with actions that occured on otherside of bridge\n    /// @param tokenId Id of the SheetFighter\n    /// @param HP New HP value\n    /// @param critical New critical value\n    /// @param heal New heal value\n    /// @param defense New defense value\n    /// @param attack New attack value\n    function syncBridgedSheet(\n        uint256 tokenId,\n        uint8 HP,\n        uint8 critical,\n        uint8 heal,\n        uint8 defense,\n        uint8 attack\n    ) \n        external \n    {\n        require(bridge != address(0), \"Bridge is not set\");    \n        require(msg.sender == bridge, \"Only bridge can do this\");\n        require(ownerOf(tokenId) == bridge, \"Sheet hasn't been bridged\");\n\n        // Update stats\n        tokenStats[tokenId].HP = HP;\n        tokenStats[tokenId].critical = critical;\n        tokenStats[tokenId].heal = heal;\n        tokenStats[tokenId].defense = defense;\n        tokenStats[tokenId].attack = attack;\n    }\n\n    /// @notice Returns the token metadata and SVG artwork\n    /// @dev    This generates a data URI, which contains the metadata json, encoded in base64\n    /// @param _tokenId The tokenId of the token whos metadata and SVG we want\n    function tokenURI(uint256 _tokenId)\n        public\n        view\n        override\n        returns (string memory)\n    {\n        require(_exists(_tokenId), \"Token doesn't exist\");\n        FighterStats memory _stats = tokenStats[_tokenId];\n        string[5] memory _flavorTexts = SheetFighterUtilities.splitFlavorTextString(flavorTexts[_tokenId]);\n\n        return\n            string(\n                abi.encodePacked(\n                    \"data:application/json;base64,\",\n                    Base64.encode(\n                        bytes(\n                            string(\n                                abi.encodePacked(\n                                    '{\"name\": \"Sheet Fighter #',\n                                    Strings.toString(_tokenId),\n                                    ' - ',\n                                    _flavorTexts[0],\n                                    '\", \"description\": \"Sheet Fighter is a collection of 100% on-chain fighting spreadsheets, packed with unique and unpredictable GPT-3 generated personalities. Collect, stake, and battle to shred your competition.\", \"image\": \"data:image/svg+xml;base64,',\n                                    Base64.encode(\n                                        bytes(_getSVG(_tokenId, _stats, _flavorTexts))\n                                    ),\n                                    '\",\"attributes\":',\n                                    _getAttributes(_stats),\n                                    \"}\"\n                                )\n                            )\n                        )\n                    )\n                )\n            );\n    }\n\n    /// @notice Determines if a stat is rare\n    /// @param stat The stat\n    /// @param min Minimum value the stat can have\n    /// @param max Maximum value the stat can have\n    /// @return true if stat is rare, otherwise false\n    function isRareStat(uint8 stat, uint8 min, uint8 max) public view returns(bool) {\n        return uint256(stat) * 100 >= (RARE_MOVE_THRESHOLD * (uint256(max) - uint256(min))) + (100 * uint256(min));\n    }\n\n    /// @notice Generate random uint256\n    /// @param  _tokenId Token id for which to generate random number\n    /// @param  _address Address for which to generate random number\n    /// @return Random uint256\n    function _random(uint256 _tokenId, address _address) internal returns(uint256) {\n        // Increment nonce\n        seedNonce++;\n\n        return uint256(\n            keccak256(\n                abi.encodePacked(\n                    block.timestamp,\n                    block.difficulty,\n                    _tokenId,\n                    _address,\n                    seedNonce\n                )\n            )\n        );\n    }\n\n    function _generateTokenStats(uint256 tokenId) internal returns(FighterStats memory) {\n\n        uint256 _rand = _random(tokenId, msg.sender);\n\n        // Get Sheet color\n        uint8 _colorPredictor = SheetFighterUtilities.getFighterStat(\n            _rand,\n            40, \n            0, \n            255\n        );\n\n        SheetColor color;\n        if(_colorPredictor < 116) {\n            color = SheetColor.BLUE;\n        } else if(_colorPredictor < 193) {\n            color = SheetColor.RED;\n        } else if(_colorPredictor < 244) {\n            color = SheetColor.GREEN;\n        } else if(_colorPredictor < 252) {\n            color = SheetColor.ORANGE;\n        } else if(_colorPredictor < 255) {\n            color = SheetColor.PINK;\n        } else {\n            color = SheetColor.PURPLE;\n        }\n\n        // Get paper stock\n        uint8 _stockPredictor = SheetFighterUtilities.getFighterStat(\n            _rand, \n            48, \n            0, \n            2\n        );\n        PaperStock stock;\n        if(_stockPredictor == 0) {\n            stock = PaperStock.GLOSSY;\n        } else if(_stockPredictor == 1) {\n            stock = PaperStock.MATTE;\n        } else if(_stockPredictor == 2) {\n            stock = PaperStock.SATIN;\n        }\n\n        return FighterStats(\n            SheetFighterUtilities.getFighterStat(\n                _rand,\n                0, \n                MIN_HP, \n                MAX_HP\n            ),\n            SheetFighterUtilities.getFighterStat(\n                _rand,\n                8, \n                MIN_CRITICAL, \n                MAX_CRITICAL\n            ),\n            SheetFighterUtilities.getFighterStat(\n                _rand,\n                16,\n                MIN_HEAL, \n                MAX_HEAL \n            ),\n            SheetFighterUtilities.getFighterStat(\n                _rand,\n                24,\n                MIN_DEFENSE, \n                MAX_DEFENSE \n            ),\n            SheetFighterUtilities.getFighterStat(\n                _rand,\n                32,\n                MIN_ATTACK, \n                MAX_ATTACK \n            ),\n            color,\n            stock\n        );\n    }\n\n    /// @dev Get SVG for token -- SVG string construction must be done in multiple parts to avoid STACK TOO DEEP error\n    /// @param _tokenId Token id\n    /// @param _stats Fighter stats\n    /// @param _flavorTexts static array of flavor texts -- order dictates which string is for which attribute\n    /// @return String containing SVG Data URI\n    function _getSVG(\n        uint256 _tokenId, \n        FighterStats memory _stats, \n        string[5] memory _flavorTexts\n    ) \n        internal \n        view \n        returns(string memory) \n    {\n\n        // SVG initialization and styling\n        bytes memory svgBytes = abi.encodePacked(\n            '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 500 501\"><defs>',\n            '<style>.d{font-size:27px;font-family:ArialMT,Arial}.h{fill:#999}.l{text-anchor:end}</style>',\n            '</defs><path fill=\"#d6d6d6\" d=\"M0 0h500v501H0z\"/>'\n        );\n\n        // Move cells\n        // NOTE: Move stats are multiplied by 100, as part of avoiding working with decimals\n        svgBytes = abi.encodePacked(\n            svgBytes,\n            '<path fill=\"#',\n            isRareStat(_stats.attack, MIN_ATTACK, MAX_ATTACK) ? 'ff0': 'fff',\n            '\" d=\"M80.53 169.51H494.2v76.67H80.53z\"/>',\n            '<path fill=\"#',\n            isRareStat(_stats.defense, MIN_DEFENSE, MAX_DEFENSE) ? 'ff0': 'fff',\n            '\" d=\"M80.93 252.06H494.6v76.67H80.93z\"/>',\n            '<path fill=\"#',\n            isRareStat(_stats.critical, MIN_CRITICAL, MAX_CRITICAL) ? 'ff0': 'fff',\n            '\" d=\"M80.93 335.46H494.6v76.67H80.93z\"/>',\n            '<path fill=\"#',\n            isRareStat(_stats.heal, MIN_HEAL, MAX_HEAL) ? 'ff0': 'fff',\n            '\" d=\"M80.93 418.15H494.6v76.67H80.93z\"/>'\n        );\n\n        // HP and misc. paths\n        svgBytes = abi.encodePacked(\n            svgBytes,\n            '<path d=\"M6.02 418.15h68.94v76.67H6.02zm0-82.73h68.94v76.67H6.02zM6 252.19h68.94v76.67H6zm0-82.69h68.94v76.67H6z\" fill=\"#efefef\"/><path d=\"M5.79 84.33h333.75v78.33H5.79zm339.54 0H494.2v78.33H345.33z\" fill=\"#fff\"/>',\n            '<text class=\"d\" transform=\"translate(374.99 133.17)\">',\n            'HP ',\n            Strings.toString(_stats.HP),\n            '</text>'\n        );\n\n        // Move flavor texts\n        svgBytes = abi.encodePacked(\n            svgBytes,\n            '<text class=\"d\" transform=\"translate(90.82 217.51)\">',\n            _flavorTexts[1],\n            '</text><text class=\"d\" transform=\"translate(90.95 300.06)\">',\n            _flavorTexts[2],\n            '</text><text class=\"d\" transform=\"translate(90.22 383.47)\">',\n            _flavorTexts[3],\n            '</text><text class=\"d\" transform=\"translate(91.22 466.15)\">',\n            _flavorTexts[4],\n            '</text>'\n        );\n\n        // Move values\n        svgBytes = abi.encodePacked(\n            svgBytes,\n            '<text class=\"d l\" transform=\"translate(485 217.51)\">',\n            Strings.toString(_stats.attack),\n            '</text><text class=\"d l\" transform=\"translate(485 466.15)\">',\n            Strings.toString(_stats.heal),\n            '</text><text class=\"d l\" transform=\"translate(485 383.47)\">',\n            Strings.toString(_stats.critical),\n            '</text><text class=\"d l\" transform=\"translate(485 301.86)\">',\n            Strings.toString(_stats.defense),\n            '</text>'\n        );\n\n        // Shapes, name flavor text, token ID, and SVG ending\n        string memory sheetColorCode;\n        if(_stats.color == SheetColor.RED) {\n            sheetColorCode = 'f00';\n        } else if(_stats.color == SheetColor.GREEN) {\n            sheetColorCode = '3c3';\n        } else if(_stats.color == SheetColor.ORANGE) {\n            sheetColorCode = 'f90';\n        } else if(_stats.color == SheetColor.PINK) {\n            sheetColorCode = 'f6f';\n        } else if(_stats.color == SheetColor.PURPLE) {\n            sheetColorCode = '63c';\n        } else {\n            // Blue\n            sheetColorCode = '00f';\n        }\n\n        svgBytes = abi.encodePacked( \n            svgBytes,\n            '<path class=\"h\" d=\"M322.52 112.5h-20a1 1 0 00-1 1v20a1 1 0 001 1h20a1 1 0 001-1v-20a1 1 0 00-1-1zm-4 9l-5.33 5.33a1 1 0 01-.71.3 1 1 0 01-.71-.3l-5.33-5.33a1 1 0 011.41-1.41l4.63 4.62 4.62-4.62a1 1 0 011.42 0 1 1 0 01.04 1.45zM38.65 215l-5.74-4.85-1.19 1.42a4.68 4.68 0 00-5.65.73l9.93 9.93a4.66 4.66 0 00.74-5.64z\"/><path class=\"h\" d=\"M51.55 210.92a4.59 4.59 0 00-2.32.63l-20-23.71h-8.76v8.74l23.71 20a4.68 4.68 0 00.74 5.63l9.94-9.94a4.66 4.66 0 00-3.31-1.35zM33 202l-8.36-8.37L26.3 192l8.37 8.36zm23.75 18.81l-3.54-3.55-3.32 3.32 3.55 3.54v3.72h7.03v-7.03h-3.72zm-29.02-3.55l-3.55 3.55h-3.71v7.03h7.03v-3.72l3.54-3.54-3.31-3.32z\"/><path class=\"h\" d=\"M51.72 187.84L42 199.36l6.31 7.48 12.16-10.25v-8.75zM47.93 202l-1.66-1.66 8.36-8.34 1.66 1.65zm-7.46 68.15l-17 5.14v12.83c0 8.34 6.89 17.4 17 22.77 10.11-5.37 17-14.43 17-22.77v-12.83zm0 37.81C31.78 302.94 26 295.1 26 288.12v-10.93l14.44-4.35zm-7 39.71c-2.69 14.61-4.87 16.79-19.47 19.48 14.61 2.69 16.79 4.87 19.48 19.48 2.69-14.61 4.87-16.79 19.47-19.48-14.61-2.69-16.79-4.87-19.48-19.48zm21.14 27.41c-1.71 9.29-3.1 10.67-12.39 12.38 9.29 1.71 10.68 3.1 12.39 12.39 1.71-9.29 3.09-10.68 12.38-12.39-9.29-1.71-10.67-3.09-12.38-12.38zM34.51 470l2.23 2 2.54 2.17a1.87 1.87 0 001.19.44 1.83 1.83 0 001.19-.44l2.57-2.17c5-4.39 8.82-7.75 11.56-11 3.19-3.83 4.68-7.3 4.68-10.9a11.6 11.6 0 00-11.79-11.7 12.84 12.84 0 00-8.19 3 12.81 12.81 0 00-8.18-3A11.6 11.6 0 0020.49 450c0 7.91 5.58 12.73 14.02 20zm-1.29-17.12h4.85v-4.78h4.85v4.78h4.85v4.77h-4.85v4.77h-4.85v-4.77h-4.85v-4.77z\"/>',\n            '<path fill=\"#',\n            sheetColorCode,\n            '\" d=\"M0 0h500v84.33H0z\"/>',\n            '<text transform=\"translate(16.72 133.17)\" font-family=\"Arial-BoldMT,Arial\" font-weight=\"700\" font-size=\"27\">',\n            _flavorTexts[0],\n            '</text><text transform=\"translate(16.72 51.83)\" font-family=\"Arial-BoldMT,Arial\" font-weight=\"700\" font-size=\"27\" fill=\"#fff\">',\n            '#',\n            Strings.toString(_tokenId),\n            '</text></svg>'\n        );\n\n        string memory svgString = string(svgBytes);\n\n        return svgString;\n    }\n\n    /// @dev Get metadata attributes for provided stats -- string must be created in pieces to avoid STACK TOO DEEP error\n    /// @param _stats The Sheet fighter's stats\n    /// @return String containing a JSON array of attribute objects, following metadata standard\n    function _getAttributes(FighterStats memory _stats) internal view returns(string memory) {\n\n        // Openning list bracket\n        string memory attributes = \"[\";\n\n        // HP object\n        attributes = string(\n            abi.encodePacked(\n                attributes,\n                '{\"trait_type\":\"HP\",',\n                '\"value\":', \n                Strings.toString(_stats.HP), \n                '},'\n            )\n        );\n        \n        // Attack object \n        attributes = string(\n            abi.encodePacked(\n                attributes,\n                '{\"trait_type\":\"Attack\",',\n                '\"value\":', \n                Strings.toString(_stats.attack), \n                '},'\n            )\n        );\n\n        // Defense object\n        attributes = string(\n            abi.encodePacked(\n                attributes,\n                '{\"trait_type\":\"Defense\",',\n                '\"value\":', \n                Strings.toString(_stats.defense), \n                '},'\n            )\n        );\n\n        // Critical object\n        attributes = string(\n            abi.encodePacked(\n                attributes,\n                '{\"trait_type\":\"Critical\",',\n                '\"value\":', \n                Strings.toString(_stats.critical), \n                '},'\n            )\n        );\n\n        // Heal object\n        attributes = string(\n            abi.encodePacked(\n                attributes,\n                '{\"trait_type\":\"Heal\",',\n                '\"value\":', \n                Strings.toString(_stats.heal), \n                '},'\n            )\n        );\n\n        // Number of highlighted cells\n\n        uint8 numHighlightedCells = 0;\n        if(isRareStat(_stats.attack, MIN_ATTACK, MAX_ATTACK)) numHighlightedCells++;\n        if(isRareStat(_stats.defense, MIN_DEFENSE, MAX_DEFENSE)) numHighlightedCells++;\n        if(isRareStat(_stats.critical, MIN_CRITICAL, MAX_CRITICAL)) numHighlightedCells++;\n        if(isRareStat(_stats.heal, MIN_HEAL, MAX_HEAL)) numHighlightedCells++;\n\n        attributes = string(\n            abi.encodePacked(\n                attributes,\n                '{\"trait_type\": \"Highlighted Cells\",',\n                '\"value\":',\n                Strings.toString(numHighlightedCells),\n                '},'\n            )\n        );\n\n        // Job title\n\n        string memory jobTitle;\n        if(numHighlightedCells == 0) jobTitle = \"Intern\";\n        else if(numHighlightedCells == 1) jobTitle = \"Associate\";\n        else if(numHighlightedCells == 2) jobTitle = \"Manager\";\n        else if(numHighlightedCells == 3) jobTitle = \"Director\";\n        else if(numHighlightedCells == 4) jobTitle = \"Vice President\";\n\n        attributes = string(\n            abi.encodePacked(\n                attributes,\n                '{\"trait_type\": \"Job Title\",',\n                '\"value\":\"',\n                jobTitle,\n                '\"},'\n            )\n        );\n\n        // Paper Stock\n\n        string memory paperStock;\n        if(_stats.stock == PaperStock.GLOSSY) paperStock = \"Glossy\";\n        else if(_stats.stock == PaperStock.MATTE) paperStock = \"Matte\";\n        else if(_stats.stock == PaperStock.SATIN) paperStock = \"Satin\";\n\n        attributes = string(\n            abi.encodePacked(\n                attributes,\n                '{\"trait_type\": \"Paper Stock\",',\n                '\"value\":\"',\n                paperStock,\n                '\"},'\n            )\n        );\n\n\n        // Sheet color object\n        string memory sheetColorString;\n        if(_stats.color == SheetColor.RED) {\n            sheetColorString = 'Red';\n        } else if(_stats.color == SheetColor.GREEN) {\n            sheetColorString = 'Green';\n        } else if(_stats.color == SheetColor.ORANGE) {\n            sheetColorString = 'Orange';\n        } else if(_stats.color == SheetColor.PINK) {\n            sheetColorString = 'Pink';\n        } else if(_stats.color == SheetColor.PURPLE) {\n            sheetColorString = 'Purple';\n        } else {\n            sheetColorString = 'Blue';\n        }\n\n        attributes = string(\n            abi.encodePacked(\n                attributes,\n                '{\"trait_type\":\"Color\",',\n                '\"value\":\"', \n                sheetColorString,\n                '\"},'\n            )\n        );\n\n        // Paperstock\n        attributes = string(\n            abi.encodePacked(\n                attributes,\n                '{\"trait_type\": \"Sheet Type\",',\n                '\"value\":\"Genesis\"}'\n            )\n        );\n\n        // Closing bracket\n        // NOTE: Make sure object ABOVE this closing bracket doesn't have a trailing comma\n        attributes = string(\n            abi.encodePacked(\n                attributes,\n                ']'\n            )\n        );\n\n        return attributes;\n    }\n}\n", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mintSigner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_MINTS_PER_TXN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"bridgeSheets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cellTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"flavorTexts\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"stat\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"min\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"max\",\"type\":\"uint8\"}],\"name\":\"isRareStat\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"_flavorTexts\",\"type\":\"string[]\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextOwnerToExplicitlySet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"}],\"name\":\"setBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"setCellTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mintSigner\",\"type\":\"address\"}],\"name\":\"setMintSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_saleOpen\",\"type\":\"bool\"}],\"name\":\"setSaleOpen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"HP\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"critical\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"heal\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"defense\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"attack\",\"type\":\"uint8\"}],\"name\":\"syncBridgedSheet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenStats\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"HP\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"critical\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"heal\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"defense\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"attack\",\"type\":\"uint8\"},{\"internalType\":\"enum SheetFighterToken.SheetColor\",\"name\":\"color\",\"type\":\"uint8\"},{\"internalType\":\"enum SheetFighterToken.PaperStock\",\"name\":\"stock\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SheetFighterToken", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000a92dd99918c75c9d57194e656fe21e2051b0d345", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}