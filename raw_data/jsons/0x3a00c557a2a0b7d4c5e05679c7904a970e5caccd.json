{"SourceCode": "//             ((((((((((((((((((.                                             \r\n//         ((((((((((((((((((((((((((*                                         \r\n//      /(((((((((((((((((((((((((((((((*                                      \r\n//     ((((((((((((#             #(((((((((                                    \r\n//   (((((((((((                     ((((((((((((((((((((((,                   \r\n//   ((((((((#         ((((((((((       (((((((((((((((((((((((((              \r\n//  *(((((((       #(((((((((((((((((               /(((((((((((((((           \r\n//  *((((((/     #((((((#        .((((((                 .((((((((((((.        \r\n//   ((((((.    ((((((               #(((((((((((((#         (((((((((((       \r\n//   ((((((/    ((((/                         .((((((((.      .((((((((((      \r\n//   *((((((    ((((                              (((((((       ((((((((((     \r\n//    ((((((,   ,(((.                               ((((((      .(((((((((     \r\n//     ((((((    ((((                                (((((*      (((((((((     \r\n//      ((((((    ((((                              ((((((      #(((((((((     \r\n//       ((((((    #(((                            #(((((      ((((((((((      \r\n//        ((((((/   .(((.                        ((((((,      ((((((((((       \r\n//          ((((((    ((((                    (((((((       ((((((((((         \r\n//           ((((((    /(((             ,((((((((        ((((((((((/           \r\n//            /(((((#    ((((     ((((((((((         #(((((((((((              \r\n//              ((((((    ((((((((((((          #((((((((((((*                 \r\n//               ((((((/    ((,           (((((((((((((((                      \r\n//                 ((((((          ,(((((((((((((((/                           \r\n//                  ((((((*(((((((((((((((((((                                 \r\n//                   ,(((((((((((((((((*                                       \r\n//                     (((((((((,  \r\n//           \r\n// Killer GF by Zeronis and uwulabs                                  \r\n// Made with love <3                                            \r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721Supply is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n    \r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev These functions deal with verification of Merkle Trees proofs.\r\n *\r\n * The proofs can be generated using the JavaScript library\r\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\r\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\r\n *\r\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\r\n */\r\nlibrary MerkleProof {\r\n    /**\r\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\r\n     * defined by `root`. For this, a `proof` must be provided, containing\r\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\r\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\r\n     */\r\n    function verify(\r\n        bytes32[] memory proof,\r\n        bytes32 root,\r\n        bytes32 leaf\r\n    ) internal pure returns (bool) {\r\n        bytes32 computedHash = leaf;\r\n\r\n        for (uint256 i = 0; i < proof.length; i++) {\r\n            bytes32 proofElement = proof[i];\r\n\r\n            if (computedHash <= proofElement) {\r\n                // Hash(current computed hash + current element of the proof)\r\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\r\n            } else {\r\n                // Hash(current element of the proof + current computed hash)\r\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\r\n            }\r\n        }\r\n\r\n        // Check if the computed hash (root) is equal to the provided root\r\n        return computedHash == root;\r\n    }\r\n}\r\n\r\ninterface Minter {\r\n  function MAX_SUPPLY() external returns (uint256);\r\n  function mintNFTs(address to, uint256[] memory tokenId) external;\r\n  function owner() external returns (address);\r\n}\r\n\r\ncontract KillerGFWaveLockSale is Ownable, ReentrancyGuard {\r\n  uint256 constant BASE = 1e18;\r\n\r\n  uint256 constant TEAM_INDEX = 0;\r\n  uint256 constant UWULIST_INDEX = 1;\r\n  uint256 constant WHITELIST_INDEX = 2;\r\n\r\n  uint256 constant SLOT_COUNT = 256/32;\r\n  uint256 constant MAX_WAVES = 6;\r\n  uint256 constant PRESALE_SLOT_INDEX = 0;\r\n  uint256 constant MINTED_SLOT_INDEX = 6;\r\n  uint256 constant BALANCE_SLOT_INDEX = 7;\r\n  \r\n  bytes32 public teamRoot;\r\n  bytes32 public uwuRoot;\r\n  bytes32 public whitelistRoot;\r\n\r\n  address public nft; \r\n  uint256 public amountForSale;\r\n  uint256 public amountSold;\r\n  uint256 public devSupply;\r\n  uint256 public devMinted;\r\n\r\n  uint64 public teamMinted;\r\n  uint64 public uwuMinted;\r\n  uint64 public whitelistMinted;\r\n\r\n  uint256 public buyPrice = 0.08 ether;\r\n  uint256 public uwuPrice = 0.065 ether;\r\n  \r\n  uint256 public startTime = type(uint256).max;\r\n  uint256 public constant waveTimeLength = 5 minutes;\r\n\r\n  // Purchases are compressed into a single uint256, after 6 rounds the limit is simply removed anyways.\r\n  // The last uint32 slot is reserved for their balance. (left-most bytes first)\r\n  mapping(address => uint256) purchases;\r\n\r\n  event Reserved(address sender, uint256 count);\r\n  event Minted(address sender, uint256 count);\r\n\r\n  constructor(address _nft, address _owner, uint256 _startTime, uint256 saleCount, uint256 _ownerCount) Ownable() ReentrancyGuard() {\r\n    require(_startTime != 0, \"No start time\");\r\n    nft = _nft;\r\n    startTime = _startTime;\r\n    amountForSale = saleCount;\r\n    devSupply = _ownerCount;\r\n    transferOwnership(_owner);\r\n  }\r\n\r\n  function withdrawETH() external onlyOwner {\r\n    uint256 fullAmount = address(this).balance;\r\n    sendValue(payable(msg.sender), fullAmount*700/1000);\r\n    sendValue(payable(0x354A70969F0b4a4C994403051A81C2ca45db3615), address(this).balance);\r\n  }\r\n\r\n  function setStartTime(uint256 _startTime) external onlyOwner {\r\n    startTime = _startTime;\r\n  }\r\n\r\n  function setPresaleRoots(bytes32 _whitelistRoot, bytes32 _uwulistRoot, bytes32 _teamRoot) external onlyOwner {\r\n    whitelistRoot = _whitelistRoot;\r\n    uwuRoot = _uwulistRoot;\r\n    teamRoot = _teamRoot;\r\n  }\r\n\r\n  function setNFT(address _nft) external onlyOwner {\r\n    nft = _nft;\r\n  }\r\n  \r\n  function devMint(uint256 count) public onlyOwner {\r\n    devMintTo(msg.sender, count);\r\n  }\r\n\r\n  function devMintTo(address to, uint256 count) public onlyOwner {\r\n    uint256 _devMinted = devMinted;\r\n    uint256 remaining = devSupply - _devMinted;\r\n    require(remaining != 0, \"No more dev minted\");\r\n    if (count > remaining) {\r\n      count = remaining;\r\n    } \r\n    devMinted = _devMinted + count;\r\n\r\n    uint256[] memory ids = new uint256[](count);\r\n    for (uint256 i; i < count; ++i) {\r\n      ids[i] = _devMinted+i+1;\r\n    }\r\n    Minter(nft).mintNFTs(to, ids);\r\n  }\r\n  \r\n  function presaleBuy(uint256[3] calldata amountsToBuy, uint256[3] calldata amounts, uint256[3] calldata indexes, bytes32[][3] calldata merkleProof) external payable { \r\n    require(block.timestamp < startTime, \"Presale has ended\");\r\n    require(amountsToBuy.length == 3, \"Not right length\");\r\n    require(amountsToBuy.length == amounts.length, \"Not equal amounts\");\r\n    require(amounts.length == indexes.length, \"Not equal indexes\");\r\n    require(indexes.length == merkleProof.length, \"Not equal proof\");\r\n\r\n    uint256 purchaseInfo = purchases[msg.sender];\r\n    require(!hasDoneWave(purchaseInfo, PRESALE_SLOT_INDEX), \"Already whitelist minted\");\r\n\r\n    uint256 expectedPayment;\r\n    if (merkleProof[UWULIST_INDEX].length != 0) {\r\n      expectedPayment += amountsToBuy[UWULIST_INDEX]*uwuPrice;\r\n    }\r\n    if (merkleProof[WHITELIST_INDEX].length != 0) {\r\n      expectedPayment += amountsToBuy[WHITELIST_INDEX]*buyPrice;\r\n    } \r\n    require(msg.value == expectedPayment, \"Not right ETH sent\");\r\n\r\n    uint256 count;\r\n    if (merkleProof[TEAM_INDEX].length != 0) {\r\n      require(teamRoot.length != 0, \"team root not assigned\");\r\n      bytes32 node = keccak256(abi.encodePacked(indexes[TEAM_INDEX], msg.sender, amounts[TEAM_INDEX]));\r\n      require(MerkleProof.verify(merkleProof[TEAM_INDEX], teamRoot, node), 'MerkleProof: Invalid team proof.');\r\n      require(amountsToBuy[TEAM_INDEX] <= amounts[TEAM_INDEX], \"Cant buy this many\");\r\n      count += amountsToBuy[TEAM_INDEX];\r\n      teamMinted += uint64(amountsToBuy[TEAM_INDEX]);\r\n    }\r\n    if (merkleProof[UWULIST_INDEX].length != 0) {\r\n      require(uwuRoot.length != 0, \"uwu root not assigned\");\r\n      bytes32 node = keccak256(abi.encodePacked(indexes[UWULIST_INDEX], msg.sender, amounts[UWULIST_INDEX]));\r\n      require(MerkleProof.verify(merkleProof[UWULIST_INDEX], uwuRoot, node), 'MerkleProof: Invalid uwu proof.');\r\n      require(amountsToBuy[UWULIST_INDEX] <= amounts[UWULIST_INDEX], \"Cant buy this many\");\r\n      count += amountsToBuy[UWULIST_INDEX];\r\n      uwuMinted += uint64(amountsToBuy[UWULIST_INDEX]);\r\n    }\r\n    if (merkleProof[WHITELIST_INDEX].length != 0) {\r\n      require(whitelistRoot.length != 0, \"wl root not assigned\");\r\n      bytes32 node = keccak256(abi.encodePacked(indexes[WHITELIST_INDEX], msg.sender, amounts[WHITELIST_INDEX]));\r\n      require(MerkleProof.verify(merkleProof[WHITELIST_INDEX], whitelistRoot, node), 'MerkleProof: Invalid wl proof.');\r\n      require(amountsToBuy[WHITELIST_INDEX] <= amounts[WHITELIST_INDEX], \"Cant buy this many\");\r\n      count += amountsToBuy[WHITELIST_INDEX];\r\n      whitelistMinted += uint64(amountsToBuy[WHITELIST_INDEX]);\r\n    }  \r\n\r\n    uint256 startSupply = currentMintIndex();\r\n    uint256 _amountSold = amountSold;\r\n    amountSold = _amountSold + count;\r\n    purchases[msg.sender] = _createNewPurchaseInfo(purchaseInfo, PRESALE_SLOT_INDEX, startSupply, count);\r\n\r\n    emit Reserved(msg.sender, count);\r\n  }\r\n\r\n  /*\r\n   * DM TylerTakesATrip#9279 he looks submissive and breedable.\r\n   */\r\n  function buyKGF(uint256 count) external payable nonReentrant {\r\n    uint256 _amountSold = amountSold;\r\n    uint256 _amountForSale = amountForSale;\r\n    uint256 remaining = _amountForSale - _amountSold;\r\n    require(remaining != 0, \"Sold out! Sorry!\");\r\n\r\n    require(block.timestamp >= startTime, \"Sale has not started\");\r\n    require(tx.origin == msg.sender, \"Only direct calls pls\");\r\n    require(count > 0, \"Cannot mint 0\");\r\n\r\n    uint256 wave = currentWave();\r\n    require(count <= maxPerTX(wave), \"Max for TX in this wave\");\r\n    require(wave < MAX_WAVES, \"Not in main sale\");\r\n    require(msg.value == count * buyPrice, \"Not enough ETH\");\r\n\r\n    // Adjust for the last mint being incomplete.\r\n    uint256 ethAmountOwed;\r\n    if (count > remaining) {\r\n      ethAmountOwed = buyPrice * (count - remaining);\r\n      count = remaining;\r\n    }\r\n\r\n    uint256 purchaseInfo = purchases[msg.sender];\r\n    require(!hasDoneWave(purchaseInfo, wave), \"Already purchased this wave\");\r\n\r\n    uint256 startSupply = currentMintIndex();\r\n    amountSold = _amountSold + count;\r\n    purchases[msg.sender] = _createNewPurchaseInfo(purchaseInfo, wave, startSupply, count);\r\n    \r\n    emit Reserved(msg.sender, count);\r\n\r\n    if (ethAmountOwed > 0) {\r\n      sendValue(payable(msg.sender), ethAmountOwed);\r\n    }\r\n  }\r\n\r\n  // just mint, no tickets\r\n  // There is not enough demand if the sale is still incomplete at this point.  \r\n  // So just resort to a normal sale. \r\n  function buyKGFPostSale(uint256 count) external payable {\r\n    uint256 _amountSold = amountSold;\r\n    uint256 _amountForSale = amountForSale;\r\n    uint256 remaining = _amountForSale - _amountSold;\r\n    require(remaining != 0, \"Sold out! Sorry!\");\r\n    require(block.timestamp >= startTime, \"Sale has not started\");\r\n\r\n    require(count > 0, \"Cannot mint 0\");\r\n    require(count <= remaining, \"Just out\");\r\n    require(tx.origin == msg.sender, \"Only direct calls pls\");\r\n    require(msg.value == count * buyPrice, \"Not enough ETH\");\r\n\r\n    uint256 wave = currentWave();\r\n    require(count <= maxPerTX(wave), \"Max for TX in this wave\");\r\n    require(wave >= MAX_WAVES, \"Not in post sale\");\r\n\r\n    uint256 startSupply = currentMintIndex();\r\n    amountSold = _amountSold + count;\r\n    uint256[] memory ids = new uint256[](count);\r\n    for (uint256 i; i < count; ++i) {\r\n      ids[i] = startSupply + i;\r\n    }\r\n    Minter(nft).mintNFTs(msg.sender, ids);\r\n  }\r\n\r\n  function mint(uint256 count) external nonReentrant {\r\n    _mintFor(msg.sender, count, msg.sender);\r\n  }\r\n\r\n  function devMintFrom(address from, uint256 count) public onlyOwner {\r\n    require(block.timestamp > startTime + 3 days, \"Too soon\");\r\n    _mintFor(from, count, msg.sender);\r\n  }\r\n\r\n  function devMintsFrom(address[] calldata froms, uint256[] calldata counts) public onlyOwner {\r\n    for (uint256 i; i < froms.length; ++i) {\r\n      devMintFrom(froms[i], counts[i]);\r\n    }\r\n  }\r\n\r\n  function _mintFor(address account, uint256 count, address to) internal {\r\n    require(count > 0, \"0?\");\r\n    require(block.timestamp >= startTime, \"Can only mint after the sale has begun\");\r\n\r\n    uint256 purchaseInfo = purchases[account];\r\n    uint256 _mintedBalance =_getSlot(purchaseInfo, MINTED_SLOT_INDEX);\r\n    uint256[] memory ids = _allIdsPurchased(purchaseInfo);\r\n    require(count <= ids.length-_mintedBalance, \"Not enough balance\");\r\n\r\n    uint256 newMintedBalance = _mintedBalance + count;\r\n    purchases[account] = _writeDataSlot(purchaseInfo, MINTED_SLOT_INDEX, newMintedBalance);\r\n\r\n    uint256[] memory mintableIds = new uint256[](count);\r\n    for (uint256 i; i < count; ++i) {\r\n      mintableIds[i] = ids[_mintedBalance+i];\r\n    }\r\n\r\n    // Mint to the owner.\r\n    Minter(nft).mintNFTs(to, mintableIds);\r\n    \r\n    emit Minted(account, count);\r\n  }\r\n\r\n  function wavePurchaseInfo(uint256 wave, address who) external view returns (uint256, uint256) {\r\n    uint256 cache = purchases[who];\r\n    return _getInfo(cache, wave);\r\n  }\r\n\r\n  function currentMaxPerTX() external view returns (uint256) {\r\n    return maxPerTX(currentWave());\r\n  } \r\n\r\n  function allIdsPurchasedBy(address who) external view returns (uint256[] memory) {\r\n    uint256 cache = purchases[who];\r\n    return _allIdsPurchased(cache);\r\n  } \r\n  \r\n  function mintedBalance(address who) external view returns (uint256) {\r\n    uint256 cache = purchases[who];\r\n    uint256 _mintedBalance =_getSlot(cache, MINTED_SLOT_INDEX);\r\n    return _mintedBalance;\r\n  }\r\n\r\n  function currentWave() public view returns (uint256) {\r\n    if (block.timestamp < startTime) {\r\n      return 0;\r\n    }\r\n    uint256 timeSinceStart = block.timestamp - startTime;\r\n    uint256 _currentWave = timeSinceStart/waveTimeLength;\r\n    return _currentWave;\r\n  }\r\n\r\n  function currentMintIndex() public view returns (uint256) {\r\n    return amountSold + devSupply + 1;\r\n  }\r\n\r\n  function maxPerTX(uint256 _wave) public pure returns (uint256) {\r\n    if (_wave == 0) {\r\n      return 1;\r\n    } else if (_wave == 1) {\r\n      return 2;\r\n    } else if (_wave == 2) {\r\n      return 4;\r\n    } else {\r\n      return 8;\r\n    }\r\n  }\r\n\r\n  function hasDoneWave(uint256 purchaseInfo, uint256 wave) public pure returns (bool) {\r\n    uint256 slot = _getSlot(purchaseInfo, wave);\r\n    return slot != 0;\r\n  }\r\n\r\n  function balanceOf(address who) public view returns (uint256) {\r\n    uint256 cache = purchases[who];\r\n    uint256 currentBalance = _getSlot(cache, BALANCE_SLOT_INDEX);\r\n    uint256 _mintedBalance = _getSlot(cache, MINTED_SLOT_INDEX);\r\n    return currentBalance-_mintedBalance;\r\n  }\r\n\r\n  function _createNewPurchaseInfo(uint256 purchaseInfo, uint256 wave, uint256 _startingSupply, uint256 count) internal pure returns (uint256) {\r\n    require(wave < MAX_WAVES, \"Not a wave index\");\r\n    uint256 purchase = _startingSupply<<8;\r\n    purchase |= count;\r\n    uint256 newWaveSlot = _writeWaveSlot(purchaseInfo, wave, purchase);\r\n    uint256 newBalance = _getBalance(purchaseInfo) + count;\r\n    return _writeDataSlot(newWaveSlot, BALANCE_SLOT_INDEX, newBalance);\r\n  }\r\n\r\n  function _allIdsPurchased(uint256 purchaseInfo) internal pure returns (uint256[] memory) {\r\n    uint256 currentBalance = _getBalance(purchaseInfo);\r\n    if (currentBalance == 0) {\r\n      uint256[] memory empty;\r\n      return empty;\r\n    }\r\n\r\n    uint256[] memory ids = new uint256[](currentBalance);\r\n\r\n    uint256 index;\r\n    for (uint256 wave; wave < MAX_WAVES; ++wave) {\r\n      (uint256 supply, uint256 count) = _getInfo(purchaseInfo, wave);\r\n      if (count == 0)\r\n        continue;\r\n      for (uint256 i; i < count; ++i) {\r\n        ids[index] = supply + i;\r\n        ++index;\r\n      }\r\n    }\r\n    require(index == ids.length, \"not all\");\r\n\r\n    return ids;\r\n  }\r\n\r\n  function _getInfo(uint256 purchaseInfo, uint256 wave) internal pure returns (uint256, uint256) {\r\n    require(wave < MAX_WAVES, \"Not a wave index\");\r\n    uint256 slot = _getSlot(purchaseInfo, wave);\r\n    uint256 supply = slot>>8;\r\n    uint256 count = uint256(uint8(slot));\r\n    return (supply, count);\r\n  } \r\n\r\n  function _getBalance(uint256 purchaseInfo) internal pure returns (uint256) {\r\n    return _getSlot(purchaseInfo, BALANCE_SLOT_INDEX);\r\n  }\r\n\r\n  function _writeWaveSlot(uint256 purchase, uint256 index, uint256 data) internal pure returns (uint256) {\r\n    require(index < MAX_WAVES, \"not valid index\");\r\n    uint256 writeIndex = 256 - ((index+1) * 32);\r\n    require(uint32(purchase<<writeIndex) == 0, \"Cannot write in wave slot twice\");\r\n    uint256 newSlot = data<<writeIndex;\r\n    uint256 newPurchase = purchase | newSlot;\r\n    return newPurchase;\r\n  }\r\n\r\n  function _writeDataSlot(uint256 purchase, uint256 index, uint256 data) internal pure returns (uint256) {\r\n    require(index == MINTED_SLOT_INDEX || index == BALANCE_SLOT_INDEX, \"not valid index\");\r\n    uint256 writeIndex = 256 - ((index+1) * 32);\r\n    uint256 newSlot = uint256(uint32(data))<<writeIndex;\r\n    uint256 newPurchase = purchase>>(writeIndex+32)<<(writeIndex+32);\r\n    if (index == MINTED_SLOT_INDEX) \r\n      newPurchase |= _getSlot(purchase, BALANCE_SLOT_INDEX);\r\n    newPurchase |= newSlot;\r\n    return newPurchase;\r\n  }\r\n\r\n  function _getSlot(uint256 purchase, uint256 index) internal pure returns (uint256) {\r\n    require(index < SLOT_COUNT, \"not valid index\");\r\n    uint256 writeIndex = 256 - ((index+1) * 32);\r\n    uint256 slot = uint32(purchase>>writeIndex);\r\n    return slot;\r\n  }\r\n\r\n  function sendValue(address payable recipient, uint256 amount) internal {\r\n    require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n    (bool success, ) = recipient.call{ value: amount }(\"\");\r\n    require(success, \"Address: unable to send value, recipient may have reverted\");\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ownerCount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"Reserved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"allIdsPurchasedBy\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountForSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"buyKGF\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"buyKGFPostSale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentMaxPerTX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentMintIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentWave\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"devMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"devMintFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"devMintTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"froms\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"counts\",\"type\":\"uint256[]\"}],\"name\":\"devMintsFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"purchaseInfo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wave\",\"type\":\"uint256\"}],\"name\":\"hasDoneWave\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wave\",\"type\":\"uint256\"}],\"name\":\"maxPerTX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"mintedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"amountsToBuy\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256[3]\",\"name\":\"amounts\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256[3]\",\"name\":\"indexes\",\"type\":\"uint256[3]\"},{\"internalType\":\"bytes32[][3]\",\"name\":\"merkleProof\",\"type\":\"bytes32[][3]\"}],\"name\":\"presaleBuy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"}],\"name\":\"setNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_whitelistRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_uwulistRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_teamRoot\",\"type\":\"bytes32\"}],\"name\":\"setPresaleRoots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamMinted\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uwuMinted\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uwuPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uwuRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wave\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"wavePurchaseInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"waveTimeLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistMinted\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "KillerGFWaveLockSale", "CompilerVersion": "v0.8.8+commit.dddeac2f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000006be69b2a9b153737887cfcdca7781ed1511c7e360000000000000000000000003ddd9f109345c1a272b2d79e3b4e1f4d05f7f7580000000000000000000000000000000000000000000000000000000061ef44880000000000000000000000000000000000000000000000000000000000001e25000000000000000000000000000000000000000000000000000000000000003c", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ce27864a927cc4d675c3504091c139e58deed9553e175ffda8d77e1e987a25e7"}