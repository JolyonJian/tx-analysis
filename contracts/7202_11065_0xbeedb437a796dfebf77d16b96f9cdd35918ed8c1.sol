{"ERC20Interface.sol":{"content":"pragma solidity ^0.5.10;\r\n\r\ncontract ERC20Interface {\r\n    function totalSupply() \r\n\t\tpublic \r\n\t\tview \r\n\t\treturns (uint256);\r\n\r\n    function balanceOf(address tokenOwner) \r\n\t\tpublic \r\n\t\tview \r\n\t\treturns (uint256 balance);\r\n    \r\n\tfunction allowance\r\n\t\t(address tokenOwner, address spender) \r\n\t\tpublic \r\n\t\tview \r\n\t\treturns (uint256 remaining);\r\n\r\n    function transfer(address to, uint256 tokens) \t\t\t\tpublic \r\n\t\treturns (bool success);\r\n    \r\n\tfunction approve(address spender, uint256 tokens) \t\tpublic \r\n\t\treturns (bool success);\r\n\r\n    function transferFrom \r\n\t\t(address from, address to, uint256 tokens) \t\t\t\tpublic \r\n\t\treturns (bool success);\r\n\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\r\n}"},"MoondayCapital.sol":{"content":"pragma solidity ^0.5.10;\r\n\r\nimport \"./SafeMath.sol\";\r\nimport \"./ERC20Interface.sol\";\r\n\r\ncontract MoondayCapital {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 constant public BASE_PERCENT = 10;\r\n    uint256 constant public REFERRAL_PERCENTS = 50;\r\n    uint256 constant public MANAGER_FEE = 30;\r\n    uint256 constant public PARTNER_FEE = 10;\r\n\tuint256 constant public DEV_FEE = 10;\r\n\tuint256 constant public LOCK_FEE = 50;\r\n    uint256 constant public PERCENTS_DIVIDER = 1000;\r\n\tuint256 constant public PERCENTS_DAILY = 70;\r\n    uint256 constant public TIME_STEP = 1 days;\r\n\t\r\n\tERC20Interface MoondayToken;\r\n\r\n    uint256 public totalUsers;\r\n    uint256 public totalInvested;\r\n    uint256 public totalWithdrawn;\r\n    uint256 public totalDeposits;\r\n\r\n    address payable public managerAddress;\r\n    address payable public devAddress;\r\n\taddress payable public partnerAddress;\r\n\taddress payable public lockAddress;\r\n\r\n    struct Deposit {\r\n        uint256 amount;\r\n        uint256 withdrawn;\r\n        uint256 start;\r\n    }\r\n\r\n    struct User {\r\n        Deposit[] deposits;\r\n        uint256 checkpoint;\r\n        address referrer;\r\n        uint256 bonus;\r\n    }\r\n\r\n    mapping (address =\u003e User) internal users;\r\n\r\n    event Newbie(address user);\r\n    event NewDeposit(address indexed user, uint256 amount);\r\n    event Withdrawn(address indexed user, uint256 amount);\r\n    event RefBonus(address indexed referrer, address indexed referral, uint256 amount);\r\n    event FeePayed(address indexed user, uint256 totalAmount);\r\n\r\n    constructor(address payable _managerAddress, address payable _partnerAddress, address payable _devAddress, address payable _lockAddress, address _MoondayToken) public {\r\n        managerAddress = _managerAddress;\r\n        partnerAddress = _partnerAddress;\r\n\t\tdevAddress = _devAddress;\r\n\t\tlockAddress = _lockAddress;\r\n        MoondayToken = ERC20Interface(_MoondayToken);\r\n    }\r\n\r\n    function invest(address referrer, uint256 amount) public {\r\n\r\n        uint256 received = amount.mul(99).div(100);\r\n\r\n\t\tMoondayToken.transferFrom(msg.sender, address(this), received);\r\n\t\tMoondayToken.transfer(managerAddress, received.mul(MANAGER_FEE).div(PERCENTS_DIVIDER));\r\n\t\tMoondayToken.transfer(partnerAddress, received.mul(PARTNER_FEE).div(PERCENTS_DIVIDER));\r\n\t\tMoondayToken.transfer(devAddress, received.mul(DEV_FEE).div(PERCENTS_DIVIDER));\r\n\t\tMoondayToken.transfer(lockAddress, received.mul(LOCK_FEE).div(PERCENTS_DIVIDER));\r\n\r\n        emit FeePayed(msg.sender, received.mul(MANAGER_FEE.add(PARTNER_FEE).add(DEV_FEE).add(LOCK_FEE)).div(PERCENTS_DIVIDER));\r\n\r\n        User storage user = users[msg.sender];\r\n\r\n        if (user.referrer == address(0) \u0026\u0026 users[referrer].deposits.length \u003e 0 \u0026\u0026 referrer != msg.sender) {\r\n            user.referrer = referrer;\r\n        }\r\n\r\n        if (user.referrer != address(0)) {\r\n\r\n            address upline = user.referrer;\r\n            \r\n\t\t\tif (upline != address(0)) {\r\n\t\t\t\tuint256 _amount = received.mul(REFERRAL_PERCENTS).div(PERCENTS_DIVIDER);\r\n\t\t\t\tusers[upline].bonus = users[upline].bonus.add(_amount);\r\n\t\t\t\temit RefBonus(upline, msg.sender, _amount);\r\n\t\t\t}\r\n        }\r\n\r\n        if (user.deposits.length == 0) {\r\n            user.checkpoint = block.timestamp;\r\n            totalUsers = totalUsers.add(1);\r\n            emit Newbie(msg.sender);\r\n        }\r\n\r\n        user.deposits.push(Deposit(received, 0, block.timestamp));\r\n\r\n        totalInvested = totalInvested.add(received);\r\n        totalDeposits = totalDeposits.add(1);\r\n\r\n        emit NewDeposit(msg.sender, received);\r\n\r\n    }\r\n\r\n    function withdraw() public {\r\n        User storage user = users[msg.sender];\r\n\r\n        uint256 userPercentRate = getUserPercentRate(msg.sender);\r\n\r\n        uint256 totalAmount;\r\n        uint256 dividends;\r\n\r\n        for (uint256 i = 0; i \u003c user.deposits.length; i++) {\r\n\r\n            if (user.deposits[i].withdrawn \u003c user.deposits[i].amount.mul(185).div(100)) {\r\n\r\n                if (user.deposits[i].start \u003e user.checkpoint) {\r\n\r\n                    dividends = (user.deposits[i].amount.mul(userPercentRate).div(PERCENTS_DIVIDER))\r\n\t\t\t\t\t\t.mul(block.timestamp.sub(user.deposits[i].start))\r\n\t\t\t\t\t\t.div(TIME_STEP);\r\n\r\n                } else {\r\n\r\n                    dividends = (user.deposits[i].amount.mul(userPercentRate).div(PERCENTS_DIVIDER))\r\n                        .mul(block.timestamp.sub(user.checkpoint))\r\n                        .div(TIME_STEP);\r\n\r\n                }\r\n\r\n                if (user.deposits[i].withdrawn.add(dividends) \u003e user.deposits[i].amount.mul(185).div(100)) {\r\n                    dividends = (user.deposits[i].amount.mul(185).div(100)).sub(user.deposits[i].withdrawn);\r\n                }\r\n\r\n                user.deposits[i].withdrawn = user.deposits[i].withdrawn.add(dividends); /// changing of storage data\r\n                totalAmount = totalAmount.add(dividends);\r\n\r\n            }\r\n        }\r\n\r\n        uint256 referralBonus = getUserReferralBonus(msg.sender);\r\n        if (referralBonus \u003e 0) {\r\n            totalAmount = totalAmount.add(referralBonus);\r\n            user.bonus = 0;\r\n        }\r\n\r\n        require(totalAmount \u003e 0, \"User has no dividends\");\r\n\r\n        uint256 contractBalance = MoondayToken.balanceOf(address(this));\r\n        if (contractBalance \u003c totalAmount) {\r\n            totalAmount = contractBalance;\r\n        }\r\n\r\n        user.checkpoint = block.timestamp;\r\n\t\t\r\n\t\tMoondayToken.transfer(msg.sender, totalAmount);\r\n\r\n        totalWithdrawn = totalWithdrawn.add(totalAmount);\r\n\r\n        emit Withdrawn(msg.sender, totalAmount);\r\n\r\n    }\r\n\r\n\r\n    function getUserPercentRate(address userAddress) public view returns (uint256) {\r\n        User storage user = users[userAddress];\r\n\r\n        return PERCENTS_DAILY;\r\n    }\r\n\r\n\r\n    function getUserDividends(address userAddress) public view returns (uint256) {\r\n        User storage user = users[userAddress];\r\n\r\n        uint256 userPercentRate = getUserPercentRate(userAddress);\r\n\r\n        uint256 totalDividends;\r\n        uint256 dividends;\r\n\r\n        for (uint256 i = 0; i \u003c user.deposits.length; i++) {\r\n\r\n            if (user.deposits[i].withdrawn \u003c user.deposits[i].amount.mul(185).div(100)) {\r\n\r\n                if (user.deposits[i].start \u003e user.checkpoint) {\r\n\r\n                    dividends = (user.deposits[i].amount.mul(userPercentRate).div(PERCENTS_DIVIDER))\r\n\t\t\t\t\t\t.mul(block.timestamp.sub(user.deposits[i].start))\r\n\t\t\t\t\t\t.div(TIME_STEP);\r\n\r\n                } else {\r\n\r\n                    dividends = (user.deposits[i].amount.mul(userPercentRate).div(PERCENTS_DIVIDER))\r\n\t\t\t\t\t\t.mul(block.timestamp.sub(user.checkpoint))\r\n\t\t\t\t\t\t.div(TIME_STEP);\r\n                }\r\n\r\n                if (user.deposits[i].withdrawn.add(dividends) \u003e user.deposits[i].amount.mul(185).div(100)) {\r\n                    dividends = (user.deposits[i].amount.mul(185).div(100)).sub(user.deposits[i].withdrawn);\r\n                }\r\n\r\n                totalDividends = totalDividends.add(dividends);\r\n\r\n            }\r\n\r\n        }\r\n\r\n        return totalDividends;\r\n    }\r\n\r\n    function getUserCheckpoint(address userAddress) public view returns(uint256) {\r\n        return users[userAddress].checkpoint;\r\n    }\r\n\r\n    function getUserReferrer(address userAddress) public view returns(address) {\r\n        return users[userAddress].referrer;\r\n    }\r\n\r\n    function getUserReferralBonus(address userAddress) public view returns(uint256) {\r\n        return users[userAddress].bonus;\r\n    }\r\n\r\n    function getUserAvailable(address userAddress) public view returns(uint256) {\r\n        return getUserReferralBonus(userAddress).add(getUserDividends(userAddress));\r\n    }\r\n\r\n    function isActive(address userAddress) public view returns (bool) {\r\n        User storage user = users[userAddress];\r\n\r\n        if (user.deposits.length \u003e 0) {\r\n            if (user.deposits[user.deposits.length-1].withdrawn \u003c user.deposits[user.deposits.length-1].amount.mul(185).div(100)) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getUserDepositInfo(address userAddress, uint256 index) public view returns(uint256, uint256, uint256) {\r\n        User storage user = users[userAddress];\r\n\r\n        return (user.deposits[index].amount, user.deposits[index].withdrawn, user.deposits[index].start);\r\n    }\r\n\r\n    function getUserAmountOfDeposits(address userAddress) public view returns(uint256) {\r\n        return users[userAddress].deposits.length;\r\n    }\r\n\r\n    function getUserTotalDeposits(address userAddress) public view returns(uint256) {\r\n        User storage user = users[userAddress];\r\n\r\n        uint256 amount;\r\n\r\n        for (uint256 i = 0; i \u003c user.deposits.length; i++) {\r\n            amount = amount.add(user.deposits[i].amount);\r\n        }\r\n\r\n        return amount;\r\n    }\r\n\r\n    function getUserTotalWithdrawn(address userAddress) public view returns(uint256) {\r\n        User storage user = users[userAddress];\r\n\r\n        uint256 amount;\r\n\r\n        for (uint256 i = 0; i \u003c user.deposits.length; i++) {\r\n            amount = amount.add(user.deposits[i].withdrawn);\r\n        }\r\n\r\n        return amount;\r\n    }\r\n}"},"SafeMath.sol":{"content":"pragma solidity ^0.5.10;\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003c= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003e 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n}"}}