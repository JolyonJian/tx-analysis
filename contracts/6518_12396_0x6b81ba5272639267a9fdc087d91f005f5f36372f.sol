{{
  "language": "Solidity",
  "sources": {
    "contracts/MEGAMISales.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxddxxxxddxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n// xxxxxxxxxxxxxxxxxxxxdol:;,''....'',;:lodxxxxxxxxxxxxxxxxxxxxxdlc;,''....'',;:codxxxxxxxxxxxxxxxxxxxx\n// xxxxxxxxxxxxxxxxxdc;'.                .';ldxxxxxxxxxxxxxxdl;'.                ..;cdxxxxxxxxxxxxxxxxx\n// xxxxxxxxxxxxxxdl;.                        .;ldxxxxxxxxxo;.                        .;ldxxxxxxxxxxxxxx\n// xxxxxxxxxxxxxl,.                            .,lxxxxxxo;.                            .'ldxxxxxxxxxxxx\n// xxxxxxxxxxxo;.                                .,lddo;.                                .;oxxxxxxxxxxx\n// xxxxxxxxxxo'                                    ....                                    'lxxxxxxxxxx\n// xxxxxxxxxl'                             .                   .                            .lxxxxxxxxx\n// xxxxxxxxo,                             'c,.              .,c'                             'oxxxxxxxx\n// xxxxxxxxc.                             .lxl,.          .,ldo.                             .:xxxxxxxx\n// xxxxxxxd,                              .:xxxl,.      .,ldxxc.                              'oxxxxxxx\n// xxxxxxxo'                               ,dxxxxl,.  .,ldxxxd;                               .lxxxxxxx\n// xxxxxxxo.                               .oxxxxxxl::ldxxxxxo'                               .lxxxxxxx\n// xxxxxxxd,                               .cxxxxxxxxxxxxxxxxl.                               'oxxxxxxx\n// xxxxxxxx:.           ..                  ;xxxxxxxxxxxxxxxx:                  ..            ;dxxxxxxx\n// xxxxxxxxo'           ''                  'oxxxxxxxxxxxxxxd,                  .'           .lxxxxxxxx\n// xxxxxxxxxc.          ;,                  .lxxxxxxxxxxxxxxo.                  ';.         .cxxxxxxxxx\n// xxxxxxxxxxc.        .c,                  .:xxxxxxxxxxxxxxc.                  'c.        .cdxxxxxxxxx\n// xxxxxxxxxxxl'       'l,       ..          ,dxxxxxxxxxxxxd;          ..       'l,       'lxxxxxxxxxxx\n// xxxxxxxxxxxxd:.     ;o,       .'          .oxxxxxxxxxxxxo'          ..       'o:.    .:dxxxxxxxxxxxx\n// xxxxxxxxxxxxxxd:.  .cd,       .;.         .cxxxxxxxxxxxxl.         .,'       'ol.  .:oxxxxxxxxxxxxxx\n// xxxxxxxxxxxxxxxxo:.,od,       .:.          ;xxxxxxxxxxxx:          .:'       'oo,.:oxxxxxxxxxxxxxxxx\n// xxxxxxxxxxxxxxxxxxdodd,       .l,          'dxxxxxxxxxxd,          'l'       'oxodxxxxxxxxxxxxxxxxxx\n// xxxxxxxxxxxxxxxxxxxxxd;       .l:.         .lxxxxxxxxxxo.          :o'       ,dxxxxxxxxxxxxxxxxxxxxx\n// xxxxxxxxxxxxxxxxxxxxxxd:.     .ol.         .:xxxxxxxxxxc.         .co'     .:oxxxxxxxxxxxxxxxxxxxxxx\n// xxxxxxxxxxxxxxxxxxxxxxxxd:.   .oo'          ;dxxxxxxxxd;          .oo'   .:oxxxxxxxxxxxxxxxxxxxxxxxx\n// xxxxxxxxxxxxxxxxxxxxxxxxxxo:. .od;          'oxxxxxxxxo'          ,do' .:oxxxxxxxxxxxxxxxxxxxxxxxxxx\n// xxxxxxxxxxxxxxxxxxxxxxxxxxxxd::oxc.         .cxxxxxxxxl.         .:xd::oxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n// xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxl.          ;xxxxxxxx:.         .lxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n// xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxd;          'dxxxxxxd,          ,dxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n// xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxd:.        .lxxxxxxo.        .:oxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n// xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxd:.      .cxxxxxxc.      .:oxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n// xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxo:.     ;dxxxxd;     .:oxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n// xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxd:.   'oxxxxo'   .:oxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n// xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxo:. .cxxxxl. .:oxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n// xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxo:'cxxxxc,:oxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n// xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxddxxxxddxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n//\n// MEGAMI https://www.megami.io/\n\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"./interfaces/IMEGAMI.sol\";\n\n/**\n * @dev Implementation of the MEGAMI's sales contract.\n */\ncontract MEGAMISales is ReentrancyGuard, Ownable {\n    using ECDSA for bytes32;\n\n    /**\n     * @dev The struct holding the status of each sale\n     */\n    struct SalesActiveStatus {\n        bool auctionActive;\n        bool privateSaleActive;\n        bool publicSaleActive;\n    }\n\n    /**\n     * @dev Minimum token ID of MEGAMI.\n     */ \n    uint256 private constant START_TOKEN_ID = 1;\n\n    /**\n     * @notice Total supply of MEGAMI tokens.\n     */\n    uint256 public constant MAX_SUPPLY = 10000;\n\n    /**\n     * @notice Reserved MEGAMI tokens reserved for the team.\n     */\n    uint256 public constant RESERVED_TOKENS_FOR_TEAM = 450;\n\n    /**\n     * @notice Length of the auction (seconds)\n     */\n    uint256 public constant AUCTION_LENGTH = 48 * 60 * 60; // DA finishes after 48 hours\n\n    /**\n     * @notice Start price of Origins in the auction.\n     */ \n    uint256 public constant AUCTION_STARTING_PRICE_ORIGIN    = 10 ether;\n\n    /**\n     * @notice Start price of Alters in the auction.\n     */ \n    uint256 public constant AUCTION_STARTING_PRICE_ALTER     = 5 ether;\n\n    /**\n     * @notice Start price of Generateds in the auction.\n     */ \n    uint256 public constant AUCTION_STARTING_PRICE_GENERATED = 0.2 ether;\n\n    /**\n     * @notice Lowest price of MEGAMI tokens in the auction.\n     */\n    uint256 public constant AUCTION_LOWEST_PRICE = 0.08 ether;\n\n    /**\n     * @notice Price drop unit of Origins in the auction. Price reaches the lowest price after 24 hours.\n     */\n    uint256 public constant AUCTION_PRICE_DROP_UNIT_ORIGIN    = 0.21 ether; \n\n    /**\n     * @notice Price drop unit of Alters in the auction. Price reaches the lowest price after 24 hours.\n     */\n    uint256 public constant AUCTION_PRICE_DROP_UNIT_ALTER     = 0.1025 ether;\n\n    /**\n     * @notice Price drop unit of Generateds in the auction. Price reaches the lowest price after 24 hours.\n     */\n    uint256 public constant AUCTION_PRICE_DROP_UNIT_GENERATED = 0.0025 ether;\n\n    /**\n     * @notice Price drop frequency (seconds).\n     */\n    uint256 public constant AUCTION_PRICE_DROP_FREQUENCY = 30 * 60;\n\n    /**\n     * @notice Total release waves. \n     */\n    uint256 public constant TOTAL_RELEASE_WAVES = 5;\n\n    /**\n     * @notice Number of Origins in a wave.\n     */\n    uint256 public constant NUMBER_OF_ORIGINS_IN_WAVE = 6;  // 30 origins divided by 5 waves\n\n    /**\n     * @notice Release interval (seconds.)\n     */\n    uint256 public constant RELEASE_WAVE_TIME_INTERVAL = 60 * 60 * 1; // Relese new wave every 1 hour\n\n    /**\n     * @notice Starting time (seconds) of the auction.\n     * @dev To convert into readable time https://www.unixtimestamp.com/\n     */\n    uint256 public auctionStartingTimestamp;\n\n    /**\n     * @notice The status of each sale\n     */\n    SalesActiveStatus public salesStatus = SalesActiveStatus(false, false, false);\n\n    /**\n     * @notice The price of MEGAMI tokens in the private/public sale. \n     */\n    uint256 public fixedSalePrice = 0.08 ether;\n\n    /**\n     * @notice Total number of MEGAMI tokens sold so far.\n     */\n    uint256 public totalSold = 0;\n\n    /**\n     * @dev Address of the fund manager contract.\n     */\n    address private fundManager;\n\n    /**\n     * @dev Address of the MEGAMI token contract.\n     */\n    IMEGAMI private megamiToken;\n    \n    /**\n     * @dev Signer of the ML management signature.\n     */\n    address private mlSigner;\n\n    /**\n     * @dev Map to manage consumed ML spots per minter.\n     */\n    mapping(address => uint256) private userToUsedMLs;\n\n    /**\n     * @dev Constractor of MEGAMI's sales contract. Setting the MEGAMI token and fund manager.\n     * @param megamiContractAddress Address of the MEGAMI token contract.\n     * @param fundManagerContractAddress Address of the contract managing funds.\n     */\n    constructor(address megamiContractAddress, address fundManagerContractAddress){\n        megamiToken = IMEGAMI(payable(megamiContractAddress));\n        fundManager = payable(fundManagerContractAddress);\n    }\n\n    /**\n     * @dev The modifier allowing the function access only for real humans.\n     */\n    modifier callerIsUser() {\n        require(tx.origin == msg.sender, \"The caller is another contract\");\n        _;\n    }\n\n    /**\n     * @dev For receiving fund in case someone try to send it.\n     */\n    receive() external payable {}\n    \n    /**\n     * @dev Set the address of the signer being used for validating Mintlist signatures.\n     */\n    function setSigner(address signer) external onlyOwner {\n        mlSigner = signer;\n    }\n\n    /**\n     * @dev Mint the specified MEGAMI token with auction price. \n     * @param signature Signature being used for validating the Mintlist spots of the minter.\n     * @param mlSpots Total number of mintlist spots allocated to the minter.\n     * @param tokenId Token ID being minted.\n     */\n    function mintDA(bytes calldata signature, uint8 mlSpots, uint256 tokenId) external payable callerIsUser nonReentrant {\n        require(salesStatus.auctionActive, \"DA isnt active\");\n        \n        //Require DA started\n        require(\n            block.timestamp >= auctionStartingTimestamp,\n            \"DA has not started!\"\n        );        \n\n        require(block.timestamp <= getAuctionEndTime(), \"DA is finished\");\n\n        // Validate Mintlist\n        require(verifySignature(signature, mlSpots), \"Signer address mismatch.\");\n\n        // Check number of ML spots\n        require(\n            userToUsedMLs[msg.sender] < mlSpots,\n            \"All ML spots have been consumed\"\n        );\n\n        // Check total sold\n        require(totalSold < (MAX_SUPPLY - RESERVED_TOKENS_FOR_TEAM), \"sold out\");\n\n        // Get current mint price\n        uint256 _currentPrice = currentPrice(tokenId);\n\n        // Validate the paid amount\n        require(msg.value >= _currentPrice, \"Did not send enough eth.\");\n\n        // Send back overpaid amount if minter sent more than _currentPrice\n        if (msg.value > _currentPrice) {\n            (bool sent, ) = msg.sender.call{value: msg.value - _currentPrice}(\"\");\n            require(sent, \"failed to send back fund\");\n        }\n\n        // Increment used ML spots\n        unchecked { ++userToUsedMLs[msg.sender]; }\n\n        // Increment total sold\n        unchecked { ++totalSold; }\n\n        megamiToken.mint(tokenId, msg.sender);\n    }\n\n    /**\n     * @dev Returns the used ML spots of the user\n     * @param user The address of a user being checked\n     */\n    function getUsedMLs(address user) external view returns(uint256) {\n        return userToUsedMLs[user];\n    }\n\n    /**\n     * @dev Set the price of the private/public sale.\n     * @param newPrice The new price of the private/public sale.\n     */\n    function setFixedSalePrice(uint256 newPrice) external onlyOwner {\n        fixedSalePrice = newPrice;\n    }\n\n    /**\n     * @dev Mint the specified MEGAMI token with public price.  \n     * @param tokenId Token ID being minted.\n     */\n    function mintPrivate(bytes calldata signature, uint8 mlSpots, uint256 tokenId) external payable callerIsUser nonReentrant {\n        require(salesStatus.privateSaleActive, \"Private sale isn't active\");\n\n        // Validate eligibility. \n        // Since we don't check the number of mlSpots in Private sale, \n        // mlSpots = 0 works as a waitlist which can mint in private sale.\n        require(verifySignature(signature, mlSpots), \"Signer address mismatch.\");\n\n        require(msg.value == fixedSalePrice, \"Incorrect amount of eth.\");\n\n        // Check total sold\n        require(totalSold < (MAX_SUPPLY - RESERVED_TOKENS_FOR_TEAM), \"sold out\");\n\n        // Increment total sold\n        unchecked { ++totalSold; }\n\n        megamiToken.mint(tokenId, msg.sender);\n    }\n\n    /**\n     * @dev Mint the specified MEGAMI token with public price.  \n     * @param tokenId Token ID being minted.\n     */\n    function mintPublic(uint256 tokenId) external payable callerIsUser nonReentrant {\n        require(salesStatus.publicSaleActive, \"Public sale isn't active\");\n        require(msg.value == fixedSalePrice, \"Incorrect amount of eth.\");\n\n        // Check total sold\n        require(totalSold < (MAX_SUPPLY - RESERVED_TOKENS_FOR_TEAM), \"sold out\");\n\n        // Increment total sold\n        unchecked { ++totalSold; }\n\n        megamiToken.mint(tokenId, msg.sender);\n    }\n\n    /**\n     * @dev Mint the specified MEGAMI tokens and send to the specified recipient. Mainly used for giving Free MEGAMIs.\n     * @param recipient Recipient whom minted tokens are transfered to.\n     * @param tokenIds Token IDs being minted.\n     */\n    function mintTeam(address recipient, uint256[] calldata tokenIds) external onlyOwner {\n        require(address(recipient) != address(0), \"recipient address is necessary\");\n        uint256 count = tokenIds.length;\n        for (uint256 i = 0; i < count;) {\n            // Increment total sold\n            unchecked { ++totalSold; }\n\n            megamiToken.mint(tokenIds[i], recipient);\n            unchecked { ++i; }\n        }\n    }\n\n    /**\n     * @dev Set the active status of auction.\n     */\n    function setDutchActionActive(bool isActive) external onlyOwner {\n        require(mlSigner != address(0), \"Mintlist signer must be set before starting auction\");\n        salesStatus.auctionActive = isActive;\n    }\n\n    /**\n     * @dev Returns the active status of the auction\n     */\n    function getDutchAuctionActive() external view returns (bool) {\n        return salesStatus.auctionActive;\n    }\n\n    /**\n     * @dev Set the active status of private sale.\n     */\n    function setPrivateSaleActive(bool isActive) external onlyOwner {\n        salesStatus.privateSaleActive = isActive;\n    }\n\n    /**\n     * @dev Returns the active status of the private sale\n     */\n    function getPrivateSaleActive() external view returns (bool) {\n        return salesStatus.privateSaleActive;\n    }\n\n    /**\n     * @dev Set the active status of public sale.\n     */\n    function setPublicSaleActive(bool isActive) external onlyOwner {\n        salesStatus.publicSaleActive = isActive;\n    }\n\n    /**\n     * @dev Returns the active status of the public sale\n     */\n    function getPublicSaleActive() external view returns (bool) {\n        return salesStatus.publicSaleActive;\n    }\n    \n    /**\n     * @dev Set the address of the fund manager contract.\n     * @param contractAddr Address of the contract managing funds.\n     */\n    function setFundManagerContract(address contractAddr)\n        external\n        onlyOwner\n    {\n        require(contractAddr != address(0), \"invalid address\");\n        fundManager = contractAddr;\n    } \n\n    /**\n     * @dev Return the address of the fund manager contarct.\n     */\n    function getFundManagerContract() external view returns (address) {\n        return fundManager;\n    }\n\n    /**\n     * @dev Allow owner to send funds directly to recipient. This is for emergency purpose and use moveFundToManager for regular withdraw.\n     * @param recipient The address of the recipinet.\n     */\n    function emergencyWithdraw(address recipient) external onlyOwner {\n        require(recipient != address(0), \"recipient shouldn't be 0\");\n\n        (bool sent, ) = recipient.call{value: address(this).balance}(\"\");\n        require(sent, \"failed to withdraw\");\n    }\n\n    /**\n     * @dev Move all of funds to the fund manager contract.\n     */\n    function moveFundToManager() external onlyOwner {\n        require(fundManager != address(0), \"fundManager shouldn't be 0\");\n        \n        (bool sent, ) = fundManager.call{value: address(this).balance}(\"\");\n        require(sent, \"failed to move fund to FundManager contract\");\n    }\n\n    /**\n     * @dev ERC20s should not be sent to this contract, but if someone does, it's nice to be able to recover them.\n     *      Copied from ForgottenRunesWarriorsGuild. Thank you dotta ;)\n     * @param token IERC20 the token address\n     * @param amount uint256 the amount to send\n     */\n    function forwardERC20s(IERC20 token, uint256 amount) public onlyOwner {\n        token.transfer(msg.sender, amount);\n    }\n\n    /**\n     * @dev Return the current price of the specified token.\n     * @param tokenId Token ID the price is being returned for.\n     */\n    function currentPrice(uint256 tokenId) public view returns (uint256) {\n        require(tokenId >= START_TOKEN_ID && tokenId < START_TOKEN_ID + MAX_SUPPLY, \"invalid token id\");\n\n        uint256 currentTimestamp = block.timestamp;\n        uint256 wave = getWave(tokenId);\n        uint256 waveDAStartedTimestamp = auctionStartingTimestamp + (RELEASE_WAVE_TIME_INTERVAL * wave);\n\n        require(\n            currentTimestamp >= waveDAStartedTimestamp,\n            \"wave mint yet\"\n        );\n\n        //Seconds since we started\n        uint256 timeSinceStart = currentTimestamp - waveDAStartedTimestamp;\n\n        //How many decrements should've happened since that time\n        uint256 decrementsSinceStart = timeSinceStart / AUCTION_PRICE_DROP_FREQUENCY;\n\n        // Check the type of Megami and setting staring price and price drop\n        uint256 startingPrice = AUCTION_STARTING_PRICE_GENERATED;\n        uint256 priceDecrement = AUCTION_PRICE_DROP_UNIT_GENERATED;\n\n        // Since the range of tokenId is 1 to 10000, we need to convert it to 0 to 9999 for getting the expected sequence id\n        uint256 sequenceIdInWave = (tokenId - 1) % getSupplyPerWave();\n        if(sequenceIdInWave < NUMBER_OF_ORIGINS_IN_WAVE + getNumberOfAlters(wave)) {\n            if(sequenceIdInWave < NUMBER_OF_ORIGINS_IN_WAVE) {\n                // Origin\n                startingPrice = AUCTION_STARTING_PRICE_ORIGIN;\n                priceDecrement = AUCTION_PRICE_DROP_UNIT_ORIGIN;\n            } else {\n                // Alter\n                startingPrice = AUCTION_STARTING_PRICE_ALTER;\n                priceDecrement = AUCTION_PRICE_DROP_UNIT_ALTER;\n            }\n        }\n\n        // How much eth to remove\n        uint256 totalDecrement = decrementsSinceStart * priceDecrement;\n\n        //If how much we want to reduce is greater or equal to the range, return the lowest value\n        if (totalDecrement >= startingPrice - AUCTION_LOWEST_PRICE) {\n            return AUCTION_LOWEST_PRICE;\n        }\n\n        //If not, return the starting price minus the decrement.\n        return startingPrice - totalDecrement;\n    }\n\n    /**\n     * @dev Return the wave the specified token is being released.\n     * @param tokenId Token ID the release wave is being returned for.\n     */\n    function getWave(uint256 tokenId) public pure returns (uint256) {\n        // Since the range of tokenId is 1 to 10000, we need to convert it to 0 to 9999 for getting the expected wave number\n        return (tokenId - 1) / getSupplyPerWave();\n    }\n\n    /**\n     * @dev Set the start time of the auction. \n     * @param startTime Start time in unix timestamp format.\n     */\n    function setAuctionStartTime(uint256 startTime) public onlyOwner {\n        auctionStartingTimestamp = startTime;\n    }\n\n    /**\n     * @dev Returns the end time of the auction in unix timestamp format.\n     */\n    function getAuctionEndTime() public view returns (uint256) {\n        return auctionStartingTimestamp + AUCTION_LENGTH;\n    }\n    \n    /**\n     * @dev Do nothing for disable renouncing ownership.\n     */ \n    function renounceOwnership() public override onlyOwner {}     \n\n    /**\n     * @dev Returns the release waves where extra Alter are released. \n     *      Since there are 24 Alters and we can't evenly release them in each release wave, we need to release extra Alter in some waves.\n     * @param wave Relase wave that this function checks if extra Alter is relased or not.\n     */\n    function getNumberOfAlters(uint256 wave) private pure returns (uint256) {\n        // Since there are only 24 alters, it runs short of them in the 5th wave.\n        return wave == 4 ? 4 : 5;\n    }\n\n    /**\n     * @dev Return the amount of tokens being released in each release wave.\n     */\n    function getSupplyPerWave() private pure returns (uint256) {\n        return MAX_SUPPLY / TOTAL_RELEASE_WAVES;\n    }\n\n    /**\n     * @dev Verify the signature passed to the auction/private mint functions\n     */\n    function verifySignature(bytes calldata signature, uint8 mlSpots) private view returns (bool) {\n        // Message format is 1 byte shifted address + number of MLs (1 byte)\n        uint256 message = (uint256(uint160(msg.sender)) << 8) + mlSpots;\n        \n        return\n            mlSigner ==\n                keccak256(\n                    abi.encodePacked(\n                        \"\\x19Ethereum Signed Message:\\n32\",\n                        bytes32(message)\n                    )\n                ).recover(signature);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "contracts/interfaces/IMEGAMI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n/// @title Interface for MEGAMI ERC721 token\n\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\ninterface IMEGAMI is IERC721 {\n    function mint(uint256 _tokenId, address _address) external;\n}"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}