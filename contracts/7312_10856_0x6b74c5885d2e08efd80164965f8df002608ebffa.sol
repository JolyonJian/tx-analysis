{{
  "language": "Solidity",
  "sources": {
    "contracts/LandAuctionV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\nimport \"./interfaces/IWETH.sol\";\nimport \"./interfaces/ILockShiboshi.sol\";\nimport \"./interfaces/ILockLeash.sol\";\nimport \"./interfaces/ILandRegistry.sol\";\nimport \"./interfaces/ILandAuction.sol\";\n\nimport \"./LandAuction.sol\";\n\ncontract LandAuctionV2 is ILandAuction, AccessControl, ReentrancyGuard {\n    using ECDSA for bytes32;\n\n    uint32 constant clearLow = 0xffff0000;\n    uint32 constant clearHigh = 0x0000ffff;\n    uint32 constant factor = 0x10000;\n\n    /*\n        xLow, yHigh gets mapped to 1,1\n        transform: x + 97, 100 - y\n\n        y_mapped = 100 - y\n        x_mapped = 97 + x\n    */\n\n    int16 public constant xLow = -96;\n    int16 public constant yLow = -99;\n    int16 public constant xHigh = 96;\n    int16 public constant yHigh = 99;\n\n    enum Stage {\n        Default,\n        Inactive,\n        PrivateSale,\n        PublicSale\n    }\n\n    struct Bid {\n        uint256 amount;\n        address bidder;\n    }\n\n    LandAuction public auctionV1;\n    ILandRegistry public landRegistry;\n    ILockLeash public lockLeash;\n    ILockShiboshi public lockShiboshi;\n    bool public multiMintEnabled;\n\n    address public signerAddress;\n    Stage public currentStage;\n\n    mapping(int16 => mapping(int16 => Bid)) public getCurrentBid;\n    mapping(address => uint256) private _winningsBidsOf;\n\n    mapping(address => uint32[]) private _mintedBy;\n    mapping(address => uint32[]) private _allBidsOf;\n    mapping(address => mapping(uint32 => uint8)) private _statusOfBidsOf;\n\n    event StageSet(uint256 stage);\n    event SignerSet(address signer);\n    event multiMintToggled(bool newValue);\n    event LandBought(\n        address indexed user,\n        uint32 indexed encXY,\n        int16 x,\n        int16 y,\n        uint256 price,\n        uint256 time,\n        Stage saleStage\n    );\n\n    constructor(\n        LandAuction _auctionV1,\n        ILandRegistry _landRegistry,\n        ILockLeash _lockLeash,\n        ILockShiboshi _lockShiboshi\n    ) {\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n\n        auctionV1 = _auctionV1;\n        landRegistry = _landRegistry;\n        lockLeash = _lockLeash;\n        lockShiboshi = _lockShiboshi;\n\n        signerAddress = msg.sender;\n    }\n\n    modifier onlyValid(int16 x, int16 y) {\n        require(xLow <= x && x <= xHigh, \"ERR_X_OUT_OF_RANGE\");\n        require(yLow <= y && y <= yHigh, \"ERR_Y_OUT_OF_RANGE\");\n        _;\n    }\n\n    modifier onlyStage(Stage s) {\n        require(currentStage == s, \"ERR_THIS_STAGE_NOT_LIVE_YET\");\n        _;\n    }\n\n    function weightToCapacity(uint256 weightLeash, uint256 weightShiboshi)\n        public\n        pure\n        returns (uint256)\n    {\n        uint256[10] memory QRangeLeash = [\n            uint256(9),\n            uint256(30),\n            uint256(60),\n            uint256(100),\n            uint256(130),\n            uint256(180),\n            uint256(220),\n            uint256(300),\n            uint256(370),\n            uint256(419)\n        ];\n        uint256[10] memory QRangeShiboshi = [\n            uint256(45),\n            uint256(89),\n            uint256(150),\n            uint256(250),\n            uint256(350),\n            uint256(480),\n            uint256(600),\n            uint256(700),\n            uint256(800),\n            uint256(850)\n        ];\n        uint256[10] memory buckets = [\n            uint256(1),\n            uint256(5),\n            uint256(10),\n            uint256(20),\n            uint256(50),\n            uint256(80),\n            uint256(100),\n            uint256(140),\n            uint256(180),\n            uint256(200)\n        ];\n        uint256 capacity;\n\n        if (weightLeash > 0) {\n            for (uint256 i = 9; i >= 0; i = _uncheckedDec(i)) {\n                if (weightLeash > QRangeLeash[i] * 1e18) {\n                    capacity += buckets[i];\n                    break;\n                }\n            }\n        }\n\n        if (weightShiboshi > 0) {\n            for (uint256 i = 9; i >= 0; i = _uncheckedDec(i)) {\n                if (weightShiboshi > QRangeShiboshi[i]) {\n                    capacity += buckets[i];\n                    break;\n                }\n            }\n        }\n\n        return capacity;\n    }\n\n    function getOutbidPrice(uint256 bidPrice) public pure returns (uint256) {\n        // 5% more than the current price\n        return (bidPrice * 21) / 20;\n    }\n\n    function winningsBidsOf(address user) public view returns (uint256) {\n        return _winningsBidsOf[user] + auctionV1.winningsBidsOf(user);\n    }\n\n    function availableCapacityOf(address user) public view returns (uint256) {\n        uint256 weightLeash = lockLeash.weightOf(user);\n        uint256 weightShiboshi = lockShiboshi.weightOf(user);\n\n        return\n            weightToCapacity(weightLeash, weightShiboshi) -\n            winningsBidsOf(user);\n    }\n\n    function getReservePrice(int16 x, int16 y) public view returns (uint256) {\n        return auctionV1.getReservePrice(x, y);\n    }\n\n    function getPriceOf(int16 x, int16 y) public view returns (uint256) {\n        Bid storage currentBid = getCurrentBid[x][y];\n        if (currentBid.amount == 0) {\n            // no bids on this contract\n            return auctionV1.getPriceOf(x, y);\n        } else {\n            // attempt to outbid a bid placed here\n            return getOutbidPrice(currentBid.amount);\n        }\n    }\n\n    function priceOfCategory(int8 category) external view returns (uint256) {\n        return auctionV1.priceOfCategory(category);\n    }\n\n    function getCategory(int16 x, int16 y) public view returns (int8) {\n        return auctionV1.getCategory(x, y);\n    }\n\n    function isShiboshiZone(int16 x, int16 y) public pure returns (bool) {\n        /*\n            (12,99) to (48, 65)\n            (49, 99) to (77, 78)\n            (76, 77) to (77, 50)\n            (65, 50) to (75, 50)\n        */\n\n        if (x >= 12 && x <= 48 && y <= 99 && y >= 65) {\n            return true;\n        }\n        if (x >= 49 && x <= 77 && y <= 99 && y >= 78) {\n            return true;\n        }\n        if (x >= 76 && x <= 77 && y <= 77 && y >= 50) {\n            return true;\n        }\n        if (x >= 65 && x <= 75 && y == 50) {\n            return true;\n        }\n        return false;\n    }\n\n    // List of currently winning bids of this user\n    function bidInfoOf(address user)\n        external\n        view\n        returns (int16[] memory, int16[] memory)\n    {\n        (int16[] memory xsV1, int16[] memory ysV1) = auctionV1.bidInfoOf(user);\n        uint256 lengthV1 = xsV1.length;\n\n        uint256 bidCount = _winningsBidsOf[user];\n        int16[] memory xs = new int16[](bidCount + lengthV1);\n        int16[] memory ys = new int16[](bidCount + lengthV1);\n\n        for (uint256 i = 0; i < lengthV1; i = _uncheckedInc(i)) {\n            xs[i] = xsV1[i];\n            ys[i] = ysV1[i];\n        }\n\n        uint256 ptr = lengthV1;\n        uint32[] storage allBids = _allBidsOf[user];\n        uint256 length = allBids.length;\n\n        for (uint256 i = 0; i < length; i = _uncheckedInc(i)) {\n            if (_statusOfBidsOf[user][allBids[i]] == 1) {\n                (int16 x, int16 y) = _decodeXY(allBids[i]);\n                xs[ptr] = x;\n                ys[ptr] = y;\n                ptr = _uncheckedInc(ptr);\n            }\n        }\n\n        return (xs, ys);\n    }\n\n    // List of all bids, ever done by this user\n    function allBidInfoOf(address user)\n        external\n        view\n        returns (int16[] memory, int16[] memory)\n    {\n        (int16[] memory xsV1, int16[] memory ysV1) = auctionV1.allBidInfoOf(\n            user\n        );\n        uint256 lengthV1 = xsV1.length;\n\n        uint32[] storage allBids = _allBidsOf[user];\n        uint256 bidCount = allBids.length;\n        int16[] memory xs = new int16[](bidCount + lengthV1);\n        int16[] memory ys = new int16[](bidCount + lengthV1);\n\n        for (uint256 i = 0; i < lengthV1; i = _uncheckedInc(i)) {\n            xs[i] = xsV1[i];\n            ys[i] = ysV1[i];\n        }\n\n        for (\n            uint256 i = lengthV1;\n            i < lengthV1 + bidCount;\n            i = _uncheckedInc(i)\n        ) {\n            (int16 x, int16 y) = _decodeXY(allBids[i - lengthV1]);\n            xs[i] = x;\n            ys[i] = y;\n        }\n\n        return (xs, ys);\n    }\n\n    function mintedBy(address user) external\n        view\n        returns (int16[] memory, int16[] memory) {\n\n            uint32[] storage allMints = _mintedBy[user];\n            uint256 mintCount = allMints.length;\n            int16[] memory xs = new int16[](mintCount);\n            int16[] memory ys = new int16[](mintCount);\n\n            for (uint256 i = 0; i < mintCount; i = _uncheckedInc(i)) {\n                (int16 x, int16 y) = _decodeXY(allMints[i]);\n                xs[i] = x;\n                ys[i] = y;\n            }\n\n            return (xs, ys);\n        }\n\n\n    function setStage(uint256 stage) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        if (stage >= 2) {\n            require(\n                uint256(auctionV1.currentStage()) == 0,\n                \"ERR_AUCTION_V1_IS_NOT_DISABLED\"\n            );\n        }\n        currentStage = Stage(stage);\n        emit StageSet(stage);\n    }\n\n    function setSignerAddress(address signer)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        require(signer != address(0), \"ERR_CANNOT_BE_ZERO_ADDRESS\");\n        signerAddress = signer;\n        emit SignerSet(signer);\n    }\n\n    function setLandRegistry(address _landRegistry)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        landRegistry = ILandRegistry(_landRegistry);\n    }\n\n    function setLockLeash(address _lockLeash)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        lockLeash = ILockLeash(_lockLeash);\n    }\n\n    function setLockShiboshi(address _lockShiboshi)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        lockShiboshi = ILockShiboshi(_lockShiboshi);\n    }\n\n    function setAuctionV1(LandAuction _auctionV1)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        auctionV1 = _auctionV1;\n    }\n\n    function setMultiMint(bool desiredValue)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        require(multiMintEnabled != desiredValue, \"ERR_ALREADY_DESIRED_VALUE\");\n        multiMintEnabled = desiredValue;\n\n        emit multiMintToggled(desiredValue);\n    }\n\n    function withdraw(address to, uint256 amount)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        payable(to).transfer(amount);\n    }\n\n    function mintWinningBid(int16[] calldata xs, int16[] calldata ys) external {\n        require(\n            currentStage == Stage.PublicSale ||\n                currentStage == Stage.PrivateSale,\n            \"ERR_MUST_WAIT_FOR_BIDDING_TO_END\"\n        );\n\n        uint256 length = xs.length;\n        require(length == ys.length, \"ERR_INPUT_LENGTH_MISMATCH\");\n\n        for (uint256 i = 0; i < length; i = _uncheckedInc(i)) {\n            int16 x = xs[i];\n            int16 y = ys[i];\n            require(xLow <= x && x <= xHigh, \"ERR_X_OUT_OF_RANGE\");\n            require(yLow <= y && y <= yHigh, \"ERR_Y_OUT_OF_RANGE\");\n\n            (, address user) = auctionV1.getCurrentBid(x, y);\n            require(user != address(0), \"ERR_NO_BID_FOUND\");\n            landRegistry.mint(user, x, y);\n            _mintedBy[user].push(_encodeXY(x, y));\n        }\n    }\n\n    function mintPrivate(int16 x, int16 y)\n        external\n        payable\n        onlyStage(Stage.PrivateSale)\n        nonReentrant\n    {\n        require(availableCapacityOf(msg.sender) != 0, \"ERR_NO_BIDS_REMAINING\");\n        require(!isShiboshiZone(x, y), \"ERR_NO_MINT_IN_SHIBOSHI_ZONE\");\n        _mintPublicOrPrivate(msg.sender, x, y, msg.value);\n        emit LandBought(\n            msg.sender,\n            _encodeXY(x, y),\n            x,\n            y,\n            msg.value,\n            block.timestamp,\n            Stage.PrivateSale\n        );\n    }\n\n    function mintPrivateMulti(\n        int16[] calldata xs,\n        int16[] calldata ys,\n        uint256[] calldata prices\n    ) external payable onlyStage(Stage.PrivateSale) nonReentrant {\n        require(multiMintEnabled, \"ERR_MULTI_BID_DISABLED\");\n\n        uint256 length = xs.length;\n        require(length != 0, \"ERR_NO_INPUT\");\n        require(length == ys.length, \"ERR_INPUT_LENGTH_MISMATCH\");\n        require(length == prices.length, \"ERR_INPUT_LENGTH_MISMATCH\");\n\n        address user = msg.sender;\n        require(\n            availableCapacityOf(user) >= length,\n            \"ERR_INSUFFICIENT_BIDS_REMAINING\"\n        );\n\n        uint256 total;\n        for (uint256 i = 0; i < length; i = _uncheckedInc(i)) {\n            total += prices[i];\n        }\n        require(msg.value == total, \"ERR_INSUFFICIENT_AMOUNT_SENT\");\n\n        for (uint256 i = 0; i < length; i = _uncheckedInc(i)) {\n            int16 x = xs[i];\n            int16 y = ys[i];\n            require(!isShiboshiZone(x, y), \"ERR_NO_MINT_IN_SHIBOSHI_ZONE\");\n            _mintPublicOrPrivate(user, x, y, prices[i]);\n            emit LandBought(\n                user,\n                _encodeXY(x, y),\n                x,\n                y,\n                prices[i],\n                block.timestamp,\n                Stage.PrivateSale\n            );\n        }\n    }\n\n    function mintPrivateShiboshiZone(\n        int16 x,\n        int16 y,\n        bytes calldata signature\n    ) external payable onlyStage(Stage.PrivateSale) nonReentrant {\n        require(\n            _verifySigner(_hashMessage(msg.sender), signature),\n            \"ERR_SIGNATURE_INVALID\"\n        );\n        require(isShiboshiZone(x, y), \"ERR_NOT_IN_SHIBOSHI_ZONE\");\n        _mintPublicOrPrivate(msg.sender, x, y, msg.value);\n        emit LandBought(\n            msg.sender,\n            _encodeXY(x, y),\n            x,\n            y,\n            msg.value,\n            block.timestamp,\n            Stage.PrivateSale\n        );\n    }\n\n    function mintPrivateShiboshiZoneMulti(\n        int16[] calldata xs,\n        int16[] calldata ys,\n        uint256[] calldata prices,\n        bytes calldata signature\n    ) external payable onlyStage(Stage.PrivateSale) nonReentrant {\n        require(multiMintEnabled, \"ERR_MULTI_BID_DISABLED\");\n\n        address user = msg.sender;\n        require(\n            _verifySigner(_hashMessage(user), signature),\n            \"ERR_SIGNATURE_INVALID\"\n        );\n\n        uint256 length = xs.length;\n        require(length != 0, \"ERR_NO_INPUT\");\n        require(length == ys.length, \"ERR_INPUT_LENGTH_MISMATCH\");\n        require(length == prices.length, \"ERR_INPUT_LENGTH_MISMATCH\");\n\n        uint256 total;\n        for (uint256 i = 0; i < length; i = _uncheckedInc(i)) {\n            total += prices[i];\n        }\n        require(msg.value == total, \"ERR_INSUFFICIENT_AMOUNT_SENT\");\n\n        for (uint256 i = 0; i < length; i = _uncheckedInc(i)) {\n            int16 x = xs[i];\n            int16 y = ys[i];\n            require(isShiboshiZone(x, y), \"ERR_NOT_IN_SHIBOSHI_ZONE\");\n            _mintPublicOrPrivate(user, x, y, prices[i]);\n            emit LandBought(\n                user,\n                _encodeXY(x, y),\n                x,\n                y,\n                prices[i],\n                block.timestamp,\n                Stage.PrivateSale\n            );\n        }\n    }\n\n    function mintPublic(int16 x, int16 y)\n        external\n        payable\n        onlyStage(Stage.PublicSale)\n        nonReentrant\n    {\n        _mintPublicOrPrivate(msg.sender, x, y, msg.value);\n        emit LandBought(\n            msg.sender,\n            _encodeXY(x, y),\n            x,\n            y,\n            msg.value,\n            block.timestamp,\n            Stage.PublicSale\n        );\n    }\n\n    function mintPublicMulti(\n        int16[] calldata xs,\n        int16[] calldata ys,\n        uint256[] calldata prices\n    ) external payable onlyStage(Stage.PublicSale) nonReentrant {\n        require(multiMintEnabled, \"ERR_MULTI_BID_DISABLED\");\n\n        uint256 length = xs.length;\n        require(length != 0, \"ERR_NO_INPUT\");\n        require(length == ys.length, \"ERR_INPUT_LENGTH_MISMATCH\");\n        require(length == prices.length, \"ERR_INPUT_LENGTH_MISMATCH\");\n\n        uint256 total;\n        for (uint256 i = 0; i < length; i = _uncheckedInc(i)) {\n            total += prices[i];\n        }\n        require(msg.value == total, \"ERR_INSUFFICIENT_AMOUNT_SENT\");\n\n        address user = msg.sender;\n        for (uint256 i = 0; i < length; i = _uncheckedInc(i)) {\n            int16 x = xs[i];\n            int16 y = ys[i];\n            _mintPublicOrPrivate(user, x, y, prices[i]);\n            emit LandBought(\n                user,\n                _encodeXY(x, y),\n                x,\n                y,\n                prices[i],\n                block.timestamp,\n                Stage.PublicSale\n            );\n        }\n    }\n\n    // transform: +97, +100\n    function _transformXY(int16 x, int16 y)\n        internal\n        pure\n        onlyValid(x, y)\n        returns (uint16, uint16)\n    {\n        return (uint16(x + 97), uint16(100 - y));\n    }\n\n    function _mintPublicOrPrivate(\n        address user,\n        int16 x,\n        int16 y,\n        uint256 price\n    ) internal onlyValid(x, y) {\n        Bid storage currentBid = getCurrentBid[x][y];\n        require(currentBid.amount == 0, \"ERR_NOT_UP_FOR_SALE\");\n        require(price == getReservePrice(x, y), \"ERR_INSUFFICIENT_AMOUNT_SENT\");\n\n        currentBid.bidder = user;\n        currentBid.amount = price;\n        _winningsBidsOf[user] += 1;\n\n        uint32 encXY = _encodeXY(x, y);\n        _allBidsOf[user].push(encXY);\n        _statusOfBidsOf[user][encXY] = 1;\n\n        landRegistry.mint(user, x, y);\n    }\n\n    function _hashMessage(address sender) private pure returns (bytes32) {\n        return keccak256(abi.encodePacked(sender));\n    }\n\n    function _verifySigner(bytes32 messageHash, bytes memory signature)\n        private\n        view\n        returns (bool)\n    {\n        return\n            signerAddress ==\n            messageHash.toEthSignedMessageHash().recover(signature);\n    }\n\n    function _uncheckedInc(uint256 i) internal pure returns (uint256) {\n        unchecked {\n            return i + 1;\n        }\n    }\n\n    function _uncheckedDec(uint256 i) internal pure returns (uint256) {\n        unchecked {\n            return i - 1;\n        }\n    }\n\n    function _encodeXY(int16 x, int16 y) internal pure returns (uint32) {\n        return\n            ((uint32(uint16(x)) * factor) & clearLow) |\n            (uint32(uint16(y)) & clearHigh);\n    }\n\n    function _decodeXY(uint32 value) internal pure returns (int16 x, int16 y) {\n        x = _expandNegative16BitCast((value & clearLow) >> 16);\n        y = _expandNegative16BitCast(value & clearHigh);\n    }\n\n    function _expandNegative16BitCast(uint32 value)\n        internal\n        pure\n        returns (int16)\n    {\n        if (value & (1 << 15) != 0) {\n            return int16(int32(value | clearLow));\n        }\n        return int16(int32(value));\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "contracts/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.13;\n\ninterface IWETH {\n    function deposit() external payable;\n\n    function withdraw(uint256 wad) external;\n\n    function transfer(address to, uint256 value) external returns (bool);\n}\n"
    },
    "contracts/interfaces/ILockShiboshi.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\ninterface ILockShiboshi {\n    function lockInfoOf(address user)\n        external\n        view\n        returns (\n            uint256[] memory ids,\n            uint256 startTime,\n            uint256 numDays,\n            address ogUser\n        );\n\n    function weightOf(address user) external view returns (uint256);\n\n    function extraShiboshiNeeded(address user, uint256 targetWeight)\n        external\n        view\n        returns (uint256);\n\n    function extraDaysNeeded(address user, uint256 targetWeight)\n        external\n        view\n        returns (uint256);\n\n    function isWinner(address user) external view returns (bool);\n\n    function unlockAt(address user) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/ILockLeash.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\ninterface ILockLeash {\n    function lockInfoOf(address user)\n        external\n        view\n        returns (\n            uint256 amount,\n            uint256 startTime,\n            uint256 numDays,\n            address ogUser\n        );\n\n    function weightOf(address user) external view returns (uint256);\n\n    function extraLeashNeeded(address user, uint256 targetWeight)\n        external\n        view\n        returns (uint256);\n\n    function extraDaysNeeded(address user, uint256 targetWeight)\n        external\n        view\n        returns (uint256);\n\n    function isWinner(address user) external view returns (bool);\n\n    function unlockAt(address user) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/ILandRegistry.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\ninterface ILandRegistry {\n    function mint(\n        address user,\n        int16 x,\n        int16 y\n    ) external;\n}\n"
    },
    "contracts/interfaces/ILandAuction.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\ninterface ILandAuction {\n    function winningsBidsOf(address user) external view returns (uint256);\n}\n"
    },
    "contracts/LandAuction.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\nimport \"./interfaces/IWETH.sol\";\nimport \"./interfaces/ILockShiboshi.sol\";\nimport \"./interfaces/ILockLeash.sol\";\nimport \"./interfaces/ILandRegistry.sol\";\nimport \"./interfaces/ILandAuction.sol\";\n\ncontract LandAuction is ILandAuction, AccessControl, ReentrancyGuard {\n    using ECDSA for bytes32;\n\n    bytes32 public constant GRID_SETTER_ROLE = keccak256(\"GRID_SETTER_ROLE\");\n\n    uint32 constant clearLow = 0xffff0000;\n    uint32 constant clearHigh = 0x0000ffff;\n    uint32 constant factor = 0x10000;\n\n    uint16 public constant N = 194; // xHigh + 97 + 1\n    uint16 public constant M = 200; // yHigh + 100 + 1\n\n    /*\n        xLow, yHigh gets mapped to 1,1\n        transform: x + 97, 100 - y\n\n        y_mapped = 100 - y\n        x_mapped = 97 + x\n    */\n\n    int16 public constant xLow = -96;\n    int16 public constant yLow = -99;\n    int16 public constant xHigh = 96;\n    int16 public constant yHigh = 99;\n\n    enum Stage {\n        Default,\n        Bidding,\n        PrivateSale,\n        PublicSale\n    }\n\n    struct Bid {\n        uint256 amount;\n        address bidder;\n    }\n\n    address public immutable weth;\n    ILandRegistry public landRegistry;\n    ILockLeash public lockLeash;\n    ILockShiboshi public lockShiboshi;\n    bool public multiBidEnabled;\n\n    address public signerAddress;\n    Stage public currentStage;\n\n    int8[N + 10][M + 10] private _categoryBIT;\n\n    mapping(int16 => mapping(int16 => Bid)) public getCurrentBid;\n    mapping(int8 => uint256) public priceOfCategory;\n    mapping(address => uint256) public winningsBidsOf;\n\n    mapping(address => uint32[]) private _allBidsOf;\n    mapping(address => mapping(uint32 => uint8)) private _statusOfBidsOf;\n\n    event CategoryPriceSet(int8 category, uint256 price);\n    event StageSet(uint256 stage);\n    event SignerSet(address signer);\n    event multiBidToggled(bool newValue);\n    event BidCreated(\n        address indexed user,\n        uint32 indexed encXY,\n        int16 x,\n        int16 y,\n        uint256 price,\n        uint256 time\n    );\n    event LandBought(\n        address indexed user,\n        uint32 indexed encXY,\n        int16 x,\n        int16 y,\n        uint256 price,\n        Stage saleStage\n    );\n\n    constructor(\n        address _weth,\n        ILandRegistry _landRegistry,\n        ILockLeash _lockLeash,\n        ILockShiboshi _lockShiboshi\n    ) {\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _grantRole(GRID_SETTER_ROLE, msg.sender);\n\n        weth = _weth;\n        landRegistry = _landRegistry;\n        lockLeash = _lockLeash;\n        lockShiboshi = _lockShiboshi;\n\n        signerAddress = msg.sender;\n    }\n\n    modifier onlyValid(int16 x, int16 y) {\n        require(xLow <= x && x <= xHigh, \"ERR_X_OUT_OF_RANGE\");\n        require(yLow <= y && y <= yHigh, \"ERR_Y_OUT_OF_RANGE\");\n        _;\n    }\n\n    modifier onlyStage(Stage s) {\n        require(currentStage == s, \"ERR_THIS_STAGE_NOT_LIVE_YET\");\n        _;\n    }\n\n    function weightToCapacity(uint256 weightLeash, uint256 weightShiboshi)\n        public\n        pure\n        returns (uint256)\n    {\n        uint256[10] memory QRangeLeash = [\n            uint256(9),\n            uint256(30),\n            uint256(60),\n            uint256(100),\n            uint256(130),\n            uint256(180),\n            uint256(220),\n            uint256(300),\n            uint256(370),\n            uint256(419)\n        ];\n        uint256[10] memory QRangeShiboshi = [\n            uint256(45),\n            uint256(89),\n            uint256(150),\n            uint256(250),\n            uint256(350),\n            uint256(480),\n            uint256(600),\n            uint256(700),\n            uint256(800),\n            uint256(850)\n        ];\n        uint256[10] memory buckets = [\n            uint256(1),\n            uint256(5),\n            uint256(10),\n            uint256(20),\n            uint256(50),\n            uint256(80),\n            uint256(100),\n            uint256(140),\n            uint256(180),\n            uint256(200)\n        ];\n        uint256 capacity;\n\n        if (weightLeash > 0) {\n            for (uint256 i = 9; i >= 0; i = _uncheckedDec(i)) {\n                if (weightLeash > QRangeLeash[i] * 1e18) {\n                    capacity += buckets[i];\n                    break;\n                }\n            }\n        }\n\n        if (weightShiboshi > 0) {\n            for (uint256 i = 9; i >= 0; i = _uncheckedDec(i)) {\n                if (weightShiboshi > QRangeShiboshi[i]) {\n                    capacity += buckets[i];\n                    break;\n                }\n            }\n        }\n\n        return capacity;\n    }\n\n    function getOutbidPrice(uint256 bidPrice) public pure returns (uint256) {\n        // 5% more than the current price\n        return (bidPrice * 21) / 20;\n    }\n\n    function availableCapacityOf(address user) public view returns (uint256) {\n        uint256 weightLeash = lockLeash.weightOf(user);\n        uint256 weightShiboshi = lockShiboshi.weightOf(user);\n\n        return\n            weightToCapacity(weightLeash, weightShiboshi) -\n            winningsBidsOf[user];\n    }\n\n    function getReservePrice(int16 x, int16 y) public view returns (uint256) {\n        uint256 price = priceOfCategory[getCategory(x, y)];\n        require(price != 0, \"ERR_NOT_UP_FOR_SALE\");\n        return price;\n    }\n\n    function getPriceOf(int16 x, int16 y) public view returns (uint256) {\n        Bid storage currentBid = getCurrentBid[x][y];\n        if (currentBid.amount == 0) {\n            return getReservePrice(x, y);\n        } else {\n            // attempt to outbid\n            return getOutbidPrice(currentBid.amount);\n        }\n    }\n\n    function getCategory(int16 x, int16 y) public view returns (int8) {\n        (uint16 x_mapped, uint16 y_mapped) = _transformXY(x, y);\n\n        int8 category;\n        for (uint16 i = x_mapped; i > 0; i = _subLowbit(i)) {\n            for (uint16 j = y_mapped; j > 0; j = _subLowbit(j)) {\n                unchecked {\n                    category += _categoryBIT[i][j];\n                }\n            }\n        }\n        return category;\n    }\n\n    function isShiboshiZone(int16 x, int16 y) public pure returns (bool) {\n        /*\n            (12,99) to (48, 65)\n            (49, 99) to (77, 78)\n            (76, 77) to (77, 50)\n            (65, 50) to (75, 50)\n        */\n\n        if (x >= 12 && x <= 48 && y <= 99 && y >= 65) {\n            return true;\n        }\n        if (x >= 49 && x <= 77 && y <= 99 && y >= 78) {\n            return true;\n        }\n        if (x >= 76 && x <= 77 && y <= 77 && y >= 50) {\n            return true;\n        }\n        if (x >= 65 && x <= 75 && y == 50) {\n            return true;\n        }\n        return false;\n    }\n\n    // List of currently winning bids of this user\n    function bidInfoOf(address user)\n        external\n        view\n        returns (int16[] memory, int16[] memory)\n    {\n        uint256 bidCount = winningsBidsOf[user];\n        int16[] memory xs = new int16[](bidCount);\n        int16[] memory ys = new int16[](bidCount);\n\n        uint256 ptr;\n        uint32[] storage allBids = _allBidsOf[user];\n        uint256 length = allBids.length;\n\n        for (uint256 i = 0; i < length; i = _uncheckedInc(i)) {\n            if (_statusOfBidsOf[user][allBids[i]] == 1) {\n                (int16 x, int16 y) = _decodeXY(allBids[i]);\n                xs[ptr] = x;\n                ys[ptr] = y;\n                ptr = _uncheckedInc(ptr);\n            }\n        }\n\n        return (xs, ys);\n    }\n\n    // List of all bids, ever done by this user\n    function allBidInfoOf(address user)\n        external\n        view\n        returns (int16[] memory, int16[] memory)\n    {\n        uint32[] storage allBids = _allBidsOf[user];\n        uint256 bidCount = allBids.length;\n        int16[] memory xs = new int16[](bidCount);\n        int16[] memory ys = new int16[](bidCount);\n\n        for (uint256 i = 0; i < bidCount; i = _uncheckedInc(i)) {\n            (int16 x, int16 y) = _decodeXY(allBids[i]);\n            xs[i] = x;\n            ys[i] = y;\n        }\n\n        return (xs, ys);\n    }\n\n    function setGridVal(\n        int16 x1,\n        int16 y1,\n        int16 x2,\n        int16 y2,\n        int8 val\n    ) external onlyRole(GRID_SETTER_ROLE) {\n        (uint16 x1_mapped, uint16 y1_mapped) = _transformXY(x1, y1);\n        (uint16 x2_mapped, uint16 y2_mapped) = _transformXY(x2, y2);\n\n        _updateGrid(x2_mapped + 1, y2_mapped + 1, val);\n        _updateGrid(x1_mapped, y1_mapped, val);\n        _updateGrid(x1_mapped, y2_mapped + 1, -val);\n        _updateGrid(x2_mapped + 1, y1_mapped, -val);\n    }\n\n    function setPriceOfCategory(int8 category, uint256 price)\n        external\n        onlyRole(GRID_SETTER_ROLE)\n    {\n        priceOfCategory[category] = price;\n\n        emit CategoryPriceSet(category, price);\n    }\n\n    function setStage(uint256 stage) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        currentStage = Stage(stage);\n        emit StageSet(stage);\n    }\n\n    function setSignerAddress(address signer)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        require(signer != address(0), \"ERR_CANNOT_BE_ZERO_ADDRESS\");\n        signerAddress = signer;\n        emit SignerSet(signer);\n    }\n\n    function setLandRegistry(address _landRegistry)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        landRegistry = ILandRegistry(_landRegistry);\n    }\n\n    function setLockLeash(address _lockLeash)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        lockLeash = ILockLeash(_lockLeash);\n    }\n\n    function setLockShiboshi(address _lockShiboshi)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        lockShiboshi = ILockShiboshi(_lockShiboshi);\n    }\n\n    function setMultiBid(bool desiredValue)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        require(multiBidEnabled != desiredValue, \"ERR_ALREADY_DESIRED_VALUE\");\n        multiBidEnabled = desiredValue;\n\n        emit multiBidToggled(desiredValue);\n    }\n\n    function withdraw(address to, uint256 amount)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        payable(to).transfer(amount);\n    }\n\n    function bidOne(int16 x, int16 y)\n        external\n        payable\n        onlyStage(Stage.Bidding)\n        nonReentrant\n    {\n        address user = msg.sender;\n        require(availableCapacityOf(user) != 0, \"ERR_NO_BIDS_REMAINING\");\n        require(!isShiboshiZone(x, y), \"ERR_NO_MINT_IN_SHIBOSHI_ZONE\");\n        _bid(user, x, y, msg.value);\n    }\n\n    function bidShiboshiZoneOne(\n        int16 x,\n        int16 y,\n        bytes calldata signature\n    ) external payable onlyStage(Stage.Bidding) nonReentrant {\n        address user = msg.sender;\n        require(\n            _verifySigner(_hashMessage(user), signature),\n            \"ERR_SIGNATURE_INVALID\"\n        );\n        require(isShiboshiZone(x, y), \"ERR_NOT_IN_SHIBOSHI_ZONE\");\n        _bid(user, x, y, msg.value);\n    }\n\n    function bidMulti(\n        int16[] calldata xs,\n        int16[] calldata ys,\n        uint256[] calldata prices\n    ) external payable onlyStage(Stage.Bidding) nonReentrant {\n        require(multiBidEnabled, \"ERR_MULTI_BID_DISABLED\");\n\n        address user = msg.sender;\n\n        uint256 length = xs.length;\n        require(length != 0, \"ERR_NO_INPUT\");\n        require(length == ys.length, \"ERR_INPUT_LENGTH_MISMATCH\");\n        require(length == prices.length, \"ERR_INPUT_LENGTH_MISMATCH\");\n\n        uint256 total;\n        require(\n            availableCapacityOf(user) >= length,\n            \"ERR_INSUFFICIENT_BIDS_REMAINING\"\n        );\n\n        for (uint256 i = 0; i < length; i = _uncheckedInc(i)) {\n            total += prices[i];\n        }\n        require(msg.value == total, \"ERR_INSUFFICIENT_AMOUNT_SENT\");\n\n        for (uint256 i = 0; i < length; i = _uncheckedInc(i)) {\n            int16 x = xs[i];\n            int16 y = ys[i];\n            require(!isShiboshiZone(x, y), \"ERR_NO_MINT_IN_SHIBOSHI_ZONE\");\n            _bid(user, x, y, prices[i]);\n        }\n    }\n\n    function bidShiboshiZoneMulti(\n        int16[] calldata xs,\n        int16[] calldata ys,\n        uint256[] calldata prices,\n        bytes calldata signature\n    ) external payable onlyStage(Stage.Bidding) nonReentrant {\n        require(multiBidEnabled, \"ERR_MULTI_BID_DISABLED\");\n\n        address user = msg.sender;\n        require(\n            _verifySigner(_hashMessage(user), signature),\n            \"ERR_SIGNATURE_INVALID\"\n        );\n\n        uint256 length = xs.length;\n        require(length != 0, \"ERR_NO_INPUT\");\n        require(length == ys.length, \"ERR_INPUT_LENGTH_MISMATCH\");\n        require(length == prices.length, \"ERR_INPUT_LENGTH_MISMATCH\");\n\n        uint256 total;\n        for (uint256 i = 0; i < length; i = _uncheckedInc(i)) {\n            total += prices[i];\n        }\n        require(msg.value == total, \"ERR_INSUFFICIENT_AMOUNT_SENT\");\n\n        for (uint256 i = 0; i < length; i = _uncheckedInc(i)) {\n            int16 x = xs[i];\n            int16 y = ys[i];\n            require(isShiboshiZone(x, y), \"ERR_NOT_IN_SHIBOSHI_ZONE\");\n            _bid(user, x, y, prices[i]);\n        }\n    }\n\n    function mintWinningBid(int16[] calldata xs, int16[] calldata ys) external {\n        require(\n            currentStage == Stage.PublicSale ||\n                currentStage == Stage.PrivateSale,\n            \"ERR_MUST_WAIT_FOR_BIDDING_TO_END\"\n        );\n\n        uint256 length = xs.length;\n        require(length == ys.length, \"ERR_INPUT_LENGTH_MISMATCH\");\n\n        for (uint256 i = 0; i < length; i = _uncheckedInc(i)) {\n            int16 x = xs[i];\n            int16 y = ys[i];\n            require(xLow <= x && x <= xHigh, \"ERR_X_OUT_OF_RANGE\");\n            require(yLow <= y && y <= yHigh, \"ERR_Y_OUT_OF_RANGE\");\n\n            address user = getCurrentBid[x][y].bidder;\n            require(user != address(0), \"ERR_NO_BID_FOUND\");\n            landRegistry.mint(user, x, y);\n        }\n    }\n\n    function mintPrivate(int16 x, int16 y)\n        external\n        payable\n        onlyStage(Stage.PrivateSale)\n        nonReentrant\n    {\n        require(availableCapacityOf(msg.sender) != 0, \"ERR_NO_BIDS_REMAINING\");\n        require(!isShiboshiZone(x, y), \"ERR_NO_MINT_IN_SHIBOSHI_ZONE\");\n        _mintPublicOrPrivate(msg.sender, x, y);\n        emit LandBought(\n            msg.sender,\n            _encodeXY(x, y),\n            x,\n            y,\n            msg.value,\n            Stage.PrivateSale\n        );\n    }\n\n    function mintPrivateShiboshiZone(\n        int16 x,\n        int16 y,\n        bytes calldata signature\n    ) external payable onlyStage(Stage.PrivateSale) nonReentrant {\n        require(\n            _verifySigner(_hashMessage(msg.sender), signature),\n            \"ERR_SIGNATURE_INVALID\"\n        );\n        require(isShiboshiZone(x, y), \"ERR_NOT_IN_SHIBOSHI_ZONE\");\n        _mintPublicOrPrivate(msg.sender, x, y);\n        emit LandBought(\n            msg.sender,\n            _encodeXY(x, y),\n            x,\n            y,\n            msg.value,\n            Stage.PrivateSale\n        );\n    }\n\n    function mintPublic(int16 x, int16 y)\n        external\n        payable\n        onlyStage(Stage.PublicSale)\n        nonReentrant\n    {\n        _mintPublicOrPrivate(msg.sender, x, y);\n        emit LandBought(\n            msg.sender,\n            _encodeXY(x, y),\n            x,\n            y,\n            msg.value,\n            Stage.PublicSale\n        );\n    }\n\n    // transform: +97, +100\n    function _transformXY(int16 x, int16 y)\n        internal\n        pure\n        onlyValid(x, y)\n        returns (uint16, uint16)\n    {\n        return (uint16(x + 97), uint16(100 - y));\n    }\n\n    function _bid(\n        address user,\n        int16 x,\n        int16 y,\n        uint256 price\n    ) internal onlyValid(x, y) {\n        uint32 encXY = _encodeXY(x, y);\n        Bid storage currentBid = getCurrentBid[x][y];\n        if (currentBid.amount == 0) {\n            // first bid on this land\n            require(\n                price >= getReservePrice(x, y),\n                \"ERR_INSUFFICIENT_AMOUNT_SENT\"\n            );\n        } else {\n            // attempt to outbid\n            require(user != currentBid.bidder, \"ERR_CANNOT_OUTBID_YOURSELF\");\n            require(\n                price >= getOutbidPrice(currentBid.amount),\n                \"ERR_INSUFFICIENT_AMOUNT_SENT\"\n            );\n            _safeTransferETHWithFallback(currentBid.bidder, currentBid.amount);\n            winningsBidsOf[currentBid.bidder] -= 1;\n            _statusOfBidsOf[currentBid.bidder][encXY] = 2;\n        }\n\n        currentBid.bidder = user;\n        currentBid.amount = price;\n        winningsBidsOf[user] += 1;\n\n        if (_statusOfBidsOf[user][encXY] == 0) {\n            // user has never bid on this land earlier\n            _allBidsOf[user].push(encXY);\n        }\n        _statusOfBidsOf[user][encXY] = 1;\n\n        emit BidCreated(user, encXY, x, y, price, block.timestamp);\n    }\n\n    function _mintPublicOrPrivate(\n        address user,\n        int16 x,\n        int16 y\n    ) internal onlyValid(x, y) {\n        Bid storage currentBid = getCurrentBid[x][y];\n        require(currentBid.amount == 0, \"ERR_NOT_UP_FOR_SALE\");\n        require(\n            msg.value == getReservePrice(x, y),\n            \"ERR_INSUFFICIENT_AMOUNT_SENT\"\n        );\n\n        currentBid.bidder = user;\n        currentBid.amount = msg.value;\n        winningsBidsOf[user] += 1;\n\n        uint32 encXY = _encodeXY(x, y);\n        _allBidsOf[user].push(encXY);\n        _statusOfBidsOf[user][encXY] = 1;\n\n        landRegistry.mint(user, x, y);\n    }\n\n    function _hashMessage(address sender) private pure returns (bytes32) {\n        return keccak256(abi.encodePacked(sender));\n    }\n\n    function _verifySigner(bytes32 messageHash, bytes memory signature)\n        private\n        view\n        returns (bool)\n    {\n        return\n            signerAddress ==\n            messageHash.toEthSignedMessageHash().recover(signature);\n    }\n\n    /**\n     * @notice Transfer ETH. If the ETH transfer fails, wrap the ETH and try send it as WETH.\n     */\n    function _safeTransferETHWithFallback(address to, uint256 amount) internal {\n        if (!_safeTransferETH(to, amount)) {\n            IWETH(weth).deposit{value: amount}();\n            IERC20(weth).transfer(to, amount);\n        }\n    }\n\n    /**\n     * @notice Transfer ETH and return the success status.\n     * @dev This function only forwards 30,000 gas to the callee.\n     */\n    function _safeTransferETH(address to, uint256 value)\n        internal\n        returns (bool)\n    {\n        (bool success, ) = to.call{value: value, gas: 30_000}(new bytes(0));\n        return success;\n    }\n\n    function _uncheckedInc(uint256 i) internal pure returns (uint256) {\n        unchecked {\n            return i + 1;\n        }\n    }\n\n    function _uncheckedDec(uint256 i) internal pure returns (uint256) {\n        unchecked {\n            return i - 1;\n        }\n    }\n\n    function _encodeXY(int16 x, int16 y) internal pure returns (uint32) {\n        return\n            ((uint32(uint16(x)) * factor) & clearLow) |\n            (uint32(uint16(y)) & clearHigh);\n    }\n\n    function _decodeXY(uint32 value) internal pure returns (int16 x, int16 y) {\n        x = _expandNegative16BitCast((value & clearLow) >> 16);\n        y = _expandNegative16BitCast(value & clearHigh);\n    }\n\n    function _expandNegative16BitCast(uint32 value)\n        internal\n        pure\n        returns (int16)\n    {\n        if (value & (1 << 15) != 0) {\n            return int16(int32(value | clearLow));\n        }\n        return int16(int32(value));\n    }\n\n    // Functions for BIT\n\n    function _updateGrid(\n        uint16 x,\n        uint16 y,\n        int8 val\n    ) internal {\n        for (uint16 i = x; i <= N; i = _addLowbit(i)) {\n            for (uint16 j = y; j <= M; j = _addLowbit(j)) {\n                unchecked {\n                    _categoryBIT[i][j] += val;\n                }\n            }\n        }\n    }\n\n    function _addLowbit(uint16 i) internal pure returns (uint16) {\n        unchecked {\n            return i + uint16(int16(i) & (-int16(i)));\n        }\n    }\n\n    function _subLowbit(uint16 i) internal pure returns (uint16) {\n        unchecked {\n            return i - uint16(int16(i) & (-int16(i)));\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}