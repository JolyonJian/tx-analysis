{{
  "language": "Solidity",
  "sources": {
    "contracts/MadMouseTroupe.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM`MMM NMM MMM MMM MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMM  MMMMhMMMMMMM  MMMMMMMM MMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\n// MMMMMMMMMMMMMMMMMMMMMMMMMM  MM-MMMMM   MMMM    MMMM   lMMMDMMMMMMMMMMMMMMMMMMMMMMMMMM\n// MMMMMMMMMMMMMMMMMMMMMMM jMMMMl   MM    MMM  M  MMM   M   MMMM MMMMMMMMMMMMMMMMMMMMMMM\n// MMMMMMMMMMMMMMMMMMMM MMMMMMMMM  , `     M   Y   MM  MMM  BMMMMMM MMMMMMMMMMMMMMMMMMMM\n// MMMMMMMMMMMMMMMMM MMMMMMMMMMMM  IM  MM  l  MMM  X   MM.  MMMMMMMMMM MMMMMMMMMMMMMMMMM\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMM.nlMMMMMMMMMMMMMMMMM]._  MMMMMMMMMMMMMMMNMMMMMMMMMMMMMM\n// MMMMMMMMMMMMMM TMMMMMMMMMMMMMMMMMM          +MMMMMMMMMMMM:  rMMMMMMMMN MMMMMMMMMMMMMM\n// MMMMMMMMMMMM MMMMMMMMMMMMMMMM                  MMMMMM           MMMMMMMM qMMMMMMMMMMM\n// MMMMMMMMMMMMMMMMMMMMMMMMMMM^                   MMMb              .MMMMMMMMMMMMMMMMMMM\n// MMMMMMMMMM MMMMMMMMMMMMMMM                     MM                  MMMMMMM MMMMMMMMMM\n// MMMMMMMMMMMMMMMMMMMMMMMMMM                     M                   gMMMMMMMMMMMMMMMMM\n// MMMMMMMMu MMMMMMMMMMMMMMM                                           MMMMMMM .MMMMMMMM\n// MMMMMMMMMMMMMMMMMMMMMMMMM                                           :MMMMMMMMMMMMMMMM\n// MMMMMMM^ MMMMMMMMMMMMMMMl                                            MMMMMMMM MMMMMMM\n// MMMMMMMMMMMMMMMMMMMMMMMM                                             MMMMMMMMMMMMMMMM\n// MMMMMMM MMMMMMMMMMMMMMMM                                             MMMMMMMM MMMMMMM\n// MMMMMMMMMMMMMMMMMMMMMMMM                                             MMMMMMMMMMMMMMMM\n// MMMMMMr MMMMMMMMMMMMMMMM                                             MMMMMMMM .MMMMMM\n// MMMMMMMMMMMMMMMMMMMMMMMMM                                           MMMMMMMMMMMMMMMMM\n// MMMMMMM MMMMMMMMMMMMMMMMM                                         DMMMMMMMMMM MMMMMMM\n// MMMMMMMMMMMMMMMMMMMMMMMMMM                              MMMMMMMMMMMMMMMMMMMMMMMMMMMMM\n// MMMMMMM|`MMMMMMMMMMMMMMMM         q                      MMMMMMMMMMMMMMMMMMM  MMMMMMM\n// MMMMMMMMMTMMMMMMMMMMMMMMM                               qMMMMMMMMMMMMMMMMMMgMMMMMMMMM\n// MMMMMMMMq MMMMMMMMMMMMMMMh                             jMMMMMMMMMMMMMMMMMMM nMMMMMMMM\n// MMMMMMMMMM MMMMMMMMMMMMMMMQ      nc    -MMMMMn        MMMMMMMMMMMMMMMMMMMM MMMMMMMMMM\n// MMMMMMMMMM.MMMMMMMMMMMMMMMMMMl            M1       `MMMMMMMMMMMMMMMMMMMMMMrMMMMMMMMMM\n// MMMMMMMMMMMM MMMMMMMMMMMMMMMMMMMM               :MMMMMMMMMM MMMMMMMMMMMM qMMMMMMMMMMM\n// MMMMMMMMMMMMMMMMMMMMMMMMMM  MMMMMMX       MMMMMMMMMMMMMMM  uMMMMMMMMMMMMMMMMMMMMMMMMM\n// MMMMMMMMMMMMMM DMMMMMMMMM   IMMMMMMMMMMMMMMMMMMMMMMM   M   Y  MMMMMMMN MMMMMMMMMMMMMM\n// MMMMMMMMMMMMMMMMM MMMMMM    ``    M      MM  MMM   , MMMM    Mv  MMM MMMMMMMMMMMMMMMM\n// MMMMMMMMMMMMMMMMMMM MMh  Ml  .   M  MMMM  I  MMMT  M     :M   ,MMMMMMMMMMMMMMMMMMMMMM\n// MMMMMMMMMMMMMMMMMMMM MMMMMMMMt  MM  MMMMB m  ]MMM  MMMM   MMMMMM MMMMMMMMMMMMMMMMMMMM\n// MMMMMMMMMMMMMMMMMMMMMMM MMMMM  MMM   TM   MM  9U  .MM  _MMMMM MMMMMMMMMMMMMMMMMMMMMMM\n// MMMMMMMMMMMMMMMMMMMMMMMMMM YMMMMMMMn     MMMM    +MMMMMMM1`MMMMMMMMMMMMMMMMMMMMMMMMMM\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM.`MMM MMM MMMMM`.MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\n// MM     M M    M M    M______  ____   ___   __ __  ____   ___  M M     M M    M M   MM\n// MM    M M    M M    M|      ||    \\ /   \\ |  |  ||    \\ /  _]  M M     M M    M M  MM\n// MM   M M    M M    M |      ||  D  )     ||  |  ||  o  )  [_    M M     M M    M M MM\n// MM  M M    M M    M M|_|  |_||    /|  O  ||  |  ||   _/    _]    M M     M M    M MMM\n// MM M M    M M    M M   |  |  |    \\|     ||  :  ||  | |   [_ M    M M     M M    M MM\n// MMM M    M M    M M    |  |  |  .  \\     ||     ||  | |     | M    M M     M M    MMM\n// MM M    M M    M M     |__|  |__|\\_|\\___/  \\__,_||__| |_____|M M    M M     M M    MM\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM author: phaze MMM\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\n\nimport './lib/Ownable.sol';\nimport {VRFBaseMainnet as VRFBase} from './lib/VRFBase.sol';\n\nimport './Gouda.sol';\nimport './MadMouseStaking.sol';\n\nerror PublicSaleNotActive();\nerror WhitelistNotActive();\nerror InvalidAmount();\nerror ExceedsLimit();\nerror SignatureExceedsLimit();\nerror IncorrectValue();\nerror InvalidSignature();\nerror ContractCallNotAllowed();\n\nerror InvalidString();\nerror MaxLevelReached();\nerror MaxNumberReached();\nerror MinHoldDurationRequired();\n\nerror IncorrectHash();\nerror CollectionAlreadyRevealed();\nerror CollectionNotRevealed();\nerror TokenDataAlreadySet();\nerror MintAndStakeMinHoldDurationNotReached();\n\ninterface IMadMouseMetadata {\n    function buildMouseMetadata(uint256 tokenId, uint256 level) external view returns (string memory);\n}\n\ncontract MadMouseTroupe is Ownable, MadMouseStaking, VRFBase {\n    using ECDSA for bytes32;\n    using UserDataOps for uint256;\n    using TokenDataOps for uint256;\n    using DNAOps for uint256;\n\n    bool public publicSaleActive;\n\n    uint256 constant MAX_SUPPLY = 5000;\n    uint256 constant MAX_PER_WALLET = 50;\n\n    uint256 constant PURCHASE_LIMIT = 3;\n    uint256 constant whitelistPrice = 0.075 ether;\n\n    address public metadata;\n    address public multiSigTreasury = 0xFB79a928C5d6c5932Ba83Aa8C7145cBDCDb9fd2E;\n    address signerAddress = 0x3ADE0c5e35cbF136245F4e4bBf4563BD151d39D1;\n\n    uint256 public totalLevel2Reached;\n    uint256 public totalLevel3Reached;\n\n    uint256 constant LEVEL_2_COST = 120 * 1e18;\n    uint256 constant LEVEL_3_COST = 350 * 1e18;\n\n    uint256 constant MAX_NUM_LEVEL_2 = 3300;\n    uint256 constant MAX_NUM_LEVEL_3 = 1200;\n\n    uint256 constant NAME_CHANGE_COST = 25 * 1e18;\n    uint256 constant BIO_CHANGE_COST = 15 * 1e18;\n\n    uint256 constant MAX_LEN_NAME = 20;\n    uint256 constant MAX_LEN_BIO = 35;\n\n    uint256 constant MINT_AND_STAKE_MIN_HOLD_DURATION = 3 days;\n    uint256 profileUpdateMinHoldDuration = 30 days;\n\n    mapping(uint256 => string) public mouseName;\n    mapping(uint256 => string) public mouseBio;\n\n    string public description;\n    string public imagesBaseURI;\n    string constant unrevealedURI = 'ipfs://QmW9NKUGYesTiYx5iSP1o82tn4Chq9i1yQV6DBnzznrHTH';\n\n    bool private revealed;\n    bytes32 immutable secretHash;\n\n    constructor(bytes32 secretHash_) MadMouseStaking(MAX_SUPPLY, MAX_PER_WALLET) {\n        secretHash = secretHash_;\n        _mintAndStake(multiSigTreasury, 30, false);\n    }\n\n    /* ------------- External ------------- */\n\n    function mint(uint256 amount, bool stake) external payable noContract {\n        if (!publicSaleActive) revert PublicSaleNotActive();\n        if (PURCHASE_LIMIT < amount) revert ExceedsLimit();\n\n        uint256 price_ = price();\n        if (msg.value != price_ * amount) revert IncorrectValue();\n\n        if (price_ == 0) {\n            // free mints will at first be restricted to purchase limit\n            uint256 numMinted = _userData[msg.sender].numMinted();\n            if (numMinted + amount > PURCHASE_LIMIT) revert ExceedsLimit();\n\n            // free mints > 1 will be staked\n            if (amount != 1) stake = true;\n        }\n\n        _mintAndStake(msg.sender, amount, stake);\n    }\n\n    function whitelistMint(\n        uint256 amount,\n        uint256 limit,\n        bytes calldata signature,\n        bool stake\n    ) external payable noContract {\n        if (publicSaleActive) revert WhitelistNotActive();\n        if (!validSignature(signature, limit)) revert InvalidSignature();\n\n        uint256 numMinted = _userData[msg.sender].numMinted();\n        if (numMinted + amount > limit) revert ExceedsLimit();\n\n        _mintAndStake(msg.sender, amount, stake);\n    }\n\n    function levelUp(uint256 tokenId) external payable {\n        uint256 tokenData = _tokenDataOf(tokenId);\n        address owner = tokenData.trueOwner();\n\n        if (owner != msg.sender) revert IncorrectOwner();\n\n        uint256 level = tokenData.level();\n        if (level > 2) revert MaxLevelReached();\n\n        if (level == 1) {\n            if (totalLevel2Reached >= MAX_NUM_LEVEL_2) revert MaxNumberReached();\n            gouda.burnFrom(msg.sender, LEVEL_2_COST);\n            ++totalLevel2Reached;\n        } else {\n            if (totalLevel3Reached >= MAX_NUM_LEVEL_3) revert MaxNumberReached();\n            gouda.burnFrom(msg.sender, LEVEL_3_COST);\n            ++totalLevel3Reached;\n        }\n\n        uint256 newTokenData = tokenData.increaseLevel().resetOwnerCount();\n\n        if (tokenData.staked() && revealed) {\n            uint256 userData = _claimReward();\n            (userData, newTokenData) = updateDataWhileStaked(userData, tokenId, tokenData, newTokenData);\n            _userData[msg.sender] = userData;\n        }\n\n        _tokenData[tokenId] = newTokenData;\n    }\n\n    function setName(uint256 tokenId, string calldata name) external payable onlyLongtermHolder(tokenId) {\n        if (!isValidString(name, MAX_LEN_NAME)) revert InvalidString();\n\n        gouda.burnFrom(msg.sender, NAME_CHANGE_COST);\n        mouseName[tokenId] = name;\n    }\n\n    function setBio(uint256 tokenId, string calldata bio) external payable onlyLongtermHolder(tokenId) {\n        if (!isValidString(bio, MAX_LEN_BIO)) revert InvalidString();\n\n        gouda.burnFrom(msg.sender, BIO_CHANGE_COST);\n        mouseBio[tokenId] = bio;\n    }\n\n    // only to be used by owner in extreme cases when these reflect negatively on the collection\n    // since they are automatically shown in the metadata (on OpenSea)\n    function resetName(uint256 tokenId) external payable {\n        address _owner = _tokenDataOf(tokenId).trueOwner();\n        if (_owner != msg.sender && owner() != msg.sender) revert IncorrectOwner();\n        delete mouseName[tokenId];\n    }\n\n    function resetBio(uint256 tokenId) external payable {\n        address _owner = _tokenDataOf(tokenId).trueOwner();\n        if (_owner != msg.sender && owner() != msg.sender) revert IncorrectOwner();\n        delete mouseBio[tokenId];\n    }\n\n    /* ------------- View ------------- */\n\n    function price() public view returns (uint256) {\n        return totalSupply < 3500 ? 0 ether : .02 ether;\n    }\n\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\n        if (!_exists(tokenId)) revert NonexistentToken();\n        if (!revealed || address(metadata) == address(0)) return unrevealedURI;\n        return IMadMouseMetadata(address(metadata)).buildMouseMetadata(tokenId, this.getLevel(tokenId));\n    }\n\n    function previewTokenURI(uint256 tokenId, uint256 level) external view returns (string memory) {\n        if (!_exists(tokenId)) revert NonexistentToken();\n        if (!revealed || address(metadata) == address(0)) return unrevealedURI;\n        return IMadMouseMetadata(address(metadata)).buildMouseMetadata(tokenId, level);\n    }\n\n    function getDNA(uint256 tokenId) external view onceRevealed returns (uint256) {\n        if (!_exists(tokenId)) revert NonexistentToken();\n        return computeDNA(tokenId);\n    }\n\n    function getLevel(uint256 tokenId) external view returns (uint256) {\n        return _tokenDataOf(tokenId).level();\n    }\n\n    /* ------------- Private ------------- */\n\n    function validSignature(bytes calldata signature, uint256 limit) private view returns (bool) {\n        bytes32 msgHash = keccak256(abi.encode(address(this), msg.sender, limit));\n        return msgHash.toEthSignedMessageHash().recover(signature) == signerAddress;\n    }\n\n    // not guarded for reveal\n    function computeDNA(uint256 tokenId) private view returns (uint256) {\n        return uint256(keccak256(abi.encodePacked(randomSeed, tokenId)));\n    }\n\n    /* ------------- Owner ------------- */\n\n    function setPublicSaleActive(bool active) external payable onlyOwner {\n        publicSaleActive = active;\n    }\n\n    function setProfileUpdateMinHoldDuration(uint256 duration) external payable onlyOwner {\n        profileUpdateMinHoldDuration = duration;\n    }\n\n    function giveAway(address[] calldata to, uint256[] calldata amounts) external payable onlyOwner {\n        for (uint256 i; i < to.length; ++i) _mintAndStake(to[i], amounts[i], false);\n    }\n\n    function setSignerAddress(address address_) external payable onlyOwner {\n        signerAddress = address_;\n    }\n\n    function setMetadataAddress(address metadata_) external payable onlyOwner {\n        metadata = metadata_;\n    }\n\n    function withdraw() external payable onlyOwner {\n        uint256 balance = address(this).balance;\n        multiSigTreasury.call{value: balance}('');\n    }\n\n    function recoverToken(IERC20 token) external payable onlyOwner {\n        uint256 balance = token.balanceOf(address(this));\n        token.transfer(msg.sender, balance);\n    }\n\n    function setDescription(string memory description_) external payable onlyOwner {\n        description = description_;\n    }\n\n    // requires that the reveal is first done through chainlink vrf\n    function setImagesBaseURI(string memory uri) external payable onlyOwner onceRevealed {\n        imagesBaseURI = uri;\n    }\n\n    // extra security for reveal:\n    // the owner sets a hash of a secret seed\n    // once chainlink randomness fulfills, the secret is revealed and shifts the secret seed set by chainlink\n    // Why? The final randomness should come from a trusted third party,\n    // however devs need time to generate the collection from the metadata.\n    // There is a time-frame in which an unfair advantage is gained after the seed is set and before the metadata is revealed.\n    // This eliminates any possibility of the team generating an unfair seed and any unfair advantage by snipers.\n    function reveal(string memory _imagesBaseURI, bytes32 secretSeed_) external payable onlyOwner whenRandomSeedSet {\n        if (revealed) revert CollectionAlreadyRevealed();\n        if (secretHash != keccak256(abi.encode(secretSeed_))) revert IncorrectHash();\n\n        revealed = true;\n        imagesBaseURI = _imagesBaseURI;\n        _shiftRandomSeed(uint256(secretSeed_));\n    }\n\n    /* ------------- Hooks ------------- */\n\n    // update role, level information when staking\n    function _beforeStakeDataTransform(\n        uint256 tokenId,\n        uint256 userData,\n        uint256 tokenData\n    ) internal view override returns (uint256, uint256) {\n        // assumption that mint&stake won't have revealed yet\n        if (!tokenData.mintAndStake() && tokenData.role() == 0 && revealed)\n            tokenData = tokenData.setRoleAndRarity(computeDNA(tokenId));\n        userData = userData.updateUserDataStake(tokenData);\n        return (userData, tokenData);\n    }\n\n    function _beforeUnstakeDataTransform(\n        uint256,\n        uint256 userData,\n        uint256 tokenData\n    ) internal view override returns (uint256, uint256) {\n        userData = userData.updateUserDataUnstake(tokenData);\n        if (tokenData.mintAndStake() && block.timestamp - tokenData.lastTransfer() < MINT_AND_STAKE_MIN_HOLD_DURATION)\n            revert MintAndStakeMinHoldDurationNotReached();\n        return (userData, tokenData);\n    }\n\n    function updateStakedTokenData(uint256[] calldata tokenIds) external payable onceRevealed {\n        uint256 userData = _claimReward();\n        uint256 tokenId;\n        uint256 tokenData;\n        for (uint256 i; i < tokenIds.length; ++i) {\n            tokenId = tokenIds[i];\n            tokenData = _tokenDataOf(tokenId);\n\n            if (tokenData.trueOwner() != msg.sender) revert IncorrectOwner();\n            if (!tokenData.staked()) revert TokenIdUnstaked(); // only useful for staked ids\n            if (tokenData.role() != 0) revert TokenDataAlreadySet();\n\n            (userData, tokenData) = updateDataWhileStaked(userData, tokenId, tokenData, tokenData);\n\n            _tokenData[tokenId] = tokenData;\n        }\n        _userData[msg.sender] = userData;\n    }\n\n    // note: must be guarded by check for revealed\n    function updateDataWhileStaked(\n        uint256 userData,\n        uint256 tokenId,\n        uint256 oldTokenData,\n        uint256 newTokenData\n    ) private view returns (uint256, uint256) {\n        uint256 userDataX;\n        // add in the role and rarity data if not already\n        uint256 tokenDataX = newTokenData.role() != 0\n            ? newTokenData\n            : newTokenData.setRoleAndRarity(computeDNA(tokenId));\n\n        // update userData as if to unstake with old tokenData and stake with new tokenData\n        userDataX = userData.updateUserDataUnstake(oldTokenData).updateUserDataStake(tokenDataX);\n        return applySafeDataTransform(userData, newTokenData, userDataX, tokenDataX);\n    }\n\n    // simulates a token update and only returns ids != 0 if\n    // the user gets a bonus increase upon updating staked data\n    function shouldUpdateStakedIds(address user) external view returns (uint256[] memory) {\n        if (!revealed) return new uint256[](0);\n\n        uint256[] memory stakedIds = this.tokenIdsOf(user, 1);\n\n        uint256 userData = _userData[user];\n        uint256 oldTotalBonus = totalBonus(user, userData);\n\n        uint256 tokenData;\n        for (uint256 i; i < stakedIds.length; ++i) {\n            tokenData = _tokenDataOf(stakedIds[i]);\n            if (tokenData.role() == 0)\n                (userData, ) = updateDataWhileStaked(userData, stakedIds[i], tokenData, tokenData);\n            else stakedIds[i] = 0;\n        }\n\n        uint256 newTotalBonus = totalBonus(user, userData);\n\n        return (newTotalBonus > oldTotalBonus) ? stakedIds : new uint256[](0);\n    }\n\n    /* ------------- Modifier ------------- */\n\n    modifier onceRevealed() {\n        if (!revealed) revert CollectionNotRevealed();\n        _;\n    }\n\n    modifier noContract() {\n        if (tx.origin != msg.sender) revert ContractCallNotAllowed();\n        _;\n    }\n\n    modifier onlyLongtermHolder(uint256 tokenId) {\n        uint256 tokenData = _tokenDataOf(tokenId);\n        uint256 timeHeld = block.timestamp - tokenData.lastTransfer();\n\n        if (tokenData.trueOwner() != msg.sender) revert IncorrectOwner();\n        if (timeHeld < profileUpdateMinHoldDuration) revert MinHoldDurationRequired();\n        _;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "contracts/lib/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nerror CallerIsNotTheOwner();\n\nabstract contract Ownable {\n    address _owner;\n\n    constructor() {\n        _owner = msg.sender;\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        if (msg.sender != _owner) revert CallerIsNotTheOwner();\n        _;\n    }\n\n    function transferOwnership(address newOwner) external onlyOwner {\n        _owner = newOwner;\n    }\n}\n"
    },
    "contracts/lib/VRFBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport '@chainlink/contracts/src/v0.8/VRFConsumerBase.sol';\nimport './Ownable.sol';\n\nerror RandomSeedNotSet();\nerror RandomSeedAlreadySet();\n\ncontract VRFBase is VRFConsumerBase, Ownable {\n    bytes32 private immutable keyHash;\n    uint256 private immutable fee;\n\n    uint256 public randomSeed;\n\n    constructor(\n        bytes32 keyHash_,\n        uint256 fee_,\n        address vrfCoordinator_,\n        address link_\n    ) VRFConsumerBase(vrfCoordinator_, link_) {\n        keyHash = keyHash_;\n        fee = fee_;\n    }\n\n    /* ------------- Owner ------------- */\n\n    function requestRandomSeed() external payable virtual onlyOwner whenRandomSeedUnset {\n        requestRandomness(keyHash, fee);\n    }\n\n    // this function should not be needed and is just an emergency fail-safe if\n    // for some reason chainlink is not able to fulfill the randomness callback\n    function forceFulfillRandomness() external payable virtual onlyOwner whenRandomSeedUnset {\n        randomSeed = uint256(blockhash(block.number - 1));\n    }\n\n    /* ------------- Internal ------------- */\n\n    function fulfillRandomness(bytes32, uint256 randomNumber) internal virtual override {\n        randomSeed = randomNumber;\n    }\n\n    function _shiftRandomSeed(uint256 randomNumber) internal {\n        randomSeed = uint256(keccak256(abi.encode(randomSeed, randomNumber)));\n    }\n\n    /* ------------- View ------------- */\n\n    function randomSeedSet() public view returns (bool) {\n        return randomSeed > 0;\n    }\n\n    /* ------------- Modifier ------------- */\n\n    modifier whenRandomSeedSet() {\n        if (!randomSeedSet()) revert RandomSeedNotSet();\n        _;\n    }\n\n    modifier whenRandomSeedUnset() {\n        if (randomSeedSet()) revert RandomSeedAlreadySet();\n        _;\n    }\n}\n\n// get your shit together Chainlink...\ncontract VRFBaseMainnet is\n    VRFBase(\n        0xAA77729D3466CA35AE8D28B3BBAC7CC36A5031EFDC430821C02BC31A238AF445,\n        2 * 1e18,\n        0xf0d54349aDdcf704F77AE15b96510dEA15cb7952,\n        0x514910771AF9Ca656af840dff83E8264EcF986CA\n    )\n{\n\n}\n\ncontract VRFBaseRinkeby is\n    VRFBase(\n        0x2ed0feb3e7fd2022120aa84fab1945545a9f2ffc9076fd6156fa96eaff4c1311,\n        0.1 * 1e18,\n        0xb3dCcb4Cf7a26f6cf6B120Cf5A73875B7BBc655B,\n        0x01BE23585060835E02B77ef475b0Cc51aA1e0709\n    )\n{}\n\ncontract VRFBaseMumbai is\n    VRFBase(\n        0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4,\n        0.0001 * 1e18,\n        0x8C7382F9D8f56b33781fE506E897a4F1e2d17255,\n        0x326C977E6efc84E512bB9C30f76E30c160eD06FB\n    )\n{}\n"
    },
    "contracts/Gouda.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts/access/AccessControl.sol';\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\n\ncontract Gouda is ERC20, AccessControl {\n    bytes32 constant MINT_AUTHORITY = keccak256('MINT_AUTHORITY');\n    bytes32 constant BURN_AUTHORITY = keccak256('BURN_AUTHORITY');\n    bytes32 constant TREASURY = keccak256('TREASURY');\n\n    address public multiSigTreasury = 0xFB79a928C5d6c5932Ba83Aa8C7145cBDCDb9fd2E;\n\n    constructor(address madmouse) ERC20('Gouda', 'GOUDA') {\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n\n        _setupRole(MINT_AUTHORITY, madmouse);\n        _setupRole(BURN_AUTHORITY, madmouse);\n        _setupRole(TREASURY, multiSigTreasury);\n\n        _mint(multiSigTreasury, 200_000 * 1e18);\n    }\n\n    /* ------------- Restricted ------------- */\n\n    function mint(address user, uint256 amount) external onlyRole(MINT_AUTHORITY) {\n        _mint(user, amount);\n    }\n\n    /* ------------- ERC20Burnable ------------- */\n\n    function burnFrom(address account, uint256 amount) public {\n        if (!hasRole(BURN_AUTHORITY, msg.sender)) _spendAllowance(account, msg.sender, amount);\n        _burn(account, amount);\n    }\n}\n"
    },
    "contracts/MadMouseStaking.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport './Gouda.sol';\nimport './lib/ERC721M.sol';\nimport './lib/Ownable.sol';\n\nerror InvalidBoostToken();\nerror TransferFailed();\nerror BoostInEffect();\nerror NotSpecialGuestOwner();\nerror SpecialGuestIndexMustDiffer();\n\nabstract contract MadMouseStaking is ERC721M, Ownable {\n    using UserDataOps for uint256;\n\n    event BoostActivation(address token);\n\n    Gouda public gouda;\n\n    uint256 constant dailyReward = 0.3 * 1e18;\n\n    uint256 constant ROLE_BONUS_3 = 2000;\n    uint256 constant ROLE_BONUS_5 = 3500;\n    uint256 constant TOKEN_BONUS = 1000;\n    uint256 constant TIME_BONUS = 1000;\n    uint256 constant RARITY_BONUS = 1000;\n    uint256 constant OG_BONUS = 2000;\n    uint256 constant SPECIAL_GUEST_BONUS = 1000;\n\n    uint256 immutable OG_BONUS_END;\n    uint256 immutable LAST_GOUDA_EMISSION_DATE;\n\n    uint256 constant TOKEN_BOOST_DURATION = 9 days;\n    uint256 constant TOKEN_BOOST_COOLDOWN = 9 days;\n    uint256 constant TIME_BONUS_STAKE_DURATION = 30 days;\n\n    mapping(IERC20 => uint256) tokenBoostCosts;\n    mapping(uint256 => IERC721) specialGuests;\n    mapping(IERC721 => bytes4) specialGuestsNumStakedSelector;\n\n    address constant burnAddress = 0x000000000000000000000000000000000000dEaD;\n\n    constructor(uint256 maxSupply_, uint256 maxPerWallet_)\n        ERC721M('MadMouseCircus', 'MMC', 1, maxSupply_, maxPerWallet_)\n    {\n        OG_BONUS_END = block.timestamp + 60 days;\n        LAST_GOUDA_EMISSION_DATE = block.timestamp + 5 * 365 days;\n    }\n\n    /* ------------- External ------------- */\n\n    function burnForBoost(IERC20 token) external payable {\n        uint256 userData = _claimReward();\n\n        uint256 boostCost = tokenBoostCosts[token];\n        if (boostCost == 0) revert InvalidBoostToken();\n\n        bool success = token.transferFrom(msg.sender, burnAddress, boostCost);\n        if (!success) revert TransferFailed();\n\n        uint256 boostStart = userData.boostStart();\n        if (boostStart + TOKEN_BOOST_DURATION + TOKEN_BOOST_COOLDOWN > block.timestamp) revert BoostInEffect();\n\n        _userData[msg.sender] = userData.setBoostStart(block.timestamp);\n\n        emit BoostActivation(address(token));\n    }\n\n    function claimSpecialGuest(uint256 collectionIndex) external payable {\n        uint256 userData = _claimReward();\n        uint256 specialGuestIndexOld = userData.specialGuestIndex();\n\n        if (collectionIndex == specialGuestIndexOld) revert SpecialGuestIndexMustDiffer();\n        if (collectionIndex != 0 && !hasSpecialGuest(msg.sender, collectionIndex)) revert NotSpecialGuestOwner();\n\n        _userData[msg.sender] = userData.setSpecialGuestIndex(collectionIndex);\n    }\n\n    function clearSpecialGuestData() external payable {\n        _userData[msg.sender] = _userData[msg.sender].setSpecialGuestIndex(0);\n    }\n\n    /* ------------- Internal ------------- */\n\n    function tokenBonus(uint256 userData) private view returns (uint256) {\n        unchecked {\n            uint256 lastClaimed = userData.lastClaimed();\n            uint256 boostEnd = userData.boostStart() + TOKEN_BOOST_DURATION;\n\n            if (lastClaimed > boostEnd) return 0;\n            if (block.timestamp <= boostEnd) return TOKEN_BONUS;\n\n            // follows: lastClaimed <= boostEnd < block.timestamp\n\n            // user is half-way through running out of boost, calculate exact fraction,\n            // as if claim was initiated once at end of boost and once now\n            // bonus * (time delta spent with boost bonus) / (complete duration)\n            return (TOKEN_BONUS * (boostEnd - lastClaimed)) / (block.timestamp - lastClaimed);\n        }\n    }\n\n    function roleBonus(uint256 userData) private pure returns (uint256) {\n        uint256 numRoles = userData.uniqueRoleCount();\n        return numRoles < 3 ? 0 : numRoles < 5 ? ROLE_BONUS_3 : ROLE_BONUS_5;\n    }\n\n    function rarityBonus(uint256 userData) private pure returns (uint256) {\n        unchecked {\n            uint256 numStaked = userData.numStaked();\n            return numStaked == 0 ? 0 : (userData.rarityPoints() * RARITY_BONUS) / numStaked;\n        }\n    }\n\n    function OGBonus(uint256 userData) private view returns (uint256) {\n        unchecked {\n            uint256 count = userData.OGCount();\n            uint256 lastClaimed = userData.lastClaimed();\n\n            if (count == 0 || lastClaimed > OG_BONUS_END) return 0;\n\n            // follows: 0 < count <= numStaked\n            uint256 bonus = (count * OG_BONUS) / userData.numStaked();\n            if (block.timestamp <= OG_BONUS_END) return bonus;\n\n            // follows: lastClaimed <= OG_BONUS_END < block.timestamp\n            return (bonus * (OG_BONUS_END - lastClaimed)) / (block.timestamp - lastClaimed);\n        }\n    }\n\n    function timeBonus(uint256 userData) private view returns (uint256) {\n        unchecked {\n            uint256 stakeStart = userData.stakeStart();\n            uint256 stakeBonusStart = stakeStart + TIME_BONUS_STAKE_DURATION;\n\n            if (block.timestamp < stakeBonusStart) return 0;\n\n            uint256 lastClaimed = userData.lastClaimed();\n            if (lastClaimed >= stakeBonusStart) return TIME_BONUS;\n\n            // follows: lastClaimed < stakeBonusStart <= block.timestamp\n            return (TIME_BONUS * (block.timestamp - stakeBonusStart)) / (block.timestamp - lastClaimed);\n        }\n    }\n\n    function hasSpecialGuest(address user, uint256 index) public view returns (bool) {\n        if (index == 0) return false;\n\n        // first 18 addresses are hardcoded to save gas\n        if (index < 19) {\n            address[19] memory guests = [\n                0x0000000000000000000000000000000000000000, // 0: reserved\n                0x4BB33f6E69fd62cf3abbcC6F1F43b94A5D572C2B, // 1: Bears Deluxe\n                0xbEA8123277142dE42571f1fAc045225a1D347977, // 2: DystoPunks\n                0x12d2D1beD91c24f878F37E66bd829Ce7197e4d14, // 3: Galactic Apes\n                0x0c2E57EFddbA8c768147D1fdF9176a0A6EBd5d83, // 4: Kaiju Kingz\n                0x6E5a65B5f9Dd7b1b08Ff212E210DCd642DE0db8B, // 5: Octohedz\n                0x17eD38f5F519C6ED563BE6486e629041Bed3dfbC, // 6: PXQuest Adventurer\n                0xdd67892E722bE69909d7c285dB572852d5F8897C, // 7: Scholarz\n                0x8a90CAb2b38dba80c64b7734e58Ee1dB38B8992e, // 8: Doodles\n                0x6F44Db5ed6b86d9cC6046D0C78B82caD9E600F6a, // 9: Digi Dragonz\n                0x219B8aB790dECC32444a6600971c7C3718252539, // 10: Sneaky Vampire Syndicate\n                0xC4a0b1E7AA137ADA8b2F911A501638088DFdD508, // 11: Uninterested Unicorns\n                0x9712228cEeDA1E2dDdE52Cd5100B88986d1Cb49c, // 12: Wulfz\n                0x56b391339615fd0e88E0D370f451fA91478Bb20F, // 13: Ethalien\n                0x648E8428e0104Ec7D08667866a3568a72Fe3898F, // 14: Dysto Apez\n                0xd2F668a8461D6761115dAF8Aeb3cDf5F40C532C6, // 15: Karafuru\n                0xbad6186E92002E312078b5a1dAfd5ddf63d3f731, // 16: Anonymice\n                0xcB4307F1c3B5556256748DDF5B86E81258990B3C, // 17: The Other Side\n                0x5c211B8E4f93F00E2BD68e82F4E00FbB3302b35c //  18: Global Citizen Club\n            ];\n\n            if (IERC721(guests[index]).balanceOf(user) != 0) return true;\n\n            if (index == 10) return ISVSGraveyard(guests[index]).getBuriedCount(user) != 0;\n            else if (index == 12) return AWOO(guests[index]).getStakedAmount(user) != 0;\n            else if (index == 16) return CheethV2(guests[index]).stakedMiceQuantity(user) != 0;\n        } else {\n            IERC721 collection = specialGuests[index];\n            if (address(collection) != address(0)) {\n                if (collection.balanceOf(user) != 0) return true;\n                bytes4 selector = specialGuestsNumStakedSelector[collection];\n                if (selector != bytes4(0)) {\n                    (bool success, bytes memory data) = address(collection).staticcall(\n                        abi.encodeWithSelector(selector, user)\n                    );\n                    return success && abi.decode(data, (uint256)) != 0;\n                }\n            }\n        }\n        return false;\n    }\n\n    function specialGuestBonus(address user, uint256 userData) private view returns (uint256) {\n        uint256 index = userData.specialGuestIndex();\n        if (!hasSpecialGuest(user, index)) return 0;\n        return SPECIAL_GUEST_BONUS;\n    }\n\n    function _pendingReward(address user, uint256 userData) internal view override returns (uint256) {\n        uint256 lastClaimed = userData.lastClaimed();\n        if (lastClaimed == 0) return 0;\n\n        uint256 timestamp = min(LAST_GOUDA_EMISSION_DATE, block.timestamp);\n\n        unchecked {\n            uint256 delta = timestamp < lastClaimed ? 0 : timestamp - lastClaimed;\n\n            uint256 reward = (userData.baseReward() * delta * dailyReward) / (1 days);\n            if (reward == 0) return 0;\n\n            uint256 bonus = totalBonus(user, userData);\n\n            // needs to be calculated per myriad for more accuracy\n            return (reward * (10000 + bonus)) / 10000;\n        }\n    }\n\n    function totalBonus(address user, uint256 userData) internal view returns (uint256) {\n        unchecked {\n            return\n                roleBonus(userData) +\n                specialGuestBonus(user, userData) +\n                rarityBonus(userData) +\n                OGBonus(userData) +\n                timeBonus(userData) +\n                tokenBonus(userData);\n        }\n    }\n\n    function _payoutReward(address user, uint256 reward) internal override {\n        if (reward != 0) gouda.mint(user, reward);\n    }\n\n    /* ------------- View ------------- */\n\n    // for convenience\n    struct StakeInfo {\n        uint256 numStaked;\n        uint256 roleCount;\n        uint256 roleBonus;\n        uint256 specialGuestBonus;\n        uint256 tokenBoost;\n        uint256 stakeStart;\n        uint256 timeBonus;\n        uint256 rarityPoints;\n        uint256 rarityBonus;\n        uint256 OGCount;\n        uint256 OGBonus;\n        uint256 totalBonus;\n        uint256 multiplierBase;\n        uint256 dailyRewardBase;\n        uint256 dailyReward;\n        uint256 pendingReward;\n        int256 tokenBoostDelta;\n        uint256[3] levelBalances;\n    }\n\n    // calculates momentary totalBonus for display instead of effective bonus\n    function getUserStakeInfo(address user) external view returns (StakeInfo memory info) {\n        unchecked {\n            uint256 userData = _userData[user];\n\n            info.numStaked = userData.numStaked();\n\n            info.roleCount = userData.uniqueRoleCount();\n\n            info.roleBonus = roleBonus(userData) / 100;\n            info.specialGuestBonus = specialGuestBonus(user, userData) / 100;\n            info.tokenBoost = (block.timestamp < userData.boostStart() + TOKEN_BOOST_DURATION) ? TOKEN_BONUS / 100 : 0;\n\n            info.stakeStart = userData.stakeStart();\n            info.timeBonus = (info.stakeStart > 0 &&\n                block.timestamp > userData.stakeStart() + TIME_BONUS_STAKE_DURATION)\n                ? TIME_BONUS / 100\n                : 0;\n\n            info.OGCount = userData.OGCount();\n            info.OGBonus = (block.timestamp > OG_BONUS_END || userData.numStaked() == 0)\n                ? 0\n                : (userData.OGCount() * OG_BONUS) / userData.numStaked() / 100;\n\n            info.rarityPoints = userData.rarityPoints();\n            info.rarityBonus = rarityBonus(userData) / 100;\n\n            info.totalBonus =\n                info.roleBonus +\n                info.specialGuestBonus +\n                info.tokenBoost +\n                info.timeBonus +\n                info.rarityBonus +\n                info.OGBonus;\n\n            info.multiplierBase = userData.baseReward();\n            info.dailyRewardBase = info.multiplierBase * dailyReward;\n\n            info.dailyReward = (info.dailyRewardBase * (100 + info.totalBonus)) / 100;\n            info.pendingReward = _pendingReward(user, userData);\n\n            info.tokenBoostDelta = int256(TOKEN_BOOST_DURATION) - int256(block.timestamp - userData.boostStart());\n\n            info.levelBalances = userData.levelBalances();\n        }\n    }\n\n    /* ------------- Owner ------------- */\n\n    function setGoudaToken(Gouda gouda_) external payable onlyOwner {\n        gouda = gouda_;\n    }\n\n    function setSpecialGuests(IERC721[] calldata collections, uint256[] calldata indices) external payable onlyOwner {\n        for (uint256 i; i < indices.length; ++i) {\n            uint256 index = indices[i];\n            require(index != 0);\n            specialGuests[index] = collections[i];\n        }\n    }\n\n    function setSpecialGuestStakingSelector(IERC721 collection, bytes4 selector) external payable onlyOwner {\n        specialGuestsNumStakedSelector[collection] = selector;\n    }\n\n    function setBoostTokens(IERC20[] calldata _boostTokens, uint256[] calldata _boostCosts) external payable onlyOwner {\n        for (uint256 i; i < _boostTokens.length; ++i) tokenBoostCosts[_boostTokens[i]] = _boostCosts[i];\n    }\n}\n\n// Special guest's staking interfaces\ninterface ISVSGraveyard {\n    function getBuriedCount(address burier) external view returns (uint256);\n}\n\ninterface AWOO {\n    function getStakedAmount(address staker) external view returns (uint256);\n}\n\ninterface CheethV2 {\n    function stakedMiceQuantity(address _address) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/VRFConsumerBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./interfaces/LinkTokenInterface.sol\";\n\nimport \"./VRFRequestIDBase.sol\";\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\n * @dev want to generate randomness from.\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomness method.\n *\n * @dev The randomness argument to fulfillRandomness is the actual random value\n * @dev generated from your seed.\n *\n * @dev The requestId argument is generated from the keyHash and the seed by\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\n * @dev requests open, you can use the requestId to track which seed is\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\n * @dev details. (See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.)\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ. (Which is critical to making unpredictable randomness! See the\n * @dev next section.)\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\n * @dev block in which the request is made, user-provided seeds have no impact\n * @dev on its economic security properties. They are only included for API\n * @dev compatability with previous versions of this contract.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request.\n */\nabstract contract VRFConsumerBase is VRFRequestIDBase {\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomness the VRF output\n   */\n  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual;\n\n  /**\n   * @dev In order to keep backwards compatibility we have kept the user\n   * seed field around. We remove the use of it because given that the blockhash\n   * enters later, it overrides whatever randomness the used seed provides.\n   * Given that it adds no security, and can easily lead to misunderstandings,\n   * we have removed it from usage and can now provide a simpler API.\n   */\n  uint256 private constant USER_SEED_PLACEHOLDER = 0;\n\n  /**\n   * @notice requestRandomness initiates a request for VRF output given _seed\n   *\n   * @dev The fulfillRandomness method receives the output, once it's provided\n   * @dev by the Oracle, and verified by the vrfCoordinator.\n   *\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\n   * @dev the _fee must exceed the fee specified during registration of the\n   * @dev _keyHash.\n   *\n   * @dev The _seed parameter is vestigial, and is kept only for API\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\n   * @dev your own randomness, here, but it's not necessary because the VRF\n   * @dev oracle will mix the hash of the block containing your request into the\n   * @dev VRF seed it ultimately uses.\n   *\n   * @param _keyHash ID of public key against which randomness is generated\n   * @param _fee The amount of LINK to send with the request\n   *\n   * @return requestId unique ID for this request\n   *\n   * @dev The returned requestId can be used to distinguish responses to\n   * @dev concurrent requests. It is passed as the first argument to\n   * @dev fulfillRandomness.\n   */\n  function requestRandomness(bytes32 _keyHash, uint256 _fee) internal returns (bytes32 requestId) {\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\n    // the hash of the block containing this request to obtain the seed/input\n    // which is finally passed to the VRF cryptographic machinery.\n    uint256 vRFSeed = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\n    // nonces[_keyHash] must stay in sync with\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\n    // This provides protection against the user repeating their input seed,\n    // which would result in a predictable/duplicate output, if multiple such\n    // requests appeared in the same block.\n    nonces[_keyHash] = nonces[_keyHash] + 1;\n    return makeRequestId(_keyHash, vRFSeed);\n  }\n\n  LinkTokenInterface internal immutable LINK;\n  address private immutable vrfCoordinator;\n\n  // Nonces for each VRF key from which randomness has been requested.\n  //\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\n  mapping(bytes32 => uint256) /* keyHash */ /* nonce */\n    private nonces;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   * @param _link address of LINK token contract\n   *\n   * @dev https://docs.chain.link/docs/link-token-contracts\n   */\n  constructor(address _vrfCoordinator, address _link) {\n    vrfCoordinator = _vrfCoordinator;\n    LINK = LinkTokenInterface(_link);\n  }\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\n    require(msg.sender == vrfCoordinator, \"Only VRFCoordinator can fulfill\");\n    fulfillRandomness(requestId, randomness);\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface LinkTokenInterface {\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\n\n  function approve(address spender, uint256 value) external returns (bool success);\n\n  function balanceOf(address owner) external view returns (uint256 balance);\n\n  function decimals() external view returns (uint8 decimalPlaces);\n\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\n\n  function increaseApproval(address spender, uint256 subtractedValue) external;\n\n  function name() external view returns (string memory tokenName);\n\n  function symbol() external view returns (string memory tokenSymbol);\n\n  function totalSupply() external view returns (uint256 totalTokensIssued);\n\n  function transfer(address to, uint256 value) external returns (bool success);\n\n  function transferAndCall(\n    address to,\n    uint256 value,\n    bytes calldata data\n  ) external returns (bool success);\n\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  ) external returns (bool success);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract VRFRequestIDBase {\n  /**\n   * @notice returns the seed which is actually input to the VRF coordinator\n   *\n   * @dev To prevent repetition of VRF output due to repetition of the\n   * @dev user-supplied seed, that seed is combined in a hash with the\n   * @dev user-specific nonce, and the address of the consuming contract. The\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\n   * @dev the final seed, but the nonce does protect against repetition in\n   * @dev requests which are included in a single block.\n   *\n   * @param _userSeed VRF seed input provided by user\n   * @param _requester Address of the requesting contract\n   * @param _nonce User-specific nonce at the time of the request\n   */\n  function makeVRFInputSeed(\n    bytes32 _keyHash,\n    uint256 _userSeed,\n    address _requester,\n    uint256 _nonce\n  ) internal pure returns (uint256) {\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\n  }\n\n  /**\n   * @notice Returns the id for this request\n   * @param _keyHash The serviceAgreement ID to be used for this request\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\n   * @return The id for this request\n   *\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\n   * @dev contract, but the one generated by makeVRFInputSeed\n   */\n  function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\n  }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = _allowances[owner][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/lib/ERC721M.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\n\nimport '@openzeppelin/contracts/utils/Address.sol';\nimport '@openzeppelin/contracts/utils/Strings.sol';\n\nimport './ERC721MLibrary.sol';\n\nerror IncorrectOwner();\nerror NonexistentToken();\nerror QueryForZeroAddress();\n\nerror TokenIdUnstaked();\nerror ExceedsStakingLimit();\n\nerror MintToZeroAddress();\nerror MintZeroQuantity();\nerror MintMaxSupplyReached();\nerror MintMaxWalletReached();\n\nerror CallerNotOwnerNorApproved();\n\nerror ApprovalToCaller();\nerror ApproveToCurrentOwner();\n\nerror TransferFromIncorrectOwner();\nerror TransferToNonERC721ReceiverImplementer();\nerror TransferToZeroAddress();\n\nabstract contract ERC721M {\n    using Address for address;\n    using Strings for uint256;\n    using UserDataOps for uint256;\n    using TokenDataOps for uint256;\n\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\n    event Approval(address indexed owner, address indexed spender, uint256 indexed id);\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    string public name;\n    string public symbol;\n\n    mapping(uint256 => address) public getApproved;\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\n\n    uint256 public totalSupply;\n\n    uint256 immutable startingIndex;\n    uint256 immutable collectionSize;\n    uint256 immutable maxPerWallet;\n\n    // note: hard limit of 255, otherwise overflows can happen\n    uint256 constant stakingLimit = 100;\n\n    mapping(uint256 => uint256) internal _tokenData;\n    mapping(address => uint256) internal _userData;\n\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        uint256 startingIndex_,\n        uint256 collectionSize_,\n        uint256 maxPerWallet_\n    ) {\n        name = name_;\n        symbol = symbol_;\n        collectionSize = collectionSize_;\n        maxPerWallet = maxPerWallet_;\n        startingIndex = startingIndex_;\n    }\n\n    /* ------------- External ------------- */\n\n    function stake(uint256[] calldata tokenIds) external payable {\n        uint256 userData = _claimReward();\n        for (uint256 i; i < tokenIds.length; ++i) userData = _stake(msg.sender, tokenIds[i], userData);\n        _userData[msg.sender] = userData;\n    }\n\n    function unstake(uint256[] calldata tokenIds) external payable {\n        uint256 userData = _claimReward();\n        for (uint256 i; i < tokenIds.length; ++i) userData = _unstake(msg.sender, tokenIds[i], userData);\n        _userData[msg.sender] = userData;\n    }\n\n    function claimReward() external payable {\n        _userData[msg.sender] = _claimReward();\n    }\n\n    /* ------------- Private ------------- */\n\n    function _stake(\n        address from,\n        uint256 tokenId,\n        uint256 userData\n    ) private returns (uint256) {\n        uint256 _numStaked = userData.numStaked();\n\n        uint256 tokenData = _tokenDataOf(tokenId);\n        address owner = tokenData.owner();\n\n        if (_numStaked >= stakingLimit) revert ExceedsStakingLimit();\n        if (owner != from) revert IncorrectOwner();\n\n        delete getApproved[tokenId];\n\n        // hook, used for reading DNA, updating role balances,\n        (uint256 userDataX, uint256 tokenDataX) = _beforeStakeDataTransform(tokenId, userData, tokenData);\n        (userData, tokenData) = applySafeDataTransform(userData, tokenData, userDataX, tokenDataX);\n\n        tokenData = tokenData.setstaked();\n        userData = userData.decreaseBalance(1).increaseNumStaked(1);\n\n        if (_numStaked == 0) userData = userData.setStakeStart(block.timestamp);\n\n        _tokenData[tokenId] = tokenData;\n\n        emit Transfer(from, address(this), tokenId);\n\n        return userData;\n    }\n\n    function _unstake(\n        address to,\n        uint256 tokenId,\n        uint256 userData\n    ) private returns (uint256) {\n        uint256 tokenData = _tokenDataOf(tokenId);\n        address owner = tokenData.trueOwner();\n        bool isStaked = tokenData.staked();\n\n        if (owner != to) revert IncorrectOwner();\n        if (!isStaked) revert TokenIdUnstaked();\n\n        (uint256 userDataX, uint256 tokenDataX) = _beforeUnstakeDataTransform(tokenId, userData, tokenData);\n        (userData, tokenData) = applySafeDataTransform(userData, tokenData, userDataX, tokenDataX);\n\n        // if mintAndStake flag is set, we need to make sure that next tokenData is set\n        // because tokenData in this case is implicit and needs to carry over\n        if (tokenData.mintAndStake()) {\n            unchecked {\n                tokenData = _ensureTokenDataSet(tokenId + 1, tokenData).unsetMintAndStake();\n            }\n        }\n\n        tokenData = tokenData.unsetstaked();\n        userData = userData.increaseBalance(1).decreaseNumStaked(1).setStakeStart(block.timestamp);\n\n        _tokenData[tokenId] = tokenData;\n\n        emit Transfer(address(this), to, tokenId);\n\n        return userData;\n    }\n\n    /* ------------- Internal ------------- */\n\n    function _mintAndStake(\n        address to,\n        uint256 quantity,\n        bool stake_\n    ) internal {\n        unchecked {\n            uint256 totalSupply_ = totalSupply;\n            uint256 startTokenId = startingIndex + totalSupply_;\n\n            uint256 userData = _userData[to];\n            uint256 numMinted_ = userData.numMinted();\n\n            if (to == address(0)) revert MintToZeroAddress();\n            if (quantity == 0) revert MintZeroQuantity();\n\n            if (totalSupply_ + quantity > collectionSize) revert MintMaxSupplyReached();\n            if (numMinted_ + quantity > maxPerWallet && address(this).code.length != 0) revert MintMaxWalletReached();\n\n            // don't update for airdrops\n            if (to == msg.sender) userData = userData.increaseNumMinted(quantity);\n\n            uint256 tokenData = TokenDataOps.newTokenData(to, block.timestamp, stake_);\n\n            // don't have to care about next token data if only minting one\n            // could optimize to implicitly flag last token id of batch\n            if (quantity == 1) tokenData = tokenData.flagNextTokenDataSet();\n\n            if (stake_) {\n                uint256 _numStaked = userData.numStaked();\n\n                userData = claimReward(userData);\n                userData = userData.increaseNumStaked(quantity);\n\n                if (_numStaked + quantity > stakingLimit) revert ExceedsStakingLimit();\n                if (_numStaked == 0) userData = userData.setStakeStart(block.timestamp);\n\n                uint256 tokenId;\n                for (uint256 i; i < quantity; ++i) {\n                    tokenId = startTokenId + i;\n\n                    (userData, tokenData) = _beforeStakeDataTransform(tokenId, userData, tokenData);\n\n                    emit Transfer(address(0), to, tokenId);\n                    emit Transfer(to, address(this), tokenId);\n                }\n            } else {\n                userData = userData.increaseBalance(quantity);\n                for (uint256 i; i < quantity; ++i) emit Transfer(address(0), to, startTokenId + i);\n            }\n\n            _userData[to] = userData;\n            _tokenData[startTokenId] = tokenData;\n\n            totalSupply += quantity;\n        }\n    }\n\n    function _claimReward() internal returns (uint256) {\n        uint256 userData = _userData[msg.sender];\n        return claimReward(userData);\n    }\n\n    function claimReward(uint256 userData) private returns (uint256) {\n        uint256 reward = _pendingReward(msg.sender, userData);\n\n        userData = userData.setLastClaimed(block.timestamp);\n\n        _payoutReward(msg.sender, reward);\n\n        return userData;\n    }\n\n    function _tokenDataOf(uint256 tokenId) public view returns (uint256) {\n        if (!_exists(tokenId)) revert NonexistentToken();\n\n        for (uint256 curr = tokenId; ; curr--) {\n            uint256 tokenData = _tokenData[curr];\n            if (tokenData != 0) return (curr == tokenId) ? tokenData : tokenData.copy();\n        }\n\n        // unreachable\n        return 0;\n    }\n\n    function _exists(uint256 tokenId) internal view returns (bool) {\n        return startingIndex <= tokenId && tokenId < startingIndex + totalSupply;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public {\n        // make sure no one is misled by token transfer events\n        if (to == address(this)) {\n            uint256 userData = _claimReward();\n            _userData[msg.sender] = _stake(msg.sender, tokenId, userData);\n        } else {\n            uint256 tokenData = _tokenDataOf(tokenId);\n            address owner = tokenData.owner();\n\n            bool isApprovedOrOwner = (msg.sender == owner ||\n                isApprovedForAll[owner][msg.sender] ||\n                getApproved[tokenId] == msg.sender);\n\n            if (!isApprovedOrOwner) revert CallerNotOwnerNorApproved();\n            if (to == address(0)) revert TransferToZeroAddress();\n            if (owner != from) revert TransferFromIncorrectOwner();\n\n            delete getApproved[tokenId];\n\n            unchecked {\n                _tokenData[tokenId] = _ensureTokenDataSet(tokenId + 1, tokenData)\n                    .setOwner(to)\n                    .setLastTransfer(block.timestamp)\n                    .incrementOwnerCount();\n            }\n\n            _userData[from] = _userData[from].decreaseBalance(1);\n            _userData[to] = _userData[to].increaseBalance(1);\n\n            emit Transfer(from, to, tokenId);\n        }\n    }\n\n    function _ensureTokenDataSet(uint256 tokenId, uint256 tokenData) private returns (uint256) {\n        if (!tokenData.nextTokenDataSet() && _tokenData[tokenId] == 0 && _exists(tokenId))\n            _tokenData[tokenId] = tokenData.copy(); // make sure to not pass any token specific data in\n        return tokenData.flagNextTokenDataSet();\n    }\n\n    /* ------------- Virtual (hooks) ------------- */\n\n    function _beforeStakeDataTransform(\n        uint256, // tokenId\n        uint256 userData,\n        uint256 tokenData\n    ) internal view virtual returns (uint256, uint256) {\n        return (userData, tokenData);\n    }\n\n    function _beforeUnstakeDataTransform(\n        uint256, // tokenId\n        uint256 userData,\n        uint256 tokenData\n    ) internal view virtual returns (uint256, uint256) {\n        return (userData, tokenData);\n    }\n\n    function _pendingReward(address, uint256 userData) internal view virtual returns (uint256);\n\n    function _payoutReward(address user, uint256 reward) internal virtual;\n\n    /* ------------- View ------------- */\n\n    function ownerOf(uint256 tokenId) external view returns (address) {\n        return _tokenDataOf(tokenId).owner();\n    }\n\n    function trueOwnerOf(uint256 tokenId) external view returns (address) {\n        return _tokenDataOf(tokenId).trueOwner();\n    }\n\n    function balanceOf(address owner) external view returns (uint256) {\n        if (owner == address(0)) revert QueryForZeroAddress();\n        return _userData[owner].balance();\n    }\n\n    function numStaked(address user) external view returns (uint256) {\n        return _userData[user].numStaked();\n    }\n\n    function numOwned(address user) external view returns (uint256) {\n        uint256 userData = _userData[user];\n        return userData.balance() + userData.numStaked();\n    }\n\n    function numMinted(address user) external view returns (uint256) {\n        return _userData[user].numMinted();\n    }\n\n    function pendingReward(address user) external view returns (uint256) {\n        return _pendingReward(user, _userData[user]);\n    }\n\n    // O(N) read-only functions\n\n    function tokenIdsOf(address user, uint256 type_) external view returns (uint256[] memory) {\n        unchecked {\n            uint256 numTotal = type_ == 0 ? this.balanceOf(user) : type_ == 1\n                ? this.numStaked(user)\n                : this.numOwned(user);\n\n            uint256[] memory ids = new uint256[](numTotal);\n\n            if (numTotal == 0) return ids;\n\n            uint256 count;\n            for (uint256 i = startingIndex; i < totalSupply + startingIndex; ++i) {\n                uint256 tokenData = _tokenDataOf(i);\n                if (user == tokenData.trueOwner()) {\n                    bool staked = tokenData.staked();\n                    if ((type_ == 0 && !staked) || (type_ == 1 && staked) || type_ == 2) {\n                        ids[count++] = i;\n                        if (numTotal == count) return ids;\n                    }\n                }\n            }\n\n            return ids;\n        }\n    }\n\n    function totalNumStaked() external view returns (uint256) {\n        unchecked {\n            uint256 count;\n            for (uint256 i = startingIndex; i < startingIndex + totalSupply; ++i) {\n                if (_tokenDataOf(i).staked()) ++count;\n            }\n            return count;\n        }\n    }\n\n    /* ------------- ERC721 ------------- */\n\n    function tokenURI(uint256 id) public view virtual returns (string memory);\n\n    function supportsInterface(bytes4 interfaceId) external view virtual returns (bool) {\n        return\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\n            interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\n    }\n\n    function approve(address spender, uint256 tokenId) external {\n        address owner = _tokenDataOf(tokenId).owner();\n\n        if (msg.sender != owner && !isApprovedForAll[owner][msg.sender]) revert CallerNotOwnerNorApproved();\n\n        getApproved[tokenId] = spender;\n        emit Approval(owner, spender, tokenId);\n    }\n\n    function setApprovalForAll(address operator, bool approved) external {\n        isApprovedForAll[msg.sender][operator] = approved;\n        emit ApprovalForAll(msg.sender, operator, approved);\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external {\n        safeTransferFrom(from, to, tokenId, '');\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public {\n        transferFrom(from, to, tokenId);\n        if (\n            to.code.length != 0 &&\n            IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, data) !=\n            IERC721Receiver(to).onERC721Received.selector\n        ) revert TransferToNonERC721ReceiverImplementer();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/lib/ERC721MLibrary.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// # ERC721M.sol\n//\n// _tokenData layout:\n// 0x________/cccccbbbbbbbbbbaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n// a [  0] (uint160): address #owner           (owner of token id)\n// b [160] (uint40): timestamp #lastTransfer   (timestamp since the last transfer)\n// c [200] (uint20): #ownerCount               (number of total owners of token)\n// f [220] (uint1): #staked flag               (flag whether id has been staked) Note: this carries over when calling 'ownerOf'\n// f [221] (uint1): #mintAndStake flag         (flag whether to carry over stake flag when calling tokenDataOf; used for mintAndStake and boost)\n// e [222] (uint1): #nextTokenDataSet flag     (flag whether the data of next token id has already been set)\n// _ [224] (uint32): arbitrary data\n\nuint256 constant RESTRICTED_TOKEN_DATA = 0x00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n// # MadMouse.sol\n//\n// _tokenData (metadata) layout:\n// 0xefg00000________________________________________________________\n// e [252] (uint4): #level                     (mouse level)  [0...2] (must be 0-based)\n// f [248] (uint4): #role                      (mouse role)   [1...5] (must start at 1)\n// g [244] (uint4): #rarity                    (mouse rarity) [0...3]\n\nstruct TokenData {\n    address owner;\n    uint256 lastTransfer;\n    uint256 ownerCount;\n    bool staked;\n    bool mintAndStake;\n    bool nextTokenDataSet;\n    uint256 level;\n    uint256 role;\n    uint256 rarity;\n}\n\n// # ERC721M.sol\n//\n// _userData layout:\n// 0x________________________________ddccccccccccbbbbbbbbbbaaaaaaaaaa\n// a [  0] (uint32): #balance                  (owner ERC721 balance)\n// b [ 40] (uint40): timestamp #stakeStart     (timestamp when stake started)\n// c [ 80] (uint40): timestamp #lastClaimed    (timestamp when user last claimed rewards)\n// d [120] (uint8): #numStaked                 (balance count of all staked tokens)\n// _ [128] (uint128): arbitrary data\n\nuint256 constant RESTRICTED_USER_DATA = 0x00000000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n// # MadMouseStaking.sol\n//\n// _userData (boost) layout:\n// 0xttttttttt/o/rriiffgghhaabbccddee________________________________\n// a-e [128] (5x uint8): #roleBalances         (balance of all staked roles)\n// f-h [168] (3x uint8): #levelBalances        (balance of all staked levels)\n\n// i [192] (uint8): #specialGuestIndex         (signals whether the user claims to hold a token of a certain collection)\n// r [200] (uint10): #rarityPoints             (counter of rare traits; 1 is rare, 2 is super-rare, 3 is ultra-rare)\n// o [210] (uint8): #OGCount                   (counter of rare traits; 1 is rare, 2 is super-rare, 3 is ultra-rare)\n// t [218] (uint38): timestamp #boostStart     (timestamp of when the boost by burning tokens of affiliate collections started)\n\nstruct UserData {\n    uint256 balance;\n    uint256 stakeStart;\n    uint256 lastClaimed;\n    uint256 numStaked;\n    uint256[5] roleBalances;\n    uint256 uniqueRoleCount; // inferred\n    uint256[3] levelBalances;\n    uint256 specialGuestIndex;\n    uint256 rarityPoints;\n    uint256 OGCount;\n    uint256 boostStart;\n}\n\nfunction applySafeDataTransform(\n    uint256 userData,\n    uint256 tokenData,\n    uint256 userDataTransformed,\n    uint256 tokenDataTransformed\n) pure returns (uint256, uint256) {\n    // mask transformed data in order to leave base data untouched in any case\n    userData = (userData & RESTRICTED_USER_DATA) | (userDataTransformed & ~RESTRICTED_USER_DATA);\n    tokenData = (tokenData & RESTRICTED_TOKEN_DATA) | (tokenDataTransformed & ~RESTRICTED_TOKEN_DATA);\n    return (userData, tokenData);\n}\n\n// @note: many of these are unchecked, because safemath wouldn't be able to guard\n// overflows while updating bitmaps unless custom checks were to be implemented\n\nlibrary UserDataOps {\n    function getUserData(uint256 userData) internal pure returns (UserData memory) {\n        return\n            UserData({\n                balance: UserDataOps.balance(userData),\n                stakeStart: UserDataOps.stakeStart(userData),\n                lastClaimed: UserDataOps.lastClaimed(userData),\n                numStaked: UserDataOps.numStaked(userData),\n                roleBalances: UserDataOps.roleBalances(userData),\n                uniqueRoleCount: UserDataOps.uniqueRoleCount(userData),\n                levelBalances: UserDataOps.levelBalances(userData),\n                specialGuestIndex: UserDataOps.specialGuestIndex(userData),\n                rarityPoints: UserDataOps.rarityPoints(userData),\n                OGCount: UserDataOps.OGCount(userData),\n                boostStart: UserDataOps.boostStart(userData)\n            });\n    }\n\n    function balance(uint256 userData) internal pure returns (uint256) {\n        return userData & 0xFFFFF;\n    }\n\n    function increaseBalance(uint256 userData, uint256 amount) internal pure returns (uint256) {\n        unchecked {\n            return userData + amount;\n        }\n    }\n\n    function decreaseBalance(uint256 userData, uint256 amount) internal pure returns (uint256) {\n        unchecked {\n            return userData - amount;\n        }\n    }\n\n    function numMinted(uint256 userData) internal pure returns (uint256) {\n        return (userData >> 20) & 0xFFFFF;\n    }\n\n    function increaseNumMinted(uint256 userData, uint256 amount) internal pure returns (uint256) {\n        unchecked {\n            return userData + (amount << 20);\n        }\n    }\n\n    function stakeStart(uint256 userData) internal pure returns (uint256) {\n        return (userData >> 40) & 0xFFFFFFFFFF;\n    }\n\n    function setStakeStart(uint256 userData, uint256 timestamp) internal pure returns (uint256) {\n        return (userData & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000FFFFFFFFFF) | (timestamp << 40);\n    }\n\n    function lastClaimed(uint256 userData) internal pure returns (uint256) {\n        return (userData >> 80) & 0xFFFFFFFFFF;\n    }\n\n    function setLastClaimed(uint256 userData, uint256 timestamp) internal pure returns (uint256) {\n        return (userData & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000FFFFFFFFFFFFFFFFFFFF) | (timestamp << 80);\n    }\n\n    function numStaked(uint256 userData) internal pure returns (uint256) {\n        return (userData >> 120) & 0xFF;\n    }\n\n    function increaseNumStaked(uint256 userData, uint256 amount) internal pure returns (uint256) {\n        unchecked {\n            return userData + (amount << 120);\n        }\n    }\n\n    function decreaseNumStaked(uint256 userData, uint256 amount) internal pure returns (uint256) {\n        unchecked {\n            return userData - (amount << 120);\n        }\n    }\n\n    function roleBalances(uint256 userData) internal pure returns (uint256[5] memory balances) {\n        balances = [\n            (userData >> (128 + 0)) & 0xFF,\n            (userData >> (128 + 8)) & 0xFF,\n            (userData >> (128 + 16)) & 0xFF,\n            (userData >> (128 + 24)) & 0xFF,\n            (userData >> (128 + 32)) & 0xFF\n        ];\n    }\n\n    // trait counts are set through hook in madmouse contract (MadMouse::_beforeStakeDataTransform)\n    function uniqueRoleCount(uint256 userData) internal pure returns (uint256) {\n        unchecked {\n            return (toUInt256((userData >> (128)) & 0xFF > 0) +\n                toUInt256((userData >> (128 + 8)) & 0xFF > 0) +\n                toUInt256((userData >> (128 + 16)) & 0xFF > 0) +\n                toUInt256((userData >> (128 + 24)) & 0xFF > 0) +\n                toUInt256((userData >> (128 + 32)) & 0xFF > 0));\n        }\n    }\n\n    function levelBalances(uint256 userData) internal pure returns (uint256[3] memory balances) {\n        unchecked {\n            balances = [\n                (userData >> (168 + 0)) & 0xFF,\n                (userData >> (168 + 8)) & 0xFF,\n                (userData >> (168 + 16)) & 0xFF\n            ];\n        }\n    }\n\n    // depends on the levels of the staked tokens (also set in hook MadMouse::_beforeStakeDataTransform)\n    // counts the base reward, depending on the levels of staked ids\n    function baseReward(uint256 userData) internal pure returns (uint256) {\n        unchecked {\n            return (((userData >> (168)) & 0xFF) +\n                (((userData >> (168 + 8)) & 0xFF) << 1) +\n                (((userData >> (168 + 16)) & 0xFF) << 2));\n        }\n    }\n\n    function rarityPoints(uint256 userData) internal pure returns (uint256) {\n        return (userData >> 200) & 0x3FF;\n    }\n\n    function specialGuestIndex(uint256 userData) internal pure returns (uint256) {\n        return (userData >> 192) & 0xFF;\n    }\n\n    function setSpecialGuestIndex(uint256 userData, uint256 index) internal pure returns (uint256) {\n        return (userData & ~uint256(0xFF << 192)) | (index << 192);\n    }\n\n    function boostStart(uint256 userData) internal pure returns (uint256) {\n        return (userData >> 218) & 0xFFFFFFFFFF;\n    }\n\n    function setBoostStart(uint256 userData, uint256 timestamp) internal pure returns (uint256) {\n        return (userData & ~(uint256(0xFFFFFFFFFF) << 218)) | (timestamp << 218);\n    }\n\n    function OGCount(uint256 userData) internal pure returns (uint256) {\n        return (userData >> 210) & 0xFF;\n    }\n\n    //  (should start at 128, 168; but role/level start at 1...)\n    function updateUserDataStake(uint256 userData, uint256 tokenData) internal pure returns (uint256) {\n        unchecked {\n            uint256 role = TokenDataOps.role(tokenData);\n            if (role > 0) {\n                userData += uint256(1) << (120 + (role << 3)); // roleBalances\n                userData += TokenDataOps.rarity(tokenData) << 200; // rarityPoints\n            }\n            if (TokenDataOps.mintAndStake(tokenData)) userData += uint256(1) << 210; // OGCount\n            userData += uint256(1) << (160 + (TokenDataOps.level(tokenData) << 3)); // levelBalances\n            return userData;\n        }\n    }\n\n    function updateUserDataUnstake(uint256 userData, uint256 tokenData) internal pure returns (uint256) {\n        unchecked {\n            uint256 role = TokenDataOps.role(tokenData);\n            if (role > 0) {\n                userData -= uint256(1) << (120 + (role << 3)); // roleBalances\n                userData -= TokenDataOps.rarity(tokenData) << 200; // rarityPoints\n            }\n            if (TokenDataOps.mintAndStake(tokenData)) userData -= uint256(1) << 210; // OG-count\n            userData -= uint256(1) << (160 + (TokenDataOps.level(tokenData) << 3)); // levelBalances\n            return userData;\n        }\n    }\n\n    function increaseLevelBalances(uint256 userData, uint256 tokenData) internal pure returns (uint256) {\n        unchecked {\n            return userData + (uint256(1) << (160 + (TokenDataOps.level(tokenData) << 3)));\n        }\n    }\n\n    function decreaseLevelBalances(uint256 userData, uint256 tokenData) internal pure returns (uint256) {\n        unchecked {\n            return userData - (uint256(1) << (160 + (TokenDataOps.level(tokenData) << 3)));\n        }\n    }\n}\n\nlibrary TokenDataOps {\n    function getTokenData(uint256 tokenData) internal view returns (TokenData memory) {\n        return\n            TokenData({\n                owner: TokenDataOps.owner(tokenData),\n                lastTransfer: TokenDataOps.lastTransfer(tokenData),\n                ownerCount: TokenDataOps.ownerCount(tokenData),\n                staked: TokenDataOps.staked(tokenData),\n                mintAndStake: TokenDataOps.mintAndStake(tokenData),\n                nextTokenDataSet: TokenDataOps.nextTokenDataSet(tokenData),\n                level: TokenDataOps.level(tokenData),\n                role: TokenDataOps.role(tokenData),\n                rarity: TokenDataOps.rarity(tokenData)\n            });\n    }\n\n    function newTokenData(\n        address owner_,\n        uint256 lastTransfer_,\n        bool stake_\n    ) internal pure returns (uint256) {\n        uint256 tokenData = (uint256(uint160(owner_)) | (lastTransfer_ << 160) | (uint256(1) << 200));\n        return stake_ ? setstaked(setMintAndStake(tokenData)) : tokenData;\n    }\n\n    function copy(uint256 tokenData) internal pure returns (uint256) {\n        // tokenData minus the token specific flags (4/2bits), i.e. only owner, lastTransfer, ownerCount\n        // stake flag (& mintAndStake flag) carries over if mintAndStake was called\n        return tokenData & (RESTRICTED_TOKEN_DATA >> (mintAndStake(tokenData) ? 2 : 4));\n    }\n\n    function owner(uint256 tokenData) internal view returns (address) {\n        if (staked(tokenData)) return address(this);\n        return trueOwner(tokenData);\n    }\n\n    function setOwner(uint256 tokenData, address owner_) internal pure returns (uint256) {\n        return (tokenData & 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000) | uint160(owner_);\n    }\n\n    function staked(uint256 tokenData) internal pure returns (bool) {\n        return ((tokenData >> 220) & uint256(1)) > 0; // Note: this can carry over when calling 'ownerOf'\n    }\n\n    function setstaked(uint256 tokenData) internal pure returns (uint256) {\n        return tokenData | (uint256(1) << 220);\n    }\n\n    function unsetstaked(uint256 tokenData) internal pure returns (uint256) {\n        return tokenData & ~(uint256(1) << 220);\n    }\n\n    function mintAndStake(uint256 tokenData) internal pure returns (bool) {\n        return ((tokenData >> 221) & uint256(1)) > 0;\n    }\n\n    function setMintAndStake(uint256 tokenData) internal pure returns (uint256) {\n        return tokenData | (uint256(1) << 221);\n    }\n\n    function unsetMintAndStake(uint256 tokenData) internal pure returns (uint256) {\n        return tokenData & ~(uint256(1) << 221);\n    }\n\n    function nextTokenDataSet(uint256 tokenData) internal pure returns (bool) {\n        return ((tokenData >> 222) & uint256(1)) > 0;\n    }\n\n    function flagNextTokenDataSet(uint256 tokenData) internal pure returns (uint256) {\n        return tokenData | (uint256(1) << 222); // nextTokenDatatSet flag (don't repeat the read/write)\n    }\n\n    function trueOwner(uint256 tokenData) internal pure returns (address) {\n        return address(uint160(tokenData));\n    }\n\n    function ownerCount(uint256 tokenData) internal pure returns (uint256) {\n        return (tokenData >> 200) & 0xFFFFF;\n    }\n\n    function incrementOwnerCount(uint256 tokenData) internal pure returns (uint256) {\n        uint256 newOwnerCount = min(ownerCount(tokenData) + 1, 0xFFFFF);\n        return (tokenData & ~(uint256(0xFFFFF) << 200)) | (newOwnerCount << 200);\n    }\n\n    function resetOwnerCount(uint256 tokenData) internal pure returns (uint256) {\n        uint256 count = min(ownerCount(tokenData), 2); // keep minter status\n        return (tokenData & ~(uint256(0xFFFFF) << 200)) | (count << 200);\n    }\n\n    function lastTransfer(uint256 tokenData) internal pure returns (uint256) {\n        return (tokenData >> 160) & 0xFFFFFFFFFF;\n    }\n\n    function setLastTransfer(uint256 tokenData, uint256 timestamp) internal pure returns (uint256) {\n        return (tokenData & 0xFFFFFFFFFFFFFF0000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) | (timestamp << 160);\n    }\n\n    // MadMouse\n    function level(uint256 tokenData) internal pure returns (uint256) {\n        unchecked {\n            return 1 + (tokenData >> 252);\n        }\n    }\n\n    function increaseLevel(uint256 tokenData) internal pure returns (uint256) {\n        unchecked {\n            return tokenData + (uint256(1) << 252);\n        }\n    }\n\n    function role(uint256 tokenData) internal pure returns (uint256) {\n        return (tokenData >> 248) & 0xF;\n    }\n\n    function rarity(uint256 tokenData) internal pure returns (uint256) {\n        return (tokenData >> 244) & 0xF;\n    }\n\n    // these slots should be are already 0\n    function setRoleAndRarity(uint256 tokenData, uint256 dna) internal pure returns (uint256) {\n        return ((tokenData & ~(uint256(0xFF) << 244)) | (DNAOps.toRole(dna) << 248) | (DNAOps.toRarity(dna) << 244));\n    }\n}\n\nlibrary DNAOps {\n    function toRole(uint256 dna) internal pure returns (uint256) {\n        unchecked {\n            return 1 + ((dna & 0xFF) % 5);\n        }\n    }\n\n    function toRarity(uint256 dna) internal pure returns (uint256) {\n        uint256 dnaFur = (dna >> 8) & 0xFF;\n        if (dnaFur > 108) return 0;\n        if (dnaFur > 73) return 1;\n        if (dnaFur > 17) return 2;\n        return 3;\n    }\n}\n\n/* ------------- Helpers ------------- */\n\n// more efficient https://github.com/ethereum/solidity/issues/659\nfunction toUInt256(bool x) pure returns (uint256 r) {\n    assembly {\n        r := x\n    }\n}\n\nfunction min(uint256 a, uint256 b) pure returns (uint256) {\n    return a < b ? a : b;\n}\n\nfunction isValidString(string calldata str, uint256 maxLen) pure returns (bool) {\n    unchecked {\n        bytes memory b = bytes(str);\n        if (b.length < 1 || b.length > maxLen || b[0] == 0x20 || b[b.length - 1] == 0x20) return false;\n\n        bytes1 lastChar = b[0];\n\n        bytes1 char;\n        for (uint256 i; i < b.length; ++i) {\n            char = b[i];\n\n            if (\n                (char > 0x60 && char < 0x7B) || //a-z\n                (char > 0x40 && char < 0x5B) || //A-Z\n                (char == 0x20) || //space\n                (char > 0x2F && char < 0x3A) //9-0\n            ) {\n                lastChar = char;\n            } else {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 932
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}