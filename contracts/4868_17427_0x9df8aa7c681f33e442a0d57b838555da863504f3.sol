{"ERC721.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity \u003e=0.8.0;\n\n/// @notice Modern, minimalist, and gas efficient ERC-721 implementation.\n/// @author Solmate Fork (https://github.com/distractedm1nd/solmate/blob/main/src/tokens/ERC721.sol)\n/// @dev Note that balanceOf does not revert if passed the zero address, in defiance of the ERC.\nabstract contract ERC721 {\n    /*///////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\n\n    event Approval(address indexed owner, address indexed spender, uint256 indexed id);\n\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /*///////////////////////////////////////////////////////////////\n                          METADATA STORAGE/LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    string public name;\n\n    string public symbol;\n\n    function tokenURI(uint256 id) public view virtual returns (string memory);\n\n    /*///////////////////////////////////////////////////////////////\n                            ERC721 STORAGE                        \n    //////////////////////////////////////////////////////////////*/\n\n    mapping(address =\u003e uint256) public balanceOf;\n\n    mapping(uint256 =\u003e address) public ownerOf;\n\n    mapping(uint256 =\u003e address) public getApproved;\n\n    mapping(address =\u003e mapping(address =\u003e bool)) public isApprovedForAll;\n\n    /*///////////////////////////////////////////////////////////////\n                              CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(string memory _name, string memory _symbol) {\n        name = _name;\n        symbol = _symbol;\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                              ERC721 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function approve(address spender, uint256 id) public virtual {\n        address owner = ownerOf[id];\n\n        require(msg.sender == owner || isApprovedForAll[owner][msg.sender], \"NOT_AUTHORIZED\");\n\n        getApproved[id] = spender;\n\n        emit Approval(owner, spender, id);\n    }\n\n    function setApprovalForAll(address operator, bool approved) public virtual {\n        isApprovedForAll[msg.sender][operator] = approved;\n\n        emit ApprovalForAll(msg.sender, operator, approved);\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 id\n    ) public virtual {\n        require(from == ownerOf[id], \"WRONG_FROM\");\n\n        require(to != address(0), \"INVALID_RECIPIENT\");\n\n        require(\n            msg.sender == from || msg.sender == getApproved[id] || isApprovedForAll[from][msg.sender],\n            \"NOT_AUTHORIZED\"\n        );\n\n        // Underflow of the sender\u0027s balance is impossible because we check for\n        // ownership above and the recipient\u0027s balance can\u0027t realistically overflow.\n        unchecked {\n            balanceOf[from]--;\n\n            balanceOf[to]++;\n        }\n\n        ownerOf[id] = to;\n\n        delete getApproved[id];\n\n        emit Transfer(from, to, id);\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id\n    ) public virtual {\n        transferFrom(from, to, id);\n\n        require(\n            to.code.length == 0 ||\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \"\") ==\n                ERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        bytes memory data\n    ) public virtual {\n        transferFrom(from, to, id);\n\n        require(\n            to.code.length == 0 ||\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data) ==\n                ERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                              ERC165 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function supportsInterface(bytes4 interfaceId) public pure virtual returns (bool) {\n        return\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\n            interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                       INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(address to, uint256 id) internal virtual {\n        require(to != address(0), \"INVALID_RECIPIENT\");\n\n        require(ownerOf[id] == address(0), \"ALREADY_MINTED\");\n\n        // Counter overflow is incredibly unrealistic.\n        unchecked {\n            balanceOf[to]++;\n        }\n\n        ownerOf[id] = to;\n\n        emit Transfer(address(0), to, id);\n    }\n\n    function _burn(uint256 id) internal virtual {\n        address owner = ownerOf[id];\n\n        require(ownerOf[id] != address(0), \"NOT_MINTED\");\n\n        // Ownership check above ensures no underflow.\n        unchecked {\n            balanceOf[owner]--;\n        }\n\n        delete ownerOf[id];\n\n        delete getApproved[id];\n\n        emit Transfer(owner, address(0), id);\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                       INTERNAL SAFE MINT LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _safeMint(address to, uint256 id) internal virtual {\n        _mint(to, id);\n\n        require(\n            to.code.length == 0 ||\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, \"\") ==\n                ERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    function _safeMint(\n        address to,\n        uint256 id,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, id);\n\n        require(\n            to.code.length == 0 ||\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, data) ==\n                ERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n}\n\n/// @notice A generic interface for a contract which properly accepts ERC721 tokens.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC721.sol)\ninterface ERC721TokenReceiver {\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 id,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.10;\n\nerror NotOwner();\n\n// https://github.com/m1guelpf/erc721-drop/blob/main/src/LilOwnable.sol\nabstract contract Ownable {\n    address internal _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    modifier onlyOwner() {\n        require(_owner == msg.sender);\n        _;\n    }\n\n    constructor() {\n        _owner = msg.sender;\n    }\n\n    function owner() external view returns (address) {\n        return _owner;\n    }\n\n    function transferOwnership(address _newOwner) external {\n        if (msg.sender != _owner) revert NotOwner();\n\n        _owner = _newOwner;\n    }\n\n    function renounceOwnership() public {\n        if (msg.sender != _owner) revert NotOwner();\n\n        _owner = address(0);\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        pure\n        virtual\n        returns (bool)\n    {\n        return interfaceId == 0x7f5828d0; // ERC165 Interface ID for ERC173\n    }\n}"},"PixelatedLlama.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity \u003e=0.8.10;\n\nimport \"./ERC721.sol\";\nimport \"./Ownable.sol\";\nimport \"./Strings.sol\";\n\n/**\n   __ _                                               \n  / /| | __ _ _ __ ___   __ _/\\   /\\___ _ __ ___  ___ \n / / | |/ _` | \u0027_ ` _ \\ / _` \\ \\ / / _ \\ \u0027__/ __|/ _ \\\n/ /__| | (_| | | | | | | (_| |\\ V /  __/ |  \\__ \\  __/\n\\____/_|\\__,_|_| |_| |_|\\__,_| \\_/ \\___|_|  |___/\\___|\n\n**/\n\n/// @title Pixelated Llama\n/// @author delta devs (https://twitter.com/deltadevelopers)\n\n/// @notice Thrown when attempting to mint while the dutch auction has not started yet.\nerror AuctionNotStarted();\n/// @notice Thrown when attempting to mint whilst the total supply (of either static or animated llamas) has been reached.\nerror MintedOut();\n/// @notice Thrown when the value of the transaction is not enough when attempting to purchase llama during dutch auction or minting post auction.\nerror NotEnoughEther();\n\ncontract PixelatedLlama is ERC721, Ownable {\n    using Strings for uint256;\n\n    /*///////////////////////////////////////////////////////////////\n                               CONSTANTS\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 public constant provenanceHash = 0x7481a3a60827a9db04e46389b14c42d8f0ba2106ed9b239db8249929a8ab9f0b;\n\n    /// @notice The total supply of Llamas, consisting of both static \u0026 animated llamas.\n    uint256 public constant totalSupply = 4000;\n\n    /// @notice The total supply cap of animated llamas.\n    uint256 public constant animatedSupplyCap = 500;\n\n    /// @notice The total supply cap of static llamas.\n    /// @dev This does not mean there are 4000 llamas, it means that 4000 is the last tokenId of a static llama.\n    uint256 public constant staticSupplyCap = 4000;\n\n    /// @notice The total supply cap of the dutch auction.\n    /// @dev 1600 is the (phase 2) whitelist allocation.\n    uint256 public constant auctionSupplyCap = staticSupplyCap - 1600;\n\n    /// @notice The current supply of animated llamas, and a counter for the next static tokenId.\n    uint256 public animatedSupply;\n\n    /// @notice The current static supply of llamas, and a counter for the next animated tokenId.\n    /// @dev Starts at the animated supply cap, since the first 500 tokenIds are used for the animated llama supply.\n    uint256 public staticSupply = animatedSupplyCap;\n\n    /// @notice The UNIX timestamp of the begin of the dutch auction.\n    uint256 constant auctionStartTime = 1645628400;\n\n    /// @notice The start price of the dutch auction.\n    uint256 public auctionStartPrice = 1.14 ether;\n\n    /// @notice Allocation of static llamas mintable per address.\n    /// @dev Used for both free minters in Phase 1, and WL minters after the DA.\n    mapping(address =\u003e uint256) public staticWhitelist;\n\n    /// @notice Allocation of animated llamas mintable per address.\n    /// @dev Not used for the WL phase, only for free mints.\n    mapping(address =\u003e uint256) public animatedWhitelist;\n\n    /// @notice The mint price of a static llama.\n    uint256 public staticPrice;\n\n    /*///////////////////////////////////////////////////////////////\n                            METADATA STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice The base URI which retrieves token metadata.\n    string baseURI;\n\n    /// @notice Guarantees that the dutch auction has started.\n    /// @dev This also warms up the storage slot for auctionStartTime to save gas in getCurrentTokenPrice\n    modifier auctionStarted() {\n        if (block.timestamp \u003c auctionStartTime) revert AuctionNotStarted();\n        _;\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                            CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(string memory _baseURI) ERC721(\"Pixelated Llama\", \"PXLLMA\") {\n        baseURI = _baseURI;\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                            METADATA LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function tokenURI(uint256 id) public view override returns (string memory) {\n        return string(abi.encodePacked(baseURI, id.toString()));\n    }\n\n    function setBaseURI(string memory _baseURI) public onlyOwner {\n        baseURI = _baseURI;\n    }\n\n    /// @notice Uploads the number of mintable static llamas for each WL address.\n    /// @param addresses The WL addresses.\n    function uploadStaticWhitelist(\n        address[] calldata addresses\n    ) public onlyOwner {\n        for (uint256 i = 0; i \u003c addresses.length; i++) {\n            staticWhitelist[addresses[i]] = 1;\n        }\n    }\n\n    /// @notice Uploads the number of mintable static llamas for each WL address.\n    /// @param addresses The WL addresses.\n    /// @param counts The number of static llamas allocated to the same index in the first array.\n    function uploadStaticWhitelist(\n        address[] calldata addresses,\n        uint256[] calldata counts\n    ) public onlyOwner {\n        for (uint256 i = 0; i \u003c addresses.length; i++) {\n            staticWhitelist[addresses[i]] = counts[i];\n        }\n    }\n\n    /// @notice Uploads the number of mintable animated llamas for each WL address.\n    /// @param addresses The WL addresses.\n    /// @param counts The number of animated llamas allocated to the same index in the first array.\n    function uploadAnimatedWhitelist(\n        address[] calldata addresses,\n        uint256[] calldata counts\n    ) public onlyOwner {\n        for (uint256 i = 0; i \u003c addresses.length; i++) {\n            animatedWhitelist[addresses[i]] = counts[i];\n        }\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                            DUTCH AUCTION LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Mints one static llama during the dutch auction.\n    function mintAuction() public payable auctionStarted {\n        if (msg.value \u003c getCurrentTokenPrice()) revert NotEnoughEther();\n        if (staticSupply \u003e= auctionSupplyCap) revert MintedOut();\n        unchecked {\n            _mint(msg.sender, staticSupply);\n            staticSupply++;\n        }\n    }\n\n    /// @notice Calculates the auction price with the accumulated rate deduction since the auction\u0027s begin\n    /// @return The auction price at the current time, or 0 if the deductions are greater than the auction\u0027s start price.\n    function validCalculatedTokenPrice() private view returns (uint256) {\n        uint256 priceReduction = ((block.timestamp - auctionStartTime) /\n            5 minutes) * 0.1 ether;\n        return\n            auctionStartPrice \u003e= priceReduction\n                ? (auctionStartPrice - priceReduction)\n                : 0;\n    }\n\n    /// @notice Calculates the current dutch auction price, given accumulated rate deductions and a minimum price.\n    /// @return The current dutch auction price.\n    function getCurrentTokenPrice() public view returns (uint256) {\n        return max(validCalculatedTokenPrice(), 0.01 ether);\n    }\n\n    /// @notice Returns the price needed for a user to mint the static llamas allocated to him.\n    function getWhitelistPrice() public view returns (uint256) {\n        return staticPrice * staticWhitelist[msg.sender]; \n    }\n\n    /*///////////////////////////////////////////////////////////////\n                            FREE \u0026 WL MINT LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Allows the contract deployer to set the price for static llamas (after the DA).\n    /// @param _staticPrice The new price for a static llama.\n    function setStaticPrice(uint256 _staticPrice)\n        public\n        onlyOwner\n    {\n        staticPrice = _staticPrice;\n    }\n\n    /// @notice Mints all static llamas allocated to the sender, for use by free minters in the first phase, and WL minters post-auction.\n    function mintStaticLlama() public payable {\n        uint256 count = staticWhitelist[msg.sender];\n        if (staticSupply + count \u003e staticSupplyCap) revert MintedOut();\n        if (msg.value \u003c staticPrice * count) revert NotEnoughEther();\n\n        unchecked {\n            delete staticWhitelist[msg.sender];\n            _bulkMint(msg.sender, staticSupply, count);\n            staticSupply += count;\n        }\n    }\n\n    /// @notice Mints all animated llamas allocated to the sender, for use by free minters in the first phase.\n    function mintAnimatedLlama() public payable {\n        uint256 count = animatedWhitelist[msg.sender];\n        if (animatedSupply + count \u003e animatedSupplyCap) revert MintedOut();\n\n        unchecked {\n            delete animatedWhitelist[msg.sender];\n            _bulkMint(msg.sender, animatedSupply, count);\n            animatedSupply += count;\n        }\n    }\n\n    /// @notice Mints all allocated llamas to the sender in one transaction.\n    function bulkMint() public payable {\n        mintAnimatedLlama();\n        mintStaticLlama();\n    }\n\n    /// @notice Mints multiple llamas in bulk.\n    /// @param to The address to transfer minted assets to.\n    /// @param id The token ID of the first llama that will be minted.\n    /// @param count The amount of llamas to be minted.\n    function _bulkMint(\n        address to,\n        uint256 id,\n        uint256 count\n    ) internal {\n        /// @dev We never mint to address(0) so this require is unnecessary.\n        // require(to != address(0), \"INVALID_RECIPIENT\");\n\n        unchecked {\n            balanceOf[to] += count;\n        }\n\n        for (uint256 i = id; i \u003c id + count; i++) {\n            /// @dev The following require has been removed because the tokens mint in succession and this function is no longer called post mint phase.\n            // require(ownerOf[i] == address(0), \"ALREADY_MINTED\");\n            ownerOf[i] = to;\n            emit Transfer(address(0), to, i);\n        }\n    }\n\n    /// @notice Withdraws collected funds to the contract owner.\n    function withdraw() public onlyOwner {\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\"\");\n        require(success);\n    }\n\n    /// @notice Permits the contract owner to roll over unminted animated llamas in case of a failed mint-out.\n    function rollOverAnimated(address wallet) public onlyOwner {\n        uint count = animatedSupplyCap - animatedSupply;\n        _bulkMint(wallet, animatedSupply, count);\n        unchecked {\n            animatedSupply += count;\n        }\n    }\n\n    /// @notice Permits the contract owner to roll over unminted static llamas in case of a failed mint-out.\n    function rollOverStatic(address wallet) public onlyOwner {\n        uint count = staticSupplyCap - staticSupply;\n        _bulkMint(wallet, staticSupply, count);\n        unchecked {\n            staticSupply += count;\n        }\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                                UTILS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Returns the greater of two numbers.\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a \u003e= b ? a : b;\n    }\n\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId)\n        public\n        pure\n        override(ERC721, Ownable)\n        returns (bool)\n    {\n        return\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\n            interfaceId == 0x5b5e139f || // ERC165 Interface ID for ERC721Metadata\n            interfaceId == 0x7f5828d0; // ERC165 Interface ID for ERC173\n    }\n}\n"},"Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI\u0027s implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp \u003e\u003e= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\n            value \u003e\u003e= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"}}