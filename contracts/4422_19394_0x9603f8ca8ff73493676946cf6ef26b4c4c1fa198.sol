{"SafeMath.sol":{"content":"pragma solidity \u003e=0.4.25 \u003c0.6.0;\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b \u003e 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b \u003c= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c \u003e= a);\n        return c;\n    }\n}\n"},"Swap.sol":{"content":"pragma solidity \u003e=0.4.25 \u003c0.6.0;\n\nimport \u0027./SafeMath.sol\u0027;\n\ncontract Ownable {\n    address public owner;\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n}\n\ncontract ERC20 {\n    uint256 public totalSupply;\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract Swap is Ownable, ERC20 {\n    using SafeMath for uint256;\n\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n\n    mapping (address =\u003e uint256) private balances;\n\n    constructor() public {\n        name = \"SWAP\";\n        symbol = \"SWAP\";\n        decimals = 18;\n        totalSupply = 3100000000 * 10 ** uint256(decimals);\n        owner = msg.sender;\n        balances[owner] = totalSupply;\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n\n        address _from = msg.sender;\n        uint available = balanceOf(_from);\n\n        if (_value \u003c= available)\n        {\n            balances[_from] = balances[_from].sub(_value);\n            balances[_to] = balances[_to].add(_value);\n            emit Transfer(_from, _to, _value);\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n}"}}