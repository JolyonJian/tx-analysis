{{
  "language": "Solidity",
  "sources": {
    "contracts/Clay.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.9;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\r\nimport \"./ERC721A.sol\";\r\nimport \"./extensions/ERC721AOwnersExplicit.sol\";\r\n\r\n/**\r\n      ___                         ___                 \r\n     /\\__\\                       /\\  \\                \r\n    /:/  /                      /::\\  \\         ___   \r\n   /:/  /                      /:/\\:\\  \\       /|  |  \r\n  /:/  /  ___   ___     ___   /:/ /::\\  \\     |:|  |  \r\n /:/__/  /\\__\\ /\\  \\   /\\__\\ /:/_/:/\\:\\__\\    |:|  |  \r\n \\:\\  \\ /:/  / \\:\\  \\ /:/  / \\:\\/:/  \\/__/  __|:|__|  \r\n  \\:\\  /:/  /   \\:\\  /:/  /   \\::/__/      /::::\\  \\  \r\n   \\:\\/:/  /     \\:\\/:/  /     \\:\\  \\      ~~~~\\:\\  \\ \r\n    \\::/  /       \\::/  /       \\:\\__\\          \\:\\__\\\r\n     \\/__/         \\/__/         \\/__/           \\/__/\r\n\r\n  By Kai from nanoverseHQ\r\n\r\n  Parts borrowed/inspired by:\r\n  MouseDev https://etherscan.io/address/0xbad6186E92002E312078b5a1dAfd5ddf63d3f731#code\r\n  0xinuarashi https://etherscan.io/address/0x4956013f250758B73c3BBa4bC6539db7a0AD6B66#code\r\n */\r\n\r\ninterface IClayTraitModifier {\r\n  function renderAttributes(uint256 _t) external view returns (string memory);\r\n}\r\n\r\ncontract ClayNFT is Ownable, ERC721A, ERC721AOwnersExplicit, ReentrancyGuard {\r\n    using ECDSA for bytes32;\r\n\r\n    uint256 public immutable maxSupply = 3333;\r\n    uint256 public wlPrice = 0.1 ether;\r\n    uint256 public publicPrice = 0.15 ether;\r\n    \r\n    enum SalePhase {\r\n        Locked,\r\n        PreSale,\r\n        PreSaleAndFreeMint,\r\n        PublicSale\r\n    }\r\n    SalePhase public phase = SalePhase.Locked;\r\n    \r\n    address private wlMintSigner;\r\n    address private freeMintSigner;\r\n\r\n    string public baseHTML;\r\n    string public placeholderHTML;\r\n    string public endHTML;\r\n\r\n    string public overrideAnimationUrl;\r\n    string public overrideImageUrl;\r\n\r\n    bool public usePlaceholder = true;\r\n    uint256 public metadataSeed;\r\n    address public traitModifierContract;\r\n\r\n    struct Trait {\r\n        string traitName;\r\n        string traitType;\r\n    }\r\n\r\n    //Mappings\r\n    mapping(uint256 => Trait[]) public traitTypes;    \r\n    mapping(address => uint256) private wlMintAlreadyMint;\r\n    mapping(address => uint256) private freeMintAlreadyMint;\r\n\r\n    //uint arrays\r\n    uint16[][6] TIERS;\r\n\r\n    constructor() ERC721A(\"ClayNFT\", \"ClayNFT\") {\r\n      //Base\r\n      TIERS[0] = [4000, 3000, 2000, 1000];\r\n      //Ore\r\n      TIERS[1] = [5000, 1500, 1500, 750, 750, 200, 200, 90, 10];\r\n      //HasEyes\r\n      TIERS[2] = [8000, 2000];\r\n      //HasMouth\r\n      TIERS[3] = [9000, 1000];\r\n      //BgColor\r\n      TIERS[4] = [2000, 2000, 1500, 1500, 1500, 1500];\r\n      //LargeOre\r\n      TIERS[5] = [7500, 2500];\r\n    }\r\n\r\n    /***\r\n     *     _______  __   __  _______  _______    __   __  _______  ___   ___\r\n     *    |       ||  | |  ||       ||       |  |  | |  ||       ||   | |   |\r\n     *    |_     _||  |_|  ||    _  ||    ___|  |  | |  ||_     _||   | |   |\r\n     *      |   |  |       ||   |_| ||   |___   |  |_|  |  |   |  |   | |   |\r\n     *      |   |  |_     _||    ___||    ___|  |       |  |   |  |   | |   |___\r\n     *      |   |    |   |  |   |    |   |___   |       |  |   |  |   | |       |\r\n     *      |___|    |___|  |___|    |_______|  |_______|  |___|  |___| |_______|\r\n     */\r\n\r\n    // Base64 Encoder\r\n    string internal constant TABLE =\r\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\r\n\r\n    function encodeBase64(bytes memory data)\r\n        internal\r\n        pure\r\n        returns (string memory)\r\n    {\r\n        if (data.length == 0) return \"\";\r\n        string memory table = TABLE;\r\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\r\n        string memory result = new string(encodedLen + 32);\r\n        assembly {\r\n            mstore(result, encodedLen)\r\n            let tablePtr := add(table, 1)\r\n            let dataPtr := data\r\n            let endPtr := add(dataPtr, mload(data))\r\n            let resultPtr := add(result, 32)\r\n            for {\r\n\r\n            } lt(dataPtr, endPtr) {\r\n\r\n            } {\r\n                dataPtr := add(dataPtr, 3)\r\n                let input := mload(dataPtr)\r\n                mstore(\r\n                    resultPtr,\r\n                    shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F))))\r\n                )\r\n                resultPtr := add(resultPtr, 1)\r\n                mstore(\r\n                    resultPtr,\r\n                    shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F))))\r\n                )\r\n                resultPtr := add(resultPtr, 1)\r\n                mstore(\r\n                    resultPtr,\r\n                    shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F))))\r\n                )\r\n                resultPtr := add(resultPtr, 1)\r\n                mstore(\r\n                    resultPtr,\r\n                    shl(248, mload(add(tablePtr, and(input, 0x3F))))\r\n                )\r\n                resultPtr := add(resultPtr, 1)\r\n            }\r\n            switch mod(mload(data), 3)\r\n            case 1 {\r\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\r\n            }\r\n            case 2 {\r\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    function parseInt(string memory _a)\r\n        internal\r\n        pure\r\n        returns (uint8 _parsedInt)\r\n    {\r\n        bytes memory bresult = bytes(_a);\r\n        uint8 mint = 0;\r\n        for (uint8 i = 0; i < bresult.length; i++) {\r\n            if (\r\n                (uint8(uint8(bresult[i])) >= 48) &&\r\n                (uint8(uint8(bresult[i])) <= 57)\r\n            ) {\r\n                mint *= 10;\r\n                mint += uint8(bresult[i]) - 48;\r\n            }\r\n        }\r\n        return mint;\r\n    }\r\n\r\n    function substring(\r\n        string memory str,\r\n        uint256 startIndex,\r\n        uint256 endIndex\r\n    ) internal pure returns (string memory) {\r\n        bytes memory strBytes = bytes(str);\r\n        bytes memory result = new bytes(endIndex - startIndex);\r\n        for (uint256 i = startIndex; i < endIndex; i++) {\r\n            result[i - startIndex] = strBytes[i];\r\n        }\r\n        return string(result);\r\n    }\r\n\r\n    function isNotEmpty(string memory str) internal pure returns (bool) {\r\n      return bytes(str).length > 0;\r\n    }\r\n\r\n    /***\r\n     *     __   __  _______  _______  _______  ______   _______  _______  _______\r\n     *    |  |_|  ||       ||       ||   _   ||      | |   _   ||       ||   _   |\r\n     *    |       ||    ___||_     _||  |_|  ||  _    ||  |_|  ||_     _||  |_|  |\r\n     *    |       ||   |___   |   |  |       || | |   ||       |  |   |  |       |\r\n     *    |       ||    ___|  |   |  |       || |_|   ||       |  |   |  |       |\r\n     *    | ||_|| ||   |___   |   |  |   _   ||       ||   _   |  |   |  |   _   |\r\n     *    |_|   |_||_______|  |___|  |__| |__||______| |__| |__|  |___|  |__| |__|\r\n     */\r\n\r\n    function generateMetadataHash(uint256 _t, uint256 _c)\r\n        internal\r\n        view\r\n        returns (string memory)\r\n    {\r\n        string memory currentHash = \"\";\r\n        for (uint8 i = 0; i < 6; i++) {\r\n            uint16 _randinput = uint16(\r\n                uint256(keccak256(abi.encodePacked(_t, _c))) % 10000\r\n            );\r\n\r\n            currentHash = string(\r\n                abi.encodePacked(currentHash, rarityGen(_randinput, i))\r\n            );\r\n        }\r\n\r\n        return currentHash;\r\n    }\r\n\r\n    function rarityGen(uint256 _randinput, uint8 _rarityTier)\r\n        internal\r\n        view\r\n        returns (string memory)\r\n    {\r\n        uint16 currentLowerBound = 0;\r\n        for (uint8 i = 0; i < TIERS[_rarityTier].length; i++) {\r\n            uint16 thisPercentage = TIERS[_rarityTier][i];\r\n            if (\r\n                _randinput >= currentLowerBound &&\r\n                _randinput < currentLowerBound + thisPercentage\r\n            ) return toString(i);\r\n            currentLowerBound = currentLowerBound + thisPercentage;\r\n        }\r\n\r\n        revert();\r\n    }\r\n\r\n    function renderAttributesFromHash(string memory _hash, uint256 _t) public view returns (string memory) {\r\n      require(_t < totalSupply(), 'Token does not exist');\r\n\r\n      if(usePlaceholder) {\r\n        return '[]';\r\n      }\r\n\r\n      // Allows upgrade to trait metadata in later phases\r\n      if(traitModifierContract != address(0)) {\r\n        IClayTraitModifier c = IClayTraitModifier(traitModifierContract);\r\n        return c.renderAttributes(_t);\r\n      }\r\n\r\n      uint256 seed = uint256(keccak256(abi.encodePacked(_t, metadataSeed))) % 100000;\r\n\r\n      string memory metadataString;\r\n      for (uint8 i = 0; i < 6; i++) {\r\n          uint8 thisTraitIndex = parseInt(substring(_hash, i, i + 1));\r\n\r\n          metadataString = string(\r\n              abi.encodePacked(\r\n                  metadataString,\r\n                  '{\"trait_type\":\"',\r\n                  traitTypes[i][thisTraitIndex].traitType,\r\n                  '\",\"value\":\"',\r\n                  traitTypes[i][thisTraitIndex].traitName,\r\n                  '\"}'\r\n              )\r\n          );\r\n\r\n          metadataString = string(abi.encodePacked(metadataString, \",\"));\r\n      }\r\n\r\n      metadataString = string(\r\n          abi.encodePacked(\r\n              metadataString,\r\n              '{\"trait_type\":\"Seed\",\"value\":\"',\r\n              toString(seed),\r\n              '\"}'\r\n          )\r\n      );\r\n\r\n      return string(abi.encodePacked(\"[\", metadataString, \"]\"));\r\n    }\r\n\r\n    function renderAttributes(uint256 _t) public view returns (string memory) {\r\n      string memory _hash = generateMetadataHash(_t, metadataSeed);\r\n      return renderAttributesFromHash(_hash, _t);\r\n    }\r\n\r\n    string svgPrefix = 'data:image/svg+xml;base64,';\r\n\r\n    function renderSVGFromHash(string memory _hash)\r\n        public\r\n        view\r\n        returns (string memory)\r\n    {\r\n        uint8 baseTraitIndex = parseInt(substring(_hash, 0, 1));\r\n        uint8 oreTraitIndex = parseInt(substring(_hash, 1, 2));\r\n        uint8 largeOreTraitIndex = parseInt(substring(_hash, 5, 6));\r\n\r\n        string[4] memory baseColors = [\r\n            \"rgb(130,101,82)\",\r\n            \"rgb(77,83,87)\",\r\n            \"rgb(121,126,139)\",\r\n            \"black\"\r\n        ];\r\n\r\n        string memory baseColor = baseColors[baseTraitIndex];\r\n\r\n        string[9] memory oreColors = [\r\n            baseColor,\r\n            \"rgb(70.9,195.5,82.8)\",\r\n            \"rgb(181,129,68)\",\r\n            \"rgb(170,218,170)\",\r\n            \"rgb(195,155,65)\",\r\n            \"rgb(255,0,30)\",\r\n            \"rgb(39,100,255)\",\r\n            \"rgb(148,42,235)\",\r\n            \"white\"\r\n        ];\r\n\r\n        string memory oreColor = oreColors[oreTraitIndex];\r\n\r\n        string[2] memory oreSize = [\r\n          '<path d=\"M196.947 188.849l28.058-28.744 11.648 1.592-37.16 38.578z\" fill=\"',\r\n          '<path d=\"M197.01 188.792l28.057-28.743 23.784 3.167-47.196 47.095z\" fill=\"'\r\n        ];\r\n        \r\n        bytes memory baseElement = abi.encodePacked(\r\n          '<path d=\"M322.654 173.053L189.77 155.342l26.702 123.092-101.336 45.107 265.728 21.117-86.728-62.137z\" fill=\"',\r\n          baseColor,\r\n          '\"/>');\r\n\r\n        bytes memory oreElement = abi.encodePacked(\r\n          oreSize[largeOreTraitIndex],\r\n          oreColor,\r\n          '\"/>');\r\n\r\n        bytes memory svgString = \r\n            abi.encodePacked(\r\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"xMinYMin meet\" width=\"500\" height=\"500\"><text font-family=\"sans-serif\" font-size=\"56\" font-weight=\"200\" letter-spacing=\"-1.12\" transform=\"translate(398.63 455.71)\"><tspan x=\"-84.04\" y=\"18.06\">C</tspan><tspan x=\"-46.52\" y=\"18.06\">L</tspan><tspan x=\"-14.21\" y=\"18.06\">A</tspan><tspan x=\"19.9\" y=\"18.06\">Y</tspan><tspan x=\"55.29\" y=\"18.06\">_</tspan></text><text font-family=\"sans-serif\" font-size=\"15\" font-weight=\"300\" transform=\"translate(248 19)\"><tspan x=\"-66.87\" y=\"2.28\">Open to see 3D view</tspan></text>',\r\n                usePlaceholder ? bytes('') : baseElement,\r\n                usePlaceholder ? bytes('') : oreElement,\r\n                '</svg>'\r\n            );\r\n\r\n        return string(abi.encodePacked(svgPrefix, encodeBase64(svgString)));\r\n    }\r\n\r\n    function renderSVG(uint256 tokenId)\r\n      public\r\n      view\r\n      returns (string memory)\r\n    {\r\n      string memory _hash = generateMetadataHash(tokenId, metadataSeed);\r\n      return renderSVGFromHash(_hash);\r\n    }\r\n\r\n    string htmlPrefix = \"data:text/html;base64,\";\r\n    function getOnChainAnimationURIFromHash(string memory _hash, uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        returns (string memory)\r\n    {\r\n      if (usePlaceholder) {\r\n          return\r\n              string(\r\n                  abi.encodePacked(\r\n                      htmlPrefix,\r\n                      encodeBase64(bytes(placeholderHTML))\r\n                  )\r\n              );\r\n      }\r\n\r\n      return\r\n          string(\r\n              abi.encodePacked(\r\n                  htmlPrefix,\r\n                  encodeBase64(bytes(abi.encodePacked(\r\n                    baseHTML, \r\n                    renderAttributesFromHash(_hash, tokenId),\r\n                    endHTML)))\r\n              )\r\n          );\r\n    }\r\n\r\n    function getOnChainAnimationURI(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        returns (string memory)\r\n    {\r\n      string memory _hash = generateMetadataHash(tokenId, metadataSeed);\r\n      return getOnChainAnimationURIFromHash(_hash, tokenId);\r\n    }\r\n\r\n    string public constant _metaHeader = \"data:application/json;base64,\";\r\n\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (string memory)\r\n    {\r\n      string memory _hash = generateMetadataHash(tokenId, metadataSeed);\r\n      string memory _metadata = string(\r\n          abi.encodePacked(\r\n              '{\"name\":\"',\r\n              abi.encodePacked(\"CLAY #\", toString(tokenId)),\r\n              '\", \"description\":\"CLAY is a fully on-chain 3D generative art project. The code is the art, the art is the code.\", \"image\": \"'\r\n          )\r\n      );\r\n\r\n      _metadata = string(\r\n          abi.encodePacked(\r\n              _metadata,\r\n              isNotEmpty(overrideImageUrl) ? string(abi.encodePacked(overrideImageUrl, tokenId)) : renderSVGFromHash(_hash),\r\n              '\",\"attributes\": '\r\n          )\r\n      );\r\n\r\n      _metadata = string(\r\n          abi.encodePacked(_metadata, renderAttributesFromHash(_hash, tokenId))\r\n      );\r\n\r\n      _metadata = string(\r\n          abi.encodePacked(\r\n              _metadata,\r\n              ', \"animation_url\":\"',\r\n              isNotEmpty(overrideAnimationUrl) ? string(abi.encodePacked(overrideAnimationUrl, tokenId)) : getOnChainAnimationURIFromHash(_hash, tokenId),\r\n              '\"}'\r\n          )\r\n      );\r\n\r\n      return\r\n          string(\r\n              abi.encodePacked(_metaHeader, encodeBase64(bytes(_metadata)))\r\n          );\r\n    }\r\n\r\n    /***\r\n     *     _______  _     _  __    _  _______  ______\r\n     *    |       || | _ | ||  |  | ||       ||    _ |\r\n     *    |   _   || || || ||   |_| ||    ___||   | ||\r\n     *    |  | |  ||       ||       ||   |___ |   |_||_\r\n     *    |  |_|  ||       ||  _    ||    ___||    __  |\r\n     *    |       ||   _   || | |   ||   |___ |   |  | |\r\n     *    |_______||__| |__||_|  |__||_______||___|  |_|\r\n     */\r\n\r\n    function devMint(uint256 quantity) external onlyOwner {\r\n        require(totalSupply() + quantity <= maxSupply, \"reached max supply\");\r\n        // It's dev mint so I don't care about gas\r\n        for (uint256 i = 0; i < quantity; i++) {\r\n            _safeMint(msg.sender, 1);\r\n        }\r\n    }\r\n\r\n    //set signers\r\n    function setSigners(address _wlMintSigner, address _freeMintSigner)\r\n        external\r\n        onlyOwner\r\n    {\r\n        wlMintSigner = _wlMintSigner;\r\n        freeMintSigner = _freeMintSigner;\r\n    }\r\n\r\n    function setTraitModifierContract(address _traitModifierContract) public onlyOwner {\r\n        traitModifierContract = _traitModifierContract;\r\n    }\r\n\r\n    function setBaseHTML(string calldata _baseHTML) public onlyOwner {\r\n        baseHTML = _baseHTML;\r\n    }\r\n\r\n    function setEndHTML(string calldata _endHTML) public onlyOwner {\r\n        endHTML = _endHTML;\r\n    }\r\n\r\n    function setPlaceholderHTML(string calldata _placeholderHTML)\r\n        public\r\n        onlyOwner\r\n    {\r\n        placeholderHTML = _placeholderHTML;\r\n    }\r\n\r\n    function setUsePlaceholder(bool _usePlaceholder) public onlyOwner {\r\n        usePlaceholder = _usePlaceholder;\r\n    }\r\n\r\n    function setMetadataSeed(uint256 _metadataSeed) public onlyOwner {\r\n        metadataSeed = _metadataSeed;\r\n    }\r\n    \r\n\r\n    function setOverrideAnimationUrl(string calldata _overrideAnimationUrl) public onlyOwner {\r\n      overrideAnimationUrl = _overrideAnimationUrl;\r\n    }\r\n\r\n    function setOverrideImageUrl(string calldata _overrideImageUrl) public onlyOwner {\r\n      overrideImageUrl = _overrideImageUrl;\r\n    }\r\n\r\n    function setMintPhase(SalePhase phase_) external onlyOwner {\r\n      phase = phase_;\r\n    }\r\n\r\n    function clearTraits() public onlyOwner {\r\n      for (uint256 i = 0; i < 6; i++) {\r\n        delete traitTypes[i];\r\n      }\r\n    }\r\n\r\n    function addTraitType(uint256 _traitTypeIndex, Trait[] memory traits)\r\n        public\r\n        onlyOwner\r\n    {\r\n        for (uint256 i = 0; i < traits.length; i++) {\r\n            traitTypes[_traitTypeIndex].push(\r\n                Trait(traits[i].traitName, traits[i].traitType)\r\n            );\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    function withdraw() public onlyOwner {\r\n      uint256 balance = address(this).balance;\r\n      payable(msg.sender).transfer(balance);\r\n    }\r\n\r\n    /***\r\n     *     __   __  ___   __    _  _______  ___   __    _  _______\r\n     *    |  |_|  ||   | |  |  | ||       ||   | |  |  | ||       |\r\n     *    |       ||   | |   |_| ||_     _||   | |   |_| ||    ___|\r\n     *    |       ||   | |       |  |   |  |   | |       ||   | __\r\n     *    |       ||   | |  _    |  |   |  |   | |  _    ||   ||  |\r\n     *    | ||_|| ||   | | | |   |  |   |  |   | | | |   ||   |_| |\r\n     *    |_|   |_||___| |_|  |__|  |___|  |___| |_|  |__||_______|\r\n     */\r\n     \r\n    function publicSaleMint()\r\n      external\r\n      payable\r\n      callerIsUser\r\n    {\r\n        require(\r\n            phase == SalePhase.PublicSale,\r\n            \"Public sale minting is not active\"\r\n        );\r\n        require(\r\n            1 + totalSupply() <= maxSupply,\r\n            \"Purchase would exceed max tokens\"\r\n        );\r\n        require(\r\n            publicPrice <= msg.value,\r\n            \"Amount sent is insufficient\"\r\n        );\r\n\r\n        _safeMint(msg.sender, 1);\r\n    }\r\n\r\n    function wlMint(bytes calldata signature)\r\n        external\r\n        payable\r\n        callerIsUser\r\n    {\r\n        require(phase == SalePhase.PreSale || phase == SalePhase.PreSaleAndFreeMint,\r\n          \"Presale minting not active\");\r\n        require(\r\n            1 + totalSupply() <= maxSupply,\r\n            \"Purchase would exceed max tokens\"\r\n        );\r\n        require(wlPrice <= msg.value, \"Amount sent is insufficient\");\r\n\r\n        require(\r\n            wlMintSigner ==\r\n                keccak256(\r\n                    abi.encodePacked(\r\n                        \"\\x19Ethereum Signed Message:\\n32\",\r\n                        bytes32(uint256(uint160(msg.sender)))\r\n                    )\r\n                ).recover(signature),\r\n            \"Signer address mismatch.\"\r\n        );\r\n\r\n        require(wlMintAlreadyMint[msg.sender] == 0, \"Already minted\");\r\n\r\n        wlMintAlreadyMint[msg.sender] = 1;\r\n        _safeMint(msg.sender, 1);\r\n    }\r\n\r\n    function freeMint(bytes calldata signature)\r\n      external\r\n      payable\r\n    {\r\n        require(phase == SalePhase.PreSaleAndFreeMint, \"Free mint not active\");\r\n        require(\r\n            1 + totalSupply() <= maxSupply,\r\n            \"Purchase would exceed max tokens\"\r\n        );\r\n\r\n        require(\r\n            freeMintSigner ==\r\n                keccak256(\r\n                    abi.encodePacked(\r\n                        \"\\x19Ethereum Signed Message:\\n32\",\r\n                        bytes32(uint256(uint160(msg.sender)))\r\n                    )\r\n                ).recover(signature),\r\n            \"Signer address mismatch.\"\r\n        );\r\n\r\n        require(freeMintAlreadyMint[msg.sender] == 0, \"Already minted\");\r\n\r\n        _safeMint(msg.sender, 1);\r\n        freeMintAlreadyMint[msg.sender] = 1;\r\n    }\r\n\r\n    /***\r\n     *     __   __  ___   _______  _______\r\n     *    |  |_|  ||   | |       ||       |\r\n     *    |       ||   | |  _____||       |\r\n     *    |       ||   | | |_____ |       |\r\n     *    |       ||   | |_____  ||      _|\r\n     *    | ||_|| ||   |  _____| ||     |_\r\n     *    |_|   |_||___| |_______||_______|\r\n     */\r\n\r\n    function setOwnersExplicit(uint256 quantity)\r\n      external\r\n      onlyOwner\r\n      nonReentrant\r\n    {\r\n        _setOwnersExplicit(quantity);\r\n    }\r\n\r\n    function getOwnershipData(uint256 tokenId)\r\n        external\r\n        view\r\n        returns (TokenOwnership memory)\r\n    {\r\n        return ownershipOf(tokenId);\r\n    }\r\n\r\n    function tokensOfOwner(\r\n        address _owner,\r\n        uint256 startId,\r\n        uint256 endId\r\n    ) external view returns (uint256[] memory) {\r\n        uint256 tokenCount = balanceOf(_owner);\r\n        if (tokenCount == 0) {\r\n            return new uint256[](0);\r\n        } else {\r\n            uint256[] memory result = new uint256[](tokenCount);\r\n            uint256 index = 0;\r\n            for (uint256 tokenId = startId; tokenId < endId; tokenId++) {\r\n                if (index == tokenCount) break;\r\n\r\n                if (ownerOf(tokenId) == _owner) {\r\n                    result[index] = tokenId;\r\n                    index++;\r\n                }\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }\r\n\r\n    modifier callerIsUser() {\r\n      require(tx.origin == msg.sender, \"The caller is another contract\");\r\n      _;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "contracts/ERC721A.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// Creator: Chiru Labs\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\r\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\r\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\r\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol';\r\nimport '@openzeppelin/contracts/utils/Address.sol';\r\nimport '@openzeppelin/contracts/utils/Context.sol';\r\nimport '@openzeppelin/contracts/utils/Strings.sol';\r\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\r\n\r\nerror ApprovalCallerNotOwnerNorApproved();\r\nerror ApprovalQueryForNonexistentToken();\r\nerror ApproveToCaller();\r\nerror ApprovalToCurrentOwner();\r\nerror BalanceQueryForZeroAddress();\r\nerror MintedQueryForZeroAddress();\r\nerror BurnedQueryForZeroAddress();\r\nerror MintToZeroAddress();\r\nerror MintZeroQuantity();\r\nerror OwnerIndexOutOfBounds();\r\nerror OwnerQueryForNonexistentToken();\r\nerror TokenIndexOutOfBounds();\r\nerror TransferCallerNotOwnerNorApproved();\r\nerror TransferFromIncorrectOwner();\r\nerror TransferToNonERC721ReceiverImplementer();\r\nerror TransferToZeroAddress();\r\nerror URIQueryForNonexistentToken();\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata and Enumerable extension. Built to optimize for lower gas during batch mints.\r\n *\r\n * Assumes serials are sequentially minted starting at 0 (e.g. 0, 1, 2, 3..).\r\n *\r\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\r\n *\r\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\r\n */\r\ncontract ERC721A is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Compiler will pack this into a single 256bit word.\r\n    struct TokenOwnership {\r\n        // The address of the owner.\r\n        address addr;\r\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\r\n        uint64 startTimestamp;\r\n        // Whether the token has been burned.\r\n        bool burned;\r\n    }\r\n\r\n    // Compiler will pack this into a single 256bit word.\r\n    struct AddressData {\r\n        // Realistically, 2**64-1 is more than enough.\r\n        uint64 balance;\r\n        // Keeps track of mint count with minimal overhead for tokenomics.\r\n        uint64 numberMinted;\r\n        // Keeps track of burn count with minimal overhead for tokenomics.\r\n        uint64 numberBurned;\r\n    }\r\n\r\n    // The tokenId of the next token to be minted.\r\n    uint256 internal _currentIndex;\r\n\r\n    // The number of tokens burned.\r\n    uint256 internal _burnCounter;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to ownership details\r\n    // An empty struct value does not necessarily mean the token is unowned. See ownershipOf implementation for details.\r\n    mapping(uint256 => TokenOwnership) internal _ownerships;\r\n\r\n    // Mapping owner address to address data\r\n    mapping(address => AddressData) private _addressData;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        // Counter underflow is impossible as _burnCounter cannot be incremented\r\n        // more than _currentIndex times\r\n        unchecked {\r\n            return _currentIndex - _burnCounter;    \r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view override returns (uint256) {\r\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\r\n        return uint256(_addressData[owner].balance);\r\n    }\r\n\r\n    function _numberMinted(address owner) internal view returns (uint256) {\r\n        if (owner == address(0)) revert MintedQueryForZeroAddress();\r\n        return uint256(_addressData[owner].numberMinted);\r\n    }\r\n\r\n    function _numberBurned(address owner) internal view returns (uint256) {\r\n        if (owner == address(0)) revert BurnedQueryForZeroAddress();\r\n        return uint256(_addressData[owner].numberBurned);\r\n    }\r\n\r\n    /**\r\n     * Gas spent here starts off proportional to the maximum mint batch size.\r\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\r\n     */\r\n    function ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\r\n        uint256 curr = tokenId;\r\n\r\n        unchecked {\r\n            if (curr < _currentIndex) {\r\n                TokenOwnership memory ownership = _ownerships[curr];\r\n                if (!ownership.burned) {\r\n                    if (ownership.addr != address(0)) {\r\n                        return ownership;\r\n                    }\r\n                    // Invariant: \r\n                    // There will always be an ownership that has an address and is not burned \r\n                    // before an ownership that does not have an address and is not burned.\r\n                    // Hence, curr will not underflow.\r\n                    while (true) {\r\n                        curr--;\r\n                        ownership = _ownerships[curr];\r\n                        if (ownership.addr != address(0)) {\r\n                            return ownership;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        revert OwnerQueryForNonexistentToken();\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view override returns (address) {\r\n        return ownershipOf(tokenId).addr;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return '';\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public override {\r\n        address owner = ERC721A.ownerOf(tokenId);\r\n        if (to == owner) revert ApprovalToCurrentOwner();\r\n\r\n        if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {\r\n            revert ApprovalCallerNotOwnerNorApproved();\r\n        }\r\n\r\n        _approve(to, tokenId, owner);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view override returns (address) {\r\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public override {\r\n        if (operator == _msgSender()) revert ApproveToCaller();\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, '');\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        _transfer(from, to, tokenId);\r\n        if (!_checkOnERC721Received(from, to, tokenId, _data)) {\r\n            revert TransferToNonERC721ReceiverImplementer();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     */\r\n    function _exists(uint256 tokenId) internal view returns (bool) {\r\n        return tokenId < _currentIndex && !_ownerships[tokenId].burned;\r\n    }\r\n\r\n    function _safeMint(address to, uint256 quantity) internal {\r\n        _safeMint(to, quantity, '');\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\r\n     * - `quantity` must be greater than 0.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 quantity,\r\n        bytes memory _data\r\n    ) internal {\r\n        _mint(to, quantity, _data, true);\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `quantity` tokens and transfers them to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `quantity` must be greater than 0.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(\r\n        address to,\r\n        uint256 quantity,\r\n        bytes memory _data,\r\n        bool safe\r\n    ) internal {\r\n        uint256 startTokenId = _currentIndex;\r\n        if (to == address(0)) revert MintToZeroAddress();\r\n        if (quantity == 0) revert MintZeroQuantity();\r\n\r\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\r\n\r\n        // Overflows are incredibly unrealistic.\r\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\r\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\r\n        unchecked {\r\n            _addressData[to].balance += uint64(quantity);\r\n            _addressData[to].numberMinted += uint64(quantity);\r\n\r\n            _ownerships[startTokenId].addr = to;\r\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\r\n\r\n            uint256 updatedIndex = startTokenId;\r\n\r\n            for (uint256 i; i < quantity; i++) {\r\n                emit Transfer(address(0), to, updatedIndex);\r\n                if (safe && !_checkOnERC721Received(address(0), to, updatedIndex, _data)) {\r\n                    revert TransferToNonERC721ReceiverImplementer();\r\n                }\r\n                updatedIndex++;\r\n            }\r\n\r\n            _currentIndex = updatedIndex;\r\n        }\r\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) private {\r\n        TokenOwnership memory prevOwnership = ownershipOf(tokenId);\r\n\r\n        bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr ||\r\n            isApprovedForAll(prevOwnership.addr, _msgSender()) ||\r\n            getApproved(tokenId) == _msgSender());\r\n\r\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\r\n        if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\r\n        if (to == address(0)) revert TransferToZeroAddress();\r\n\r\n        _beforeTokenTransfers(from, to, tokenId, 1);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId, prevOwnership.addr);\r\n\r\n        // Underflow of the sender's balance is impossible because we check for\r\n        // ownership above and the recipient's balance can't realistically overflow.\r\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\r\n        unchecked {\r\n            _addressData[from].balance -= 1;\r\n            _addressData[to].balance += 1;\r\n\r\n            _ownerships[tokenId].addr = to;\r\n            _ownerships[tokenId].startTimestamp = uint64(block.timestamp);\r\n\r\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\r\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\r\n            uint256 nextTokenId = tokenId + 1;\r\n            if (_ownerships[nextTokenId].addr == address(0)) {\r\n                // This will suffice for checking _exists(nextTokenId),\r\n                // as a burned slot cannot contain the zero address.\r\n                if (nextTokenId < _currentIndex) {\r\n                    _ownerships[nextTokenId].addr = prevOwnership.addr;\r\n                    _ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp;\r\n                }\r\n            }\r\n        }\r\n\r\n        emit Transfer(from, to, tokenId);\r\n        _afterTokenTransfers(from, to, tokenId, 1);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        TokenOwnership memory prevOwnership = ownershipOf(tokenId);\r\n\r\n        _beforeTokenTransfers(prevOwnership.addr, address(0), tokenId, 1);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId, prevOwnership.addr);\r\n\r\n        // Underflow of the sender's balance is impossible because we check for\r\n        // ownership above and the recipient's balance can't realistically overflow.\r\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\r\n        unchecked {\r\n            _addressData[prevOwnership.addr].balance -= 1;\r\n            _addressData[prevOwnership.addr].numberBurned += 1;\r\n\r\n            // Keep track of who burned the token, and the timestamp of burning.\r\n            _ownerships[tokenId].addr = prevOwnership.addr;\r\n            _ownerships[tokenId].startTimestamp = uint64(block.timestamp);\r\n            _ownerships[tokenId].burned = true;\r\n\r\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\r\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\r\n            uint256 nextTokenId = tokenId + 1;\r\n            if (_ownerships[nextTokenId].addr == address(0)) {\r\n                // This will suffice for checking _exists(nextTokenId),\r\n                // as a burned slot cannot contain the zero address.\r\n                if (nextTokenId < _currentIndex) {\r\n                    _ownerships[nextTokenId].addr = prevOwnership.addr;\r\n                    _ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp;\r\n                }\r\n            }\r\n        }\r\n\r\n        emit Transfer(prevOwnership.addr, address(0), tokenId);\r\n        _afterTokenTransfers(prevOwnership.addr, address(0), tokenId, 1);\r\n\r\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\r\n        unchecked { \r\n            _burnCounter++;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(\r\n        address to,\r\n        uint256 tokenId,\r\n        address owner\r\n    ) private {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(owner, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver(to).onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert TransferToNonERC721ReceiverImplementer();\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\r\n     * And also called before burning one token.\r\n     *\r\n     * startTokenId - the first token id to be transferred\r\n     * quantity - the amount to be transferred\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, `tokenId` will be burned by `from`.\r\n     * - `from` and `to` are never both zero.\r\n     */\r\n    function _beforeTokenTransfers(\r\n        address from,\r\n        address to,\r\n        uint256 startTokenId,\r\n        uint256 quantity\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\r\n     * minting.\r\n     * And also called after one token has been burned.\r\n     *\r\n     * startTokenId - the first token id to be transferred\r\n     * quantity - the amount to be transferred\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` has been minted for `to`.\r\n     * - When `to` is zero, `tokenId` has been burned by `from`.\r\n     * - `from` and `to` are never both zero.\r\n     */\r\n    function _afterTokenTransfers(\r\n        address from,\r\n        address to,\r\n        uint256 startTokenId,\r\n        uint256 quantity\r\n    ) internal virtual {}\r\n}\r\n"
    },
    "contracts/extensions/ERC721AOwnersExplicit.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// Creator: Chiru Labs\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport '../ERC721A.sol';\r\n\r\nerror AllOwnershipsHaveBeenSet();\r\nerror QuantityMustBeNonZero();\r\nerror NoTokensMintedYet();\r\n\r\nabstract contract ERC721AOwnersExplicit is ERC721A {\r\n    uint256 public nextOwnerToExplicitlySet;\r\n\r\n    /**\r\n     * @dev Explicitly set `owners` to eliminate loops in future calls of ownerOf().\r\n     */\r\n    function _setOwnersExplicit(uint256 quantity) internal {\r\n        if (quantity == 0) revert QuantityMustBeNonZero();\r\n        if (_currentIndex == 0) revert NoTokensMintedYet();\r\n        uint256 _nextOwnerToExplicitlySet = nextOwnerToExplicitlySet;\r\n        if (_nextOwnerToExplicitlySet >= _currentIndex) revert AllOwnershipsHaveBeenSet();\r\n\r\n        // Index underflow is impossible.\r\n        // Counter or index overflow is incredibly unrealistic.\r\n        unchecked {\r\n            uint256 endIndex = _nextOwnerToExplicitlySet + quantity - 1;\r\n\r\n            // Set the end index to be the last token index\r\n            if (endIndex + 1 > _currentIndex) {\r\n                endIndex = _currentIndex - 1;\r\n            }\r\n\r\n            for (uint256 i = _nextOwnerToExplicitlySet; i <= endIndex; i++) {\r\n                if (_ownerships[i].addr == address(0) && !_ownerships[i].burned) {\r\n                    TokenOwnership memory ownership = ownershipOf(i);\r\n                    _ownerships[i].addr = ownership.addr;\r\n                    _ownerships[i].startTimestamp = ownership.startTimestamp;\r\n                }\r\n            }\r\n\r\n            nextOwnerToExplicitlySet = endIndex + 1;\r\n        }\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}