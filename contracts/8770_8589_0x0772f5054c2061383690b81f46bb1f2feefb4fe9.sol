{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "london",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Trees proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = _efficientHash(computedHash, proofElement);\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = _efficientHash(proofElement, computedHash);\n            }\n        }\n        return computedHash;\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/BigTownChef/ChefAvatar.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"erc721a/contracts/ERC721A.sol\";\nimport './Sale/ChefSaleManager.sol';\nimport './Sale/ChefRevealProvider.sol';\n\ncontract ChefAvatar is ERC721A, Ownable {\n    using Strings for uint256;\n\n    event RevealProviderChanged(address newRevealProvider);\n    event SaleManagerChanged(address newSaleManager);\n    \n    ChefRevealProvider public chefRevealProvider;\n    ChefSaleManager public saleManager;\n\n    uint256 public immutable maxSupply;\n    string private _baseTokenURI;\n    uint256 public revealOffset; // It will be used to shuffle IPFS files as (revealOffset + tokenId) % maxSupply\n\n    constructor(\n        uint256 _reserved,\n        uint256 _maxSupply,\n        address treasury,\n        string memory name,\n\t\tstring memory symbol,\n        string memory baseTokenURI\n    )\n        ERC721A(name, symbol)\n    {\n        require(_reserved <= _maxSupply, \"ChefAvatar: reserved must be less than or equal to maxSupply\");\n\n        maxSupply = _maxSupply;\n        _baseTokenURI = baseTokenURI;\n\n        if(_reserved > 0) { //not all projects have reserved tokens\n            _mint(treasury, _reserved);\n        }\n    }\n\n    function setChefRevealProvider(address _chefRevealProvider) external onlyOwner {\n        chefRevealProvider = ChefRevealProvider(_chefRevealProvider);\n\n        emit RevealProviderChanged(_chefRevealProvider);\n    }\n    \n    function setChefSaleManager(address _chefSaleManager) external onlyOwner {\n        saleManager = ChefSaleManager(_chefSaleManager);\n\n        emit SaleManagerChanged(_chefSaleManager);\n    }\n\n    function _baseURI() internal view virtual override returns (string memory) {\n        return _baseTokenURI;\n    }\n\n    function setBaseTokenURI(string calldata newTokenURI) onlyOwner public {\n        _baseTokenURI = newTokenURI;\n    }\n\n    function exists(uint256 tokenId) external view returns (bool) {\n        return _exists(tokenId);\n    }\n\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\n        require(_exists(tokenId), \"nonexistent token\");\n\n        uint256 offsetId = revealOffset == 0\n            ? maxSupply // tokenId will always be less than maxSupply\n            : tokenId;\n\n        return string(abi.encodePacked(_baseTokenURI, offsetId.toString()));\n    }\n\n    function _mint(address to, uint256 quantity) private {\n        require(totalSupply() + quantity <= maxSupply, \"max supply reached\");\n        ERC721A._mint(to, quantity, '', true);\n    }\n\n    function mint(uint256 quantity, address to) public {\n        require(msg.sender == address(saleManager), \"only saleManager can mint\");\n\n        _mint(to, quantity);\n    }\n\n\n    /// @notice Request randomness from a user-provided seed\n    /// @dev Only callable by the Owner.\n    /// @param userProvidedSeed: extra entrpy for the VRF\n    function callReveal(uint256 userProvidedSeed) external onlyOwner {\n        require(revealOffset == 0, \"Reveal already called\");\n\n        chefRevealProvider.getRandomNumber(userProvidedSeed);\n    }\n    \n    function reveal(uint256 randomness) external {\n        require(msg.sender == address(chefRevealProvider), \"Only the Chef Reveal Provider can reveal\");\n        require(revealOffset == 0, \"Reveal already called\");\n\n        revealOffset = randomness;\n    }\n}\n"
    },
    "contracts/BigTownChef/Sale/ChefRevealProvider.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../../Chainlink/VRFConsumerBase.sol\";\nimport \"../ChefAvatar.sol\";\n\n/// @title A title that should describe the contract/interface\n/// https://docs.chain.link/docs/vrf-contracts/\n/// You can get the keyhash and vrfCoordinator from here https://docs.chain.link/docs/vrf-contracts/\ncontract ChefRevealProvider is VRFConsumerBase, Ownable {\n  using SafeERC20 for IERC20;\n\n  uint256 public fee;\n  uint256 public randomNumber;\n  bytes32 public immutable keyHash;\n  bytes32 public requestId;\n\n  event FeeChanged(uint256 newFee);\n\n  ChefAvatar public immutable chefAvatar;\n\n  /// @dev Ctor\n  /// @param VRFCoordinator: address of the VRF coordinator\n  /// @param LINKToken: address of the LINK token\n  constructor(\n    address VRFCoordinator,\n    address LINKToken,\n    bytes32 _keyHash,\n    uint256 _fee,\n    ChefAvatar _chefAvatar\n  )\n    VRFConsumerBase(\n\t\t\tVRFCoordinator, // VRF Coordinator\n\t\t\tLINKToken  // LINK Token\n\t\t)\n  {\n    keyHash = _keyHash;\n    fee = _fee;\n    chefAvatar = _chefAvatar;\n  }\n\n  /// @notice Change the fee\n  /// @param _fee: new fee (in LINK)\n  function setFee(uint256 _fee) external onlyOwner {\n    fee = _fee;\n\n    emit FeeChanged(_fee);\n  }\n\n  /// @notice It allows the admin to withdraw tokens sent to the contract\n  /// @dev Only callable by owner.\n  /// @param token: the address of the token to withdraw\n  /// @param amount: the number of token amount to withdraw\n  function withdrawTokens(address token, uint256 amount) external onlyOwner {\n    IERC20(token).safeTransfer(_msgSender(), amount);\n  }\n\n  /// @notice Request randomness from a user-provided seed\n  /// @dev Only callable by RevealConsumer.\n  /// @param userProvidedSeed: extra entrpy for the VRF\n  function getRandomNumber(uint256 userProvidedSeed) external {\n    require(msg.sender == address(chefAvatar), \"only ChefAvatar\");\n    require(LINK.balanceOf(address(this)) >= fee, \"insufficient LINK tokens\");\n    require(requestId == bytes32(0), \"request already made\");\n\n    requestId = requestRandomness(keyHash, fee, userProvidedSeed);\n  }\n\n  /// @notice Callback function used by ChainLink's VRF Coordinator\n  function fulfillRandomness(bytes32 incomingRequestId, uint256 randomness) internal override {\n    require(incomingRequestId == requestId, \"Wrong requestId\");\n\n    chefAvatar.reveal(randomness);\n  }\n}\n"
    },
    "contracts/BigTownChef/Sale/ChefSaleManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '../ChefAvatar.sol';\n\n/// @title Tickets that exchange to a Chef. Sold during the Big Town Chef sale.\n/// @author Valerio Leo @valeriohq\n\ncontract ChefSaleManager is Ownable {\n\tuint256 public presalePrice;\n\tuint256 public publicFixedPrice;\n\tChefAvatar public chefAvatar;\n\taddress public treasury;\n\tuint256 public presaleStart = block.timestamp + 180 days; // default to half a year from now\n\tuint256 public presaleLength = 1 days; // default to 1 day after presaleStart\n\tuint256 public publicStart = block.timestamp + 180 days; // default to half a year from now\n\tuint256 public publicSaleMaxPurchaseQuantity = 3;\n\tbytes32 public merkleRoot;\n\n\tevent MerkleRootChanged(bytes32 newMerkleRoot);\n\tevent TreasuryChanged(address newTreasury);\n\tevent PricesChanged(uint256 newPresalePrice, uint256 newPublicFixedPrice);\n\tevent PresaleConfigChanged(uint256 newPresaleStart, uint256 newPresaleLength);\n\tevent PublicSaleConfigChanged(uint256 newPublicStart);\n\tevent PublicSaleMaxPurchaseQuantityChanged(uint256 newPublicSaleMaxPurchaseQuantity);\n\tevent PublicSalePricingModelChanged(PublicSalePricingModel newPublicSalePricingModel);\n\tevent DutchAuctionConfigurationChanged(\n\t\tuint256 newDutchStartPrice,\n\t\tuint256 newDutchEndPrice,\n\t\tuint256 newDutchPriceStepDrecrease,\n\t\tuint256 newDutchStartTime,\n\t\tuint256 newDutchStep\n\t);\n\n\n\tstruct DutchAuction {\n\t\tuint256 dutchStartPrice;\n\t\tuint256 dutchEndPrice;\n\t\tuint256 dutchPriceStepDrecrease;\n\t\tuint256 dutchStartTime;\n\t\tuint256 dutchStep;\n\t}\n\n\tDutchAuction public dutchAuction;\n\n\tmapping(address => uint256) public publicSalePurchasesPerAddress;\n\tmapping(address => uint) public presaleChefs;\n\n\tenum SalePhases{\n\t\tNO_SALE,\n\t\tPRESALE,\n\t\tPUBLIC_SALE\n\t}\n\n\tenum PublicSalePricingModel{\n\t\tFIXED_PRICE,\n\t\tDUTCH_AUCTION\n\t}\n\n\tPublicSalePricingModel public publicSalePricingModel;\n\n\tconstructor(\n\t\tuint256 _presalePrice,\n\t\tuint256 _publicPrice,\n\t\tChefAvatar _chefAvatar,\n\t\taddress _treasury\n\t) {\n\t\tpresalePrice = _presalePrice;\n\t\tpublicFixedPrice = _publicPrice;\n\t\tchefAvatar = _chefAvatar;\n\t\ttreasury = _treasury;\n\t}\n\n\t/// @notice It changes the merkleRoot variable.\n\t/// @dev Only callable by owner.\n\t/// @param _merkleRoot: the new merkle root\n\tfunction setMerkleRoot(bytes32 _merkleRoot) external onlyOwner {\n\t\tmerkleRoot = _merkleRoot;\n\n\t\temit MerkleRootChanged(_merkleRoot);\n\t}\n\n\t/// @notice It changes the treasury treasury that receives the payments.\n\t/// @dev Only callable by owner.\n\t/// @param _treasury: the new treasury address\n\tfunction setTreasury(address _treasury) external onlyOwner {\n\t\ttreasury = _treasury;\n\n\t\temit TreasuryChanged(_treasury);\n\t}\n\n\t/// @notice It updates the presale and public sale prices.\n\t/// @dev Only callable by owner.\n\t/// @param _presalePrice: the new presale price\n\t/// @param _publicPrice: the new public sale price\n\tfunction setPrices(uint256 _presalePrice, uint256 _publicPrice) external onlyOwner {\n\t\tpresalePrice = _presalePrice;\n\t\tpublicFixedPrice = _publicPrice;\n\n\t\temit PricesChanged(_presalePrice, _publicPrice);\n\t}\n\n\t/// @notice It updates the start time and length of the presale\n\t/// @dev Only callable by owner.\n\t/// @param _presaleStart: the new presale start timestamp\n\t/// @param _presaleLength: the new presale length in seconds\n\tfunction setPresaleConfig(uint256 _presaleStart, uint256 _presaleLength) external onlyOwner {\n\t\tpresaleStart = _presaleStart;\n\t\tpresaleLength = _presaleLength;\n\n\t\temit PresaleConfigChanged(_presaleStart, _presaleLength);\n\t}\n\n\t/// @notice It updates the start time of the public sale\n\t/// @dev Only callable by owner.\n\t/// @param _publicStart: the new public sale start timestamp\n\tfunction setPublicConfig(uint256 _publicStart) external onlyOwner {\n\t\tpublicStart = _publicStart;\n\n\t\temit PublicSaleConfigChanged(_publicStart);\n\t}\n\t\n\t/// @notice It updates the max purchase quantity of the public sale\n\t/// @dev Only callable by owner.\n\t/// @param newAmount: the new max amount users can mint during public sale\n\tfunction setPublicSaleMaxPurchaseQuantity(uint256 newAmount) external onlyOwner {\n\t\tpublicSaleMaxPurchaseQuantity = newAmount;\n\n\t\temit PublicSaleMaxPurchaseQuantityChanged(newAmount);\n\t}\n\n\t/// @notice It updates the pricing model of the public sale.\n\t/// @dev Only callable by owner. Parameter can be one of 0 or 1. 0 for fixed price, 1 for dutch auction.\n\t/// @param pricingModel: the new pricing model of the public sale\n\tfunction setPublicSalePricingModel(PublicSalePricingModel pricingModel) external onlyOwner {\n\t\tpublicSalePricingModel = pricingModel;\n\n\t\temit PublicSalePricingModelChanged(pricingModel);\n\t}\n\n\t/// @notice It updates the dutch auction settings.\n\t/// @dev Only callable by owner.\n\t/// @param _dutchStartPrice: the new start price\n\t/// @param _dutchEndPrice: the new end price\n\t/// @param _dutchPriceStepDrecrease: the new price decrease step\n\t/// @param _dutchStartTime: the new start timestamp in seconds\n\t/// @param _dutchStep: the new step in seconds for the price decrease\n\tfunction configureDutch(\n\t\tuint256 _dutchStartPrice,\n\t\tuint256 _dutchEndPrice,\n\t\tuint256 _dutchPriceStepDrecrease,\n\t\tuint256 _dutchStartTime,\n\t\tuint256 _dutchStep\n\t) external onlyOwner {\n\t\trequire(_dutchStartPrice > _dutchEndPrice, \"ChefSaleManager: dutchStartPrice must be greater than dutchEndPrice\");\n\t\trequire(_dutchPriceStepDrecrease > 0, \"ChefSaleManager: dutchPriceStepDrecrease must be greater than 0\");\n\t\trequire(_dutchStartTime >= block.timestamp, \"ChefSaleManager: dutchStartTime must be greater than or equal to block.timestamp\");\n\t\trequire(_dutchStep > 0, \"ChefSaleManager: dutchStep must be greater than 0\");\n\t\trequire(_dutchStartTime > _dutchStep, \"ChefSaleManager: dutchStartTime must be greater than dutchStep\");\n\n\t\tdutchAuction.dutchStartPrice = _dutchStartPrice;\n\t\tdutchAuction.dutchEndPrice = _dutchEndPrice;\n\t\tdutchAuction.dutchPriceStepDrecrease = _dutchPriceStepDrecrease;\n\t\tdutchAuction.dutchStartTime = _dutchStartTime;\n\t\tdutchAuction.dutchStep = _dutchStep;\n\n\t\temit DutchAuctionConfigurationChanged(\n\t\t\t_dutchStartPrice,\n\t\t\t_dutchEndPrice,\n\t\t\t_dutchPriceStepDrecrease,\n\t\t\t_dutchStartTime,\n\t\t\t_dutchStep\n\t\t);\n\t}\n\n\tfunction _getDutchAuctionPrice() internal view returns (uint256) {\n\t\tuint256 elapsed = block.timestamp - dutchAuction.dutchStartTime;\n\t\tuint256 stepsElapsed = elapsed / dutchAuction.dutchStep;\n\t\tuint256 priceDecrease = stepsElapsed * dutchAuction.dutchPriceStepDrecrease;\n\n\t\tif(priceDecrease > dutchAuction.dutchStartPrice) {\n\t\t\treturn dutchAuction.dutchEndPrice;\n\t\t}\n\n\t\tuint256 currPrice = dutchAuction.dutchStartPrice - priceDecrease;\n\n\t\treturn currPrice >= dutchAuction.dutchEndPrice ? currPrice : dutchAuction.dutchEndPrice;\n\t}\n\n\t/// @notice It returns the current price per-nft taking into account the currect sale phase and pricing model\n\tfunction getCurrentPrice() public view returns (uint256) {\n\t\tSalePhases phase = getSalePhase();\n\n\t\tif(phase == SalePhases.PRESALE) {\n\t\t\treturn presalePrice;\n\t\t}\n\t\tif(phase == SalePhases.PUBLIC_SALE && publicSalePricingModel == PublicSalePricingModel.DUTCH_AUCTION) {\n\t\t\treturn _getDutchAuctionPrice();\n\t\t}\n\n\t\tif(phase == SalePhases.PUBLIC_SALE && publicSalePricingModel == PublicSalePricingModel.FIXED_PRICE) {\n\t\t\treturn publicFixedPrice;\n\t\t}\n\n\t\trequire(false, \"Invalid phase\"); // stop execution if reach here\n\t}\n\n\tfunction _transferFunds(uint256 totalCost) private {\n\t\trequire(msg.value == totalCost, \"wrong amount\");\n\t\t(bool success, ) = payable(treasury).call{value: totalCost}(\"\");\n\t\trequire(success, \"transfer failed\");\n\t}\n\n\tfunction admitPresaleUser(uint256 quantity, uint256 maxQuantity, bytes32[] calldata proofs) internal returns (bool) {\n\t\tbool isProofValid = MerkleProof.verify(\n\t\t\tproofs,\n\t\t\tmerkleRoot,\n\t\t\tkeccak256(\n\t\t\t\tabi.encodePacked(\n\t\t\t\t\tkeccak256(abi.encodePacked(msg.sender, maxQuantity))\n\t\t\t\t)\n\t\t\t)\n\t\t);\n\n\t\tpresaleChefs[msg.sender] += quantity;\n\n\t\treturn presaleChefs[msg.sender] <= maxQuantity && isProofValid;\n\t}\n\t\n\tfunction admitPublicUser(uint256 quantity) internal returns (bool) {\n\t\tpublicSalePurchasesPerAddress[msg.sender] += quantity;\n\n\t\treturn publicSalePurchasesPerAddress[msg.sender] <= publicSaleMaxPurchaseQuantity;\n\t}\n\n\t/// @notice It returns the current sale phase\n\tfunction getSalePhase() view public returns (SalePhases) {\n\t\tif (block.timestamp < presaleStart) {\n\t\t\treturn SalePhases.NO_SALE;\n\t\t}\n\t\tif (block.timestamp < presaleStart + presaleLength) {\n\t\t\treturn SalePhases.PRESALE;\n\t\t}\n\n\t\tif(block.timestamp >= publicStart) {\n\t\t\treturn SalePhases.PUBLIC_SALE;\n\t\t}\n\n\t\treturn SalePhases.NO_SALE;\n\t}\n\n\t/// @notice It will purchase the given amount of tokens for the user during the presale phase\n\t/// @dev Only callable by during the presale phase. The correct amount of ETH should be sent based on the current price or the call will revert`\n\t/// @param quantity: the amount of tokens to purchase\n\t/// @param maxQuantity: the maximum amount of tokens this user can purchase during presale\n\t/// @param proofs: the merkle proofs for the current user\n\tfunction presaleBuy(uint256 quantity, uint256 maxQuantity, bytes32[] calldata proofs) external payable {\n\t\tSalePhases salePhase = getSalePhase();\n\t\trequire(salePhase == SalePhases.PRESALE, \"presale not active\");\n\n\t\tuint256 totalCost = getCurrentPrice() * quantity;\n\t\trequire(msg.value == totalCost, \"Wrong amount sent\");\n\t\t\n\t\tbool admitUser = admitPresaleUser(quantity, maxQuantity, proofs);\n\n\t\trequire(admitUser, \"User not admitted\");\n\n\t\t_transferFunds(totalCost);\n\t\tchefAvatar.mint(quantity, msg.sender);\n\t}\n\n\t/// @notice It will purchase the given amount of tokens for the user during the public sale phase\n\t/// @dev Only callable by during the public sale phase. The correct amount of ETH should be sent based on the current price or the call will revert\n\t/// @param quantity: the amount of tokens to purchase\n\tfunction publicBuy(uint256 quantity) external payable {\n\t\tSalePhases salePhase = getSalePhase();\n\t\trequire(salePhase == SalePhases.PUBLIC_SALE, \"public sale not active\");\n\n\t\tuint256 totalCost = getCurrentPrice() * quantity;\n\t\trequire(msg.value == totalCost, \"Wrong amount sent\");\n\t\t\n\t\tbool admitUser = admitPublicUser(quantity);\n\t\trequire(admitUser, \"User not admitted\");\n\n\t\t_transferFunds(totalCost);\n\t\tchefAvatar.mint(quantity, msg.sender);\n\t}\n}"
    },
    "contracts/Chainlink/VRFConsumerBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\nimport \"./interfaces/ILinkToken.sol\";\n\nimport \"./VRFRequestIDBase.sol\";\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\n * @dev want to generate randomness from.\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomness method.\n *\n * @dev The randomness argument to fulfillRandomness is the actual random value\n * @dev generated from your seed.\n *\n * @dev The requestId argument is generated from the keyHash and the seed by\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\n * @dev requests open, you can use the requestId to track which seed is\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\n * @dev details. (See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.)\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ. (Which is critical to making unpredictable randomness! See the\n * @dev next section.)\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\n * @dev block in which the request is made, user-provided seeds have no impact\n * @dev on its economic security properties. They are only included for API\n * @dev compatability with previous versions of this contract.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request.\n */\nabstract contract VRFConsumerBase is VRFRequestIDBase {\n\n\tevent RandomnessRequested(bytes32 requestId);\n\n\t/**\n\t * @notice fulfillRandomness handles the VRF response. Your contract must\n\t * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n\t * @notice principles to keep in mind when implementing your fulfillRandomness\n\t * @notice method.\n\t *\n\t * @dev VRFConsumerBase expects its subcontracts to have a method with this\n\t * @dev signature, and will call it once it has verified the proof\n\t * @dev associated with the randomness. (It is triggered via a call to\n\t * @dev rawFulfillRandomness, below.)\n\t *\n\t * @param requestId The Id initially returned by requestRandomness\n\t * @param randomness the VRF output\n\t */\n\tfunction fulfillRandomness(bytes32 requestId, uint256 randomness)\n\t\tinternal virtual;\n\n\t/**\n\t * @notice requestRandomness initiates a request for VRF output given _seed\n\t *\n\t * @dev The fulfillRandomness method receives the output, once it's provided\n\t * @dev by the Oracle, and verified by the vrfCoordinator.\n\t *\n\t * @dev The _keyHash must already be registered with the VRFCoordinator, and\n\t * @dev the _fee must exceed the fee specified during registration of the\n\t * @dev _keyHash.\n\t *\n\t * @dev The _seed parameter is vestigial, and is kept only for API\n\t * @dev compatibility with older versions. It can't *hurt* to mix in some of\n\t * @dev your own randomness, here, but it's not necessary because the VRF\n\t * @dev oracle will mix the hash of the block containing your request into the\n\t * @dev VRF seed it ultimately uses.\n\t *\n\t * @param _keyHash ID of public key against which randomness is generated\n\t * @param _fee The amount of LINK to send with the request\n\t * @param _seed seed mixed into the input of the VRF.\n\t *\n\t * @return requestId unique ID for this request\n\t *\n\t * @dev The returned requestId can be used to distinguish responses to\n\t * @dev concurrent requests. It is passed as the first argument to\n\t * @dev fulfillRandomness.\n\t */\n\tfunction requestRandomness(bytes32 _keyHash, uint256 _fee, uint256 _seed)\n\t\tinternal returns (bytes32 requestId)\n\t{\n\t\tLINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, _seed));\n\t\t// This is the seed passed to VRFCoordinator. The oracle will mix this with\n\t\t// the hash of the block containing this request to obtain the seed/input\n\t\t// which is finally passed to the VRF cryptographic machinery.\n\t\tuint256 vRFSeed  = makeVRFInputSeed(_keyHash, _seed, address(this), nonces[_keyHash]);\n\t\t// nonces[_keyHash] must stay in sync with\n\t\t// VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\n\t\t// successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\n\t\t// This provides protection against the user repeating their input seed,\n\t\t// which would result in a predictable/duplicate output, if multiple such\n\t\t// requests appeared in the same block.\n\t\tnonces[_keyHash] = nonces[_keyHash] + 1;\n\t\tbytes32 requestId = makeRequestId(_keyHash, vRFSeed);\n\n\t\temit RandomnessRequested(requestId);\n\n\t\treturn requestId;\n\t}\n\n\tILinkToken immutable internal LINK;\n\taddress immutable private vrfCoordinator;\n\n\t// Nonces for each VRF key from which randomness has been requested.\n\t//\n\t// Must stay in sync with VRFCoordinator[_keyHash][this]\n\tmapping(bytes32 /* keyHash */ => uint256 /* nonce */) private nonces;\n\n\t/**\n\t * @param _vrfCoordinator address of VRFCoordinator contract\n\t * @param _link address of LINK token contract\n\t *\n\t * @dev https://docs.chain.link/docs/link-token-contracts\n\t */\n\tconstructor(address _vrfCoordinator, address _link) {\n\t\tvrfCoordinator = _vrfCoordinator;\n\t\tLINK = ILinkToken(_link);\n\t}\n\n\t// rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n\t// proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n\t// the origin of the call\n\tfunction rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\n\t\trequire(msg.sender == vrfCoordinator, \"Only VRFCoordinator can fulfill\");\n\t\tfulfillRandomness(requestId, randomness);\n\t}\n}"
    },
    "contracts/Chainlink/VRFRequestIDBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\ncontract VRFRequestIDBase {\n\n\t/**\n\t * @notice returns the seed which is actually input to the VRF coordinator\n\t *\n\t * @dev To prevent repetition of VRF output due to repetition of the\n\t * @dev user-supplied seed, that seed is combined in a hash with the\n\t * @dev user-specific nonce, and the address of the consuming contract. The\n\t * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\n\t * @dev the final seed, but the nonce does protect against repetition in\n\t * @dev requests which are included in a single block.\n\t *\n\t * @param _userSeed VRF seed input provided by user\n\t * @param _requester Address of the requesting contract\n\t * @param _nonce User-specific nonce at the time of the request\n\t */\n\tfunction makeVRFInputSeed(bytes32 _keyHash, uint256 _userSeed,\n\t\taddress _requester, uint256 _nonce)\n\t\tinternal pure returns (uint256)\n\t{\n\t\treturn  uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\n\t}\n\n\t/**\n\t * @notice Returns the id for this request\n\t * @param _keyHash The serviceAgreement ID to be used for this request\n\t * @param _vRFInputSeed The seed to be passed directly to the VRF\n\t * @return The id for this request\n\t *\n\t * @dev Note that _vRFInputSeed is not the seed passed by the consuming\n\t * @dev contract, but the one generated by makeVRFInputSeed\n\t */\n\tfunction makeRequestId(\n\t\tbytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\n\t\treturn keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\n\t}\n}"
    },
    "contracts/Chainlink/interfaces/ILinkToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\ninterface ILinkToken {\n\tfunction allowance(address owner, address spender) external view returns (uint256 remaining);\n\tfunction approve(address spender, uint256 value) external returns (bool success);\n\tfunction balanceOf(address owner) external view returns (uint256 balance);\n\tfunction decimals() external view returns (uint8 decimalPlaces);\n\tfunction decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\n\tfunction increaseApproval(address spender, uint256 subtractedValue) external;\n\tfunction name() external view returns (string memory tokenName);\n\tfunction symbol() external view returns (string memory tokenSymbol);\n\tfunction totalSupply() external view returns (uint256 totalTokensIssued);\n\tfunction transfer(address to, uint256 value) external returns (bool success);\n\tfunction transferAndCall(address to, uint256 value, bytes memory data) external returns (bool success);\n\tfunction transferFrom(address from, address to, uint256 value) external returns (bool success);\n}"
    },
    "erc721a/contracts/ERC721A.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol';\nimport '@openzeppelin/contracts/utils/Address.sol';\nimport '@openzeppelin/contracts/utils/Context.sol';\nimport '@openzeppelin/contracts/utils/Strings.sol';\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\n\nerror ApprovalCallerNotOwnerNorApproved();\nerror ApprovalQueryForNonexistentToken();\nerror ApproveToCaller();\nerror ApprovalToCurrentOwner();\nerror BalanceQueryForZeroAddress();\nerror MintedQueryForZeroAddress();\nerror BurnedQueryForZeroAddress();\nerror AuxQueryForZeroAddress();\nerror MintToZeroAddress();\nerror MintZeroQuantity();\nerror OwnerIndexOutOfBounds();\nerror OwnerQueryForNonexistentToken();\nerror TokenIndexOutOfBounds();\nerror TransferCallerNotOwnerNorApproved();\nerror TransferFromIncorrectOwner();\nerror TransferToNonERC721ReceiverImplementer();\nerror TransferToZeroAddress();\nerror URIQueryForNonexistentToken();\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension. Built to optimize for lower gas during batch mints.\n *\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\n *\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\n *\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\n */\ncontract ERC721A is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Compiler will pack this into a single 256bit word.\n    struct TokenOwnership {\n        // The address of the owner.\n        address addr;\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\n        uint64 startTimestamp;\n        // Whether the token has been burned.\n        bool burned;\n    }\n\n    // Compiler will pack this into a single 256bit word.\n    struct AddressData {\n        // Realistically, 2**64-1 is more than enough.\n        uint64 balance;\n        // Keeps track of mint count with minimal overhead for tokenomics.\n        uint64 numberMinted;\n        // Keeps track of burn count with minimal overhead for tokenomics.\n        uint64 numberBurned;\n        // For miscellaneous variable(s) pertaining to the address\n        // (e.g. number of whitelist mint slots used).\n        // If there are multiple variables, please pack them into a uint64.\n        uint64 aux;\n    }\n\n    // The tokenId of the next token to be minted.\n    uint256 internal _currentIndex;\n\n    // The number of tokens burned.\n    uint256 internal _burnCounter;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to ownership details\n    // An empty struct value does not necessarily mean the token is unowned. See ownershipOf implementation for details.\n    mapping(uint256 => TokenOwnership) internal _ownerships;\n\n    // Mapping owner address to address data\n    mapping(address => AddressData) private _addressData;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n        _currentIndex = _startTokenId();\n    }\n\n    /**\n     * To change the starting tokenId, please override this function.\n     */\n    function _startTokenId() internal view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     * @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\n     */\n    function totalSupply() public view returns (uint256) {\n        // Counter underflow is impossible as _burnCounter cannot be incremented\n        // more than _currentIndex - _startTokenId() times\n        unchecked {\n            return _currentIndex - _burnCounter - _startTokenId();\n        }\n    }\n\n    /**\n     * Returns the total amount of tokens minted in the contract.\n     */\n    function _totalMinted() internal view returns (uint256) {\n        // Counter underflow is impossible as _currentIndex does not decrement,\n        // and it is initialized to _startTokenId()\n        unchecked {\n            return _currentIndex - _startTokenId();\n        }\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view override returns (uint256) {\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\n        return uint256(_addressData[owner].balance);\n    }\n\n    /**\n     * Returns the number of tokens minted by `owner`.\n     */\n    function _numberMinted(address owner) internal view returns (uint256) {\n        if (owner == address(0)) revert MintedQueryForZeroAddress();\n        return uint256(_addressData[owner].numberMinted);\n    }\n\n    /**\n     * Returns the number of tokens burned by or on behalf of `owner`.\n     */\n    function _numberBurned(address owner) internal view returns (uint256) {\n        if (owner == address(0)) revert BurnedQueryForZeroAddress();\n        return uint256(_addressData[owner].numberBurned);\n    }\n\n    /**\n     * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\n     */\n    function _getAux(address owner) internal view returns (uint64) {\n        if (owner == address(0)) revert AuxQueryForZeroAddress();\n        return _addressData[owner].aux;\n    }\n\n    /**\n     * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\n     * If there are multiple variables, please pack them into a uint64.\n     */\n    function _setAux(address owner, uint64 aux) internal {\n        if (owner == address(0)) revert AuxQueryForZeroAddress();\n        _addressData[owner].aux = aux;\n    }\n\n    /**\n     * Gas spent here starts off proportional to the maximum mint batch size.\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\n     */\n    function ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\n        uint256 curr = tokenId;\n\n        unchecked {\n            if (_startTokenId() <= curr && curr < _currentIndex) {\n                TokenOwnership memory ownership = _ownerships[curr];\n                if (!ownership.burned) {\n                    if (ownership.addr != address(0)) {\n                        return ownership;\n                    }\n                    // Invariant:\n                    // There will always be an ownership that has an address and is not burned\n                    // before an ownership that does not have an address and is not burned.\n                    // Hence, curr will not underflow.\n                    while (true) {\n                        curr--;\n                        ownership = _ownerships[curr];\n                        if (ownership.addr != address(0)) {\n                            return ownership;\n                        }\n                    }\n                }\n            }\n        }\n        revert OwnerQueryForNonexistentToken();\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view override returns (address) {\n        return ownershipOf(tokenId).addr;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return '';\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public override {\n        address owner = ERC721A.ownerOf(tokenId);\n        if (to == owner) revert ApprovalToCurrentOwner();\n\n        if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {\n            revert ApprovalCallerNotOwnerNorApproved();\n        }\n\n        _approve(to, tokenId, owner);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view override returns (address) {\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public override {\n        if (operator == _msgSender()) revert ApproveToCaller();\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, '');\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        _transfer(from, to, tokenId);\n        if (to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data)) {\n            revert TransferToNonERC721ReceiverImplementer();\n        }\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     */\n    function _exists(uint256 tokenId) internal view returns (bool) {\n        return _startTokenId() <= tokenId && tokenId < _currentIndex &&\n            !_ownerships[tokenId].burned;\n    }\n\n    function _safeMint(address to, uint256 quantity) internal {\n        _safeMint(to, quantity, '');\n    }\n\n    /**\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(\n        address to,\n        uint256 quantity,\n        bytes memory _data\n    ) internal {\n        _mint(to, quantity, _data, true);\n    }\n\n    /**\n     * @dev Mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(\n        address to,\n        uint256 quantity,\n        bytes memory _data,\n        bool safe\n    ) internal {\n        uint256 startTokenId = _currentIndex;\n        if (to == address(0)) revert MintToZeroAddress();\n        if (quantity == 0) revert MintZeroQuantity();\n\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n        // Overflows are incredibly unrealistic.\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\n        unchecked {\n            _addressData[to].balance += uint64(quantity);\n            _addressData[to].numberMinted += uint64(quantity);\n\n            _ownerships[startTokenId].addr = to;\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\n\n            uint256 updatedIndex = startTokenId;\n            uint256 end = updatedIndex + quantity;\n\n            if (safe && to.isContract()) {\n                do {\n                    emit Transfer(address(0), to, updatedIndex);\n                    if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {\n                        revert TransferToNonERC721ReceiverImplementer();\n                    }\n                } while (updatedIndex != end);\n                // Reentrancy protection\n                if (_currentIndex != startTokenId) revert();\n            } else {\n                do {\n                    emit Transfer(address(0), to, updatedIndex++);\n                } while (updatedIndex != end);\n            }\n            _currentIndex = updatedIndex;\n        }\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) private {\n        TokenOwnership memory prevOwnership = ownershipOf(tokenId);\n\n        bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr ||\n            isApprovedForAll(prevOwnership.addr, _msgSender()) ||\n            getApproved(tokenId) == _msgSender());\n\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\n        if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\n        if (to == address(0)) revert TransferToZeroAddress();\n\n        _beforeTokenTransfers(from, to, tokenId, 1);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId, prevOwnership.addr);\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\n        unchecked {\n            _addressData[from].balance -= 1;\n            _addressData[to].balance += 1;\n\n            _ownerships[tokenId].addr = to;\n            _ownerships[tokenId].startTimestamp = uint64(block.timestamp);\n\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\n            uint256 nextTokenId = tokenId + 1;\n            if (_ownerships[nextTokenId].addr == address(0)) {\n                // This will suffice for checking _exists(nextTokenId),\n                // as a burned slot cannot contain the zero address.\n                if (nextTokenId < _currentIndex) {\n                    _ownerships[nextTokenId].addr = prevOwnership.addr;\n                    _ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp;\n                }\n            }\n        }\n\n        emit Transfer(from, to, tokenId);\n        _afterTokenTransfers(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        TokenOwnership memory prevOwnership = ownershipOf(tokenId);\n\n        _beforeTokenTransfers(prevOwnership.addr, address(0), tokenId, 1);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId, prevOwnership.addr);\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\n        unchecked {\n            _addressData[prevOwnership.addr].balance -= 1;\n            _addressData[prevOwnership.addr].numberBurned += 1;\n\n            // Keep track of who burned the token, and the timestamp of burning.\n            _ownerships[tokenId].addr = prevOwnership.addr;\n            _ownerships[tokenId].startTimestamp = uint64(block.timestamp);\n            _ownerships[tokenId].burned = true;\n\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\n            uint256 nextTokenId = tokenId + 1;\n            if (_ownerships[nextTokenId].addr == address(0)) {\n                // This will suffice for checking _exists(nextTokenId),\n                // as a burned slot cannot contain the zero address.\n                if (nextTokenId < _currentIndex) {\n                    _ownerships[nextTokenId].addr = prevOwnership.addr;\n                    _ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp;\n                }\n            }\n        }\n\n        emit Transfer(prevOwnership.addr, address(0), tokenId);\n        _afterTokenTransfers(prevOwnership.addr, address(0), tokenId, 1);\n\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\n        unchecked {\n            _burnCounter++;\n        }\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(\n        address to,\n        uint256 tokenId,\n        address owner\n    ) private {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(owner, to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkContractOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n            return retval == IERC721Receiver(to).onERC721Received.selector;\n        } catch (bytes memory reason) {\n            if (reason.length == 0) {\n                revert TransferToNonERC721ReceiverImplementer();\n            } else {\n                assembly {\n                    revert(add(32, reason), mload(reason))\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\n     * And also called before burning one token.\n     *\n     * startTokenId - the first token id to be transferred\n     * quantity - the amount to be transferred\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, `tokenId` will be burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _beforeTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\n     * minting.\n     * And also called after one token has been burned.\n     *\n     * startTokenId - the first token id to be transferred\n     * quantity - the amount to be transferred\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` has been minted for `to`.\n     * - When `to` is zero, `tokenId` has been burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _afterTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n}\n"
    }
  }
}}