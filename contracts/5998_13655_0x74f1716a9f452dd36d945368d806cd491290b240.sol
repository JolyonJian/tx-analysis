{{
  "language": "Solidity",
  "sources": {
    "contracts/AngryApeArmyEvolutionCollection.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\nimport \"./ERC721ABurnable.sol\";\r\nimport \"./Royalty.sol\";\r\nimport \"./IContractURI.sol\";\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\r\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\r\n\r\ncontract AngryApeArmyEvolutionCollection is ERC721ABurnable, Royalty {\r\n    // Utils\r\n    using ECDSA for bytes32;\r\n    using Strings for uint256;\r\n\r\n    // Sale state variables\r\n    enum SaleStates {\r\n        NOT_STARTED,\r\n        FREE_MINT,\r\n        FREE_MINT_PAUSED,\r\n        PRE_SALE,\r\n        PRE_SALE_PAUSED,\r\n        SALE,\r\n        SALE_PAUSED,\r\n        ENDED\r\n    }\r\n\r\n    SaleStates private _saleState;\r\n\r\n    // OG Ape holders\r\n    IERC721 private _aaaContract;\r\n    mapping(uint256 => uint256) private _aaaDataStore;\r\n\r\n    // Whitelist\r\n    bytes32 public merkleRoot;\r\n    mapping(address => bool) public whitelistStore;\r\n\r\n    // Constants\r\n    uint256 public constant PRE_SALE_PRICE = 0.2 ether;\r\n    uint256 public constant SALE_PRICE = 0.4 ether;\r\n    uint32 public constant MAX_SUPPLY = 10000;\r\n    uint32 public constant MAX_BATCH_MINT = 20;\r\n\r\n    // Reserved\r\n    uint32 public reserved = 400;\r\n\r\n    // ERC721 Metadata\r\n    string private _baseURI_ = \"https://aaa-evolution-api-h5pd2zuvza-uc.a.run.app/\";\r\n\r\n    // ECDSA\r\n    address private _signer;\r\n    mapping(string => bool) private _isNonceUsed;\r\n\r\n    // Events\r\n    event SetBaseURI(string _baseURI_);\r\n    event FreeMintBegins();\r\n    event PreSaleBegins();\r\n    event SaleBegins();\r\n    event SaleEnds();\r\n\r\n    address public aaaWithdrawal;\r\n    address public netvrkWithdrawal;\r\n\r\n    constructor(\r\n        address signer_,\r\n        address aaaContract_,\r\n        address royaltyReceiver_\r\n    )\r\n        ERC721ABurnable(\r\n            \"Angry Ape Army Evolution Collection\",\r\n            \"AAAEVO\",\r\n            MAX_BATCH_MINT\r\n        )\r\n        Royalty(royaltyReceiver_, 750) // 7.50%\r\n    {\r\n        _aaaContract = IERC721(aaaContract_);\r\n        _signer = signer_;\r\n\r\n        aaaWithdrawal = 0x6ab71C2025442B694C8585aCe2fc06D877469D30;\r\n        netvrkWithdrawal = 0x901FC05c4a4bC027a8979089D716b6793052Cc16;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    // Signature verfification\r\n    modifier onlySignedTx(\r\n        uint256 quantity_,\r\n        string memory nonce_,\r\n        bytes calldata signature_\r\n    ) {\r\n        require(!_isNonceUsed[nonce_], \"Nonce already used\");\r\n        require(\r\n            keccak256(abi.encodePacked(msg.sender, quantity_, nonce_))\r\n                .toEthSignedMessageHash()\r\n                .recover(signature_) == _signer,\r\n            \"Signature does not correspond\"\r\n        );\r\n\r\n        _isNonceUsed[nonce_] = true;\r\n        _;\r\n    }\r\n\r\n    function setSignerAddress(address signerAddress_) external onlyOwner {\r\n        _signer = signerAddress_;\r\n    }\r\n\r\n    // Free Mint\r\n    function freeMint(\r\n        uint256[] calldata freeMintTokens_,\r\n        uint256[] calldata preSaleTokens_,\r\n        string memory nonce_,\r\n        bytes calldata signature_\r\n    )\r\n        external\r\n        payable\r\n        onlySignedTx(\r\n            freeMintTokens_.length + preSaleTokens_.length,\r\n            nonce_,\r\n            signature_\r\n        )\r\n    {\r\n        uint256 quantity_ = freeMintTokens_.length + preSaleTokens_.length;\r\n        require(_saleState == SaleStates.FREE_MINT, \"Free mint not active\");\r\n        require(quantity_ > 0, \"You must mint at least 1\");\r\n        require(\r\n            quantity_ <= (MAX_SUPPLY - reserved - totalSupply()),\r\n            \"Not enough supply\"\r\n        );\r\n        require(\r\n            msg.value >= PRE_SALE_PRICE * preSaleTokens_.length,\r\n            \"Insufficient eth to process the order\"\r\n        );\r\n        require(\r\n            !usedTokenIds(freeMintTokens_, preSaleTokens_),\r\n            \"Token already used\"\r\n        );\r\n\r\n        for (uint256 i; i < freeMintTokens_.length; i++) {\r\n            require(\r\n                msg.sender == _aaaContract.ownerOf(freeMintTokens_[i]),\r\n                \"Token not owned\"\r\n            );\r\n        }\r\n\r\n        for (uint256 i; i < preSaleTokens_.length; i++) {\r\n            require(\r\n                msg.sender == _aaaContract.ownerOf(preSaleTokens_[i]),\r\n                \"Token not owned\"\r\n            );\r\n        }\r\n\r\n        setUsedTokenIds(freeMintTokens_, preSaleTokens_);\r\n\r\n        _safeMint(msg.sender, quantity_);\r\n    }\r\n\r\n    // Pre Sale Mint\r\n    function preSaleMint(\r\n        bytes32[] calldata merkleProof_,\r\n        string memory nonce_,\r\n        bytes calldata signature_\r\n    ) external payable onlySignedTx(1, nonce_, signature_) {\r\n        require(_saleState == SaleStates.PRE_SALE, \"Pre sale not active\");\r\n        require(!whitelistStore[msg.sender], \"Whitelist used\");\r\n        require(\r\n            1 <= (MAX_SUPPLY - reserved - totalSupply()),\r\n            \"Not enough supply\"\r\n        );\r\n        require(msg.value >= PRE_SALE_PRICE, \"Insufficient eth to process the order\");\r\n        require(\r\n            MerkleProof.verify(\r\n                merkleProof_,\r\n                merkleRoot,\r\n                keccak256(abi.encodePacked(msg.sender))\r\n            ),\r\n            \"Proof failed\"\r\n        );\r\n\r\n        whitelistStore[msg.sender] = true;\r\n\r\n        _safeMint(msg.sender, 1);\r\n    }\r\n\r\n    // Sale Mint\r\n    function mint(\r\n        uint8 quantity_,\r\n        string memory nonce_,\r\n        bytes calldata signature_\r\n    ) external payable onlySignedTx(quantity_, nonce_, signature_) {\r\n        require(_saleState == SaleStates.SALE, \"Sale not active\");\r\n        require(quantity_ > 0, \"You must mint at least 1\");\r\n        require(\r\n            quantity_ <= (MAX_SUPPLY - reserved - totalSupply()),\r\n            \"Not enough supply\"\r\n        );\r\n        require(\r\n            quantity_ <= MAX_BATCH_MINT,\r\n            \"Cannot mint more than MAX_BATCH_MINT per transaction\"\r\n        );\r\n        require(\r\n            (balanceOf(msg.sender) + quantity_) <= MAX_BATCH_MINT,\r\n            \"Any one wallet cannot hold more than MAX_BATCH_MINT\"\r\n        );\r\n        require(\r\n            msg.value >= SALE_PRICE * quantity_,\r\n            \"Insufficient eth to process the order\"\r\n        );\r\n\r\n        _safeMint(msg.sender, quantity_);\r\n    }\r\n\r\n    // Reserved\r\n    function reservedMint(address to_, uint32 quantity_) public onlyOwner {\r\n        require(quantity_ <= reserved, \"Not enough reserved supply\");\r\n        require(quantity_ > 0, \"You must mint at least 1\");\r\n        require(\r\n            quantity_ <= MAX_BATCH_MINT,\r\n            \"Cannot mint more than MAX_BATCH_MINT per transaction\"\r\n        );\r\n\r\n        reserved -= quantity_;\r\n\r\n        _safeMint(to_, quantity_);\r\n    }\r\n\r\n    // Burn\r\n    function burn(uint256 tokenId) public virtual {\r\n        _burn(tokenId);\r\n    }\r\n\r\n    // Sale State\r\n    function saleState() public view returns (string memory) {\r\n        if (_saleState == SaleStates.FREE_MINT) return \"FREE_MINT\";\r\n        if (_saleState == SaleStates.FREE_MINT_PAUSED)\r\n            return \"FREE_MINT_PAUSED\";\r\n        if (_saleState == SaleStates.PRE_SALE) return \"PRE_SALE\";\r\n        if (_saleState == SaleStates.PRE_SALE_PAUSED) return \"PRE_SALE_PAUSED\";\r\n        if (_saleState == SaleStates.SALE) return \"SALE\";\r\n        if (_saleState == SaleStates.SALE_PAUSED) return \"SALE_PAUSED\";\r\n        if (_saleState == SaleStates.ENDED) return \"ENDED\";\r\n        return \"NOT_STARTED\";\r\n    }\r\n\r\n    function startFreeMint() external onlyOwner {\r\n        require(\r\n            _saleState < SaleStates.FREE_MINT,\r\n            \"Free mint has already started\"\r\n        );\r\n        _saleState = SaleStates.FREE_MINT;\r\n        emit FreeMintBegins();\r\n    }\r\n\r\n    function startPreSale() external onlyOwner {\r\n        require(_saleState >= SaleStates.FREE_MINT, \"Free mint state required\");\r\n        require(\r\n            _saleState < SaleStates.PRE_SALE,\r\n            \"Pre-sale has already started\"\r\n        );\r\n        _saleState = SaleStates.PRE_SALE;\r\n        emit PreSaleBegins();\r\n    }\r\n\r\n    function startSale() external onlyOwner {\r\n        require(_saleState >= SaleStates.PRE_SALE, \"Pre-sale state required\");\r\n        require(_saleState < SaleStates.SALE, \"Sale has already started\");\r\n        _saleState = SaleStates.SALE;\r\n        emit SaleBegins();\r\n    }\r\n\r\n    function endSale() external onlyOwner {\r\n        require(_saleState >= SaleStates.SALE, \"Sale state required\");\r\n        require(_saleState < SaleStates.ENDED, \"Sale has ended\");\r\n        _saleState = SaleStates.ENDED;\r\n        emit SaleEnds();\r\n    }\r\n\r\n    // Pauseable\r\n    function pause() public onlyOwner {\r\n        require(\r\n            !(_saleState == SaleStates.NOT_STARTED ||\r\n                _saleState == SaleStates.ENDED),\r\n            \"No active sale\"\r\n        );\r\n\r\n        require(\r\n            !(_saleState == SaleStates.FREE_MINT_PAUSED ||\r\n                _saleState == SaleStates.PRE_SALE_PAUSED ||\r\n                _saleState == SaleStates.SALE_PAUSED),\r\n            \"Sale is paused\"\r\n        );\r\n\r\n        _saleState = SaleStates(uint8(_saleState) + 1);\r\n    }\r\n\r\n    function unpause() public onlyOwner {\r\n        require(\r\n            !(_saleState == SaleStates.NOT_STARTED ||\r\n                _saleState == SaleStates.ENDED),\r\n            \"No active sale\"\r\n        );\r\n\r\n        require(\r\n            !(_saleState == SaleStates.FREE_MINT ||\r\n                _saleState == SaleStates.PRE_SALE ||\r\n                _saleState == SaleStates.SALE),\r\n            \"Sale is not paused\"\r\n        );\r\n\r\n        _saleState = SaleStates(uint8(_saleState) - 1);\r\n    }\r\n\r\n    // Contract & token metadata\r\n    function setBaseURI(string memory _uri) public onlyOwner {\r\n        require(\r\n            bytes(_uri)[bytes(_uri).length - 1] == bytes1(\"/\"),\r\n            \"Must set trailing slash\"\r\n        );\r\n        _baseURI_ = _uri;\r\n        emit SetBaseURI(_uri);\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        override\r\n        returns (string memory)\r\n    {\r\n        require(_exists(tokenId), \"URI query for nonexistent token\");\r\n\r\n        return\r\n            string(\r\n                abi.encodePacked(\r\n                    _baseURI_,\r\n                    \"token/\",\r\n                    tokenId.toString(),\r\n                    \".json\"\r\n                )\r\n            );\r\n    }\r\n\r\n    function contractURI() public view returns (string memory) {\r\n        return string(abi.encodePacked(_baseURI_, \"contract.json\"));\r\n    }\r\n\r\n    // Whitelist\r\n    function setMerkleRoot(bytes32 _merkleRoot) public onlyOwner {\r\n        merkleRoot = _merkleRoot;\r\n    }\r\n\r\n    // Withdrawal\r\n    function setAaaWithdrawal(address withdrawalAddress_) public onlyOwner {\r\n        require(\r\n            withdrawalAddress_ != address(0),\r\n            \"Set a valid withdrawal address\"\r\n        );\r\n        aaaWithdrawal = withdrawalAddress_;\r\n    }\r\n\r\n    function setNetvrkWithdrawal(address withdrawalAddress_) public onlyOwner {\r\n        require(\r\n            withdrawalAddress_ != address(0),\r\n            \"Set a valid withdrawal address\"\r\n        );\r\n        netvrkWithdrawal = withdrawalAddress_;\r\n    }\r\n\r\n    function withdrawAll() public onlyOwner {\r\n        uint256 totalBalance = address(this).balance;\r\n        require(totalBalance > 0, \"Balance is zero\");\r\n\r\n        uint256 aaaAmount = (totalBalance * 7000) / 10000; // 70.00%\r\n        uint256 netvrkAmount = totalBalance - aaaAmount; // 30.00%\r\n\r\n        require(\r\n            payable(aaaWithdrawal).send(aaaAmount),\r\n            \"Withdrawal Failed to AAA\"\r\n        );\r\n\r\n        require(\r\n            payable(netvrkWithdrawal).send(netvrkAmount),\r\n            \"Withdrawal Failed to netvrk\"\r\n        );\r\n    }\r\n\r\n    // Utilities\r\n    function packBool(\r\n        uint256 _packedBools,\r\n        uint256 _boolIndex,\r\n        bool _value\r\n    ) public pure returns (uint256) {\r\n        return\r\n            _value\r\n                ? _packedBools | (uint256(1) << _boolIndex)\r\n                : _packedBools & ~(uint256(1) << _boolIndex);\r\n    }\r\n\r\n    function unPackBool(uint256 _packedBools, uint256 _boolIndex)\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        return (_packedBools >> _boolIndex) & uint256(1) == 1 ? true : false;\r\n    }\r\n\r\n    function setUsedTokenIds(\r\n        uint256[] calldata freeMints,\r\n        uint256[] calldata preSales\r\n    ) public {\r\n        uint256 cRow;\r\n        uint256 cPackedBools = _aaaDataStore[0];\r\n\r\n        for (uint256 i; i < freeMints.length; i++) {\r\n            (uint256 boolRow, uint256 boolColumn) = freeMintPosition(\r\n                freeMints[i]\r\n            );\r\n\r\n            if (boolRow != cRow) {\r\n                _aaaDataStore[cRow] = cPackedBools;\r\n                cRow = boolRow;\r\n                cPackedBools = _aaaDataStore[boolRow];\r\n            }\r\n\r\n            cPackedBools = packBool(cPackedBools, boolColumn, true);\r\n\r\n            if (i + 1 == freeMints.length) {\r\n                _aaaDataStore[cRow] = cPackedBools;\r\n            }\r\n        }\r\n\r\n        for (uint256 i; i < preSales.length; i++) {\r\n            (uint256 boolRow, uint256 boolColumn) = preSalePosition(\r\n                preSales[i]\r\n            );\r\n\r\n            if (boolRow != cRow) {\r\n                _aaaDataStore[cRow] = cPackedBools;\r\n                cRow = boolRow;\r\n                cPackedBools = _aaaDataStore[boolRow];\r\n            }\r\n\r\n            cPackedBools = packBool(cPackedBools, boolColumn, true);\r\n\r\n            if (i + 1 == preSales.length) {\r\n                _aaaDataStore[cRow] = cPackedBools;\r\n            }\r\n        }\r\n    }\r\n\r\n    function usedTokenIds(\r\n        uint256[] calldata freeMints,\r\n        uint256[] calldata preSales\r\n    ) private view returns (bool) {\r\n        uint256 cRow;\r\n        uint256 cPackedBools = _aaaDataStore[0];\r\n        uint256 unpackedBools;\r\n\r\n        for (uint256 i; i < freeMints.length; i++) {\r\n            (uint256 boolRow, uint256 boolColumn) = freeMintPosition(\r\n                freeMints[i]\r\n            );\r\n\r\n            if (boolRow != cRow) {\r\n                if (unpackedBools > 0) return true;\r\n                cRow = boolRow;\r\n                cPackedBools = _aaaDataStore[boolRow];\r\n                unpackedBools = 0;\r\n            }\r\n\r\n            unpackedBools =\r\n                unpackedBools |\r\n                (cPackedBools & (uint256(1) << boolColumn));\r\n\r\n            if (i + 1 == freeMints.length) {\r\n                if (unpackedBools > 0) return true;\r\n            }\r\n        }\r\n\r\n        for (uint256 i; i < preSales.length; i++) {\r\n            (uint256 boolRow, uint256 boolColumn) = preSalePosition(\r\n                preSales[i]\r\n            );\r\n\r\n            if (boolRow != cRow) {\r\n                if (unpackedBools > 0) return true;\r\n                cRow = boolRow;\r\n                cPackedBools = _aaaDataStore[boolRow];\r\n                unpackedBools = 0;\r\n            }\r\n\r\n            unpackedBools =\r\n                unpackedBools |\r\n                (cPackedBools & (uint256(1) << boolColumn));\r\n\r\n            if (i + 1 == preSales.length) {\r\n                if (unpackedBools > 0) return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function usedTokenId(uint256 tokenId)\r\n        public\r\n        view\r\n        returns (bool freeMintUsed, bool preSaleUsed)\r\n    {\r\n        (uint256 boolRow, uint256 boolColumn) = freeMintPosition(tokenId);\r\n        uint256 packedBools = _aaaDataStore[boolRow];\r\n        freeMintUsed = (packedBools & (uint256(1) << boolColumn)) > 0\r\n            ? true\r\n            : false;\r\n        preSaleUsed = (packedBools & (uint256(1) << (boolColumn + 1))) > 0\r\n            ? true\r\n            : false;\r\n    }\r\n\r\n    function freeMintPosition(uint256 tokenId)\r\n        internal\r\n        pure\r\n        returns (uint256 boolRow, uint256 boolColumn)\r\n    {\r\n        boolRow = (tokenId << 1) / 256;\r\n        boolColumn = (tokenId << 1) % 256;\r\n    }\r\n\r\n    function preSalePosition(uint256 tokenId)\r\n        internal\r\n        pure\r\n        returns (uint256 boolRow, uint256 boolColumn)\r\n    {\r\n        (boolRow, boolColumn) = freeMintPosition(tokenId);\r\n        boolColumn++;\r\n    }\r\n\r\n    // Compulsory overrides\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        override(ERC721ABurnable, Royalty)\r\n        returns (bool)\r\n    {\r\n        return\r\n            interfaceId == type(IERC2981).interfaceId ||\r\n            interfaceId == type(IContractURI).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n}\r\n"
    },
    "contracts/ERC721ABurnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// Creators: locationtba.eth, 2pmflow.eth, skarard.eth\r\n\r\npragma solidity 0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"@openzeppelin/contracts/utils/Context.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata and Enumerable extension. Built to optimize for lower gas during batch mints.\r\n *\r\n * Assumes serials are sequentially minted starting at 0 (e.g. 0, 1, 2, 3..).\r\n *\r\n * Supports burning to address(0x0000...dEaD).\r\n */\r\nabstract contract ERC721ABurnable is\r\n    Context,\r\n    ERC165,\r\n    IERC721,\r\n    IERC721Metadata,\r\n    IERC721Enumerable\r\n{\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    struct TokenOwnership {\r\n        address addr;\r\n        uint64 startTimestamp;\r\n    }\r\n\r\n    struct AddressData {\r\n        uint128 balance;\r\n        uint128 numberMinted;\r\n    }\r\n\r\n    struct IndexSupply {\r\n        uint128 currentIndex;\r\n        uint128 totalSupply;\r\n    }\r\n\r\n    IndexSupply private indexSupply;\r\n\r\n    uint256 internal immutable maxBatchSize;\r\n\r\n    // Burn Address\r\n    address public constant BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to ownership details\r\n    // An empty struct value does not necessarily mean the token is unowned. See ownershipOf implementation for details.\r\n    mapping(uint256 => TokenOwnership) private _ownerships;\r\n\r\n    // Mapping owner address to address data\r\n    mapping(address => AddressData) private _addressData;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev\r\n     * `maxBatchSize` refers to how much a minter can mint at a time.\r\n     */\r\n    constructor(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        uint256 maxBatchSize_\r\n    ) {\r\n        require(\r\n            maxBatchSize_ > 0,\r\n            \"ERC721ABurnable: max batch size must be nonzero\"\r\n        );\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        maxBatchSize = maxBatchSize_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return indexSupply.totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenByIndex}.\r\n     */\r\n    function tokenByIndex(uint256 index)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            index < indexSupply.currentIndex,\r\n            \"ERC721ABurnable: global index out of bounds\"\r\n        );\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\r\n     * This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first.\r\n     * It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            index < balanceOf(owner),\r\n            \"ERC721ABurnable: owner index out of bounds\"\r\n        );\r\n        uint256 numMintedSoFar = totalSupply();\r\n        uint256 tokenIdsIdx = 0;\r\n        address currOwnershipAddr = address(0);\r\n        for (uint256 i = 0; i < numMintedSoFar; i++) {\r\n            TokenOwnership memory ownership = _ownerships[i];\r\n            if (ownership.addr != address(0)) {\r\n                currOwnershipAddr = ownership.addr;\r\n            }\r\n            if (currOwnershipAddr == owner) {\r\n                if (tokenIdsIdx == index) {\r\n                    return i;\r\n                }\r\n                tokenIdsIdx++;\r\n            }\r\n        }\r\n        revert(\"ERC721ABurnable: unable to get token of owner by index\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        override(ERC165, IERC165)\r\n        returns (bool)\r\n    {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            interfaceId == type(IERC721Enumerable).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view override returns (uint256) {\r\n        require(\r\n            owner != address(0),\r\n            \"ERC721ABurnable: balance query for the zero address\"\r\n        );\r\n        return uint256(_addressData[owner].balance);\r\n    }\r\n\r\n    function _numberMinted(address owner) internal view returns (uint256) {\r\n        require(\r\n            owner != address(0),\r\n            \"ERC721ABurnable: number minted query for the zero address\"\r\n        );\r\n        return uint256(_addressData[owner].numberMinted);\r\n    }\r\n\r\n    function ownershipOf(uint256 tokenId)\r\n        internal\r\n        view\r\n        returns (TokenOwnership memory)\r\n    {\r\n        require(\r\n            _exists(tokenId),\r\n            \"ERC721ABurnable: owner query for nonexistent token\"\r\n        );\r\n\r\n        uint256 lowestTokenToCheck;\r\n        if (tokenId >= maxBatchSize) {\r\n            lowestTokenToCheck = tokenId - maxBatchSize + 1;\r\n        }\r\n\r\n        for (uint256 curr = tokenId; curr >= lowestTokenToCheck; curr--) {\r\n            TokenOwnership memory ownership = _ownerships[curr];\r\n            if (ownership.addr != address(0)) {\r\n                require(\r\n                    ownership.addr != BURN_ADDRESS,\r\n                    \"ERC721ABurnable: owner query for nonexistent token\"\r\n                );\r\n                return ownership;\r\n            }\r\n        }\r\n\r\n        revert(\"ERC721ABurnable: unable to determine the owner of token\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (address)\r\n    {\r\n        return ownershipOf(tokenId).addr;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (string memory)\r\n    {\r\n        require(\r\n            _exists(tokenId),\r\n            \"ERC721Metadata: URI query for nonexistent token\"\r\n        );\r\n\r\n        string memory baseURI = _baseURI();\r\n        return\r\n            bytes(baseURI).length > 0\r\n                ? string(abi.encodePacked(baseURI, tokenId.toString()))\r\n                : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public override {\r\n        address owner = ERC721ABurnable.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721ABurnable: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721ABurnable: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId, owner);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId)\r\n        public\r\n        view\r\n        override\r\n        returns (address)\r\n    {\r\n        require(\r\n            _exists(tokenId),\r\n            \"ERC721ABurnable: approved query for nonexistent token\"\r\n        );\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved)\r\n        public\r\n        override\r\n    {\r\n        require(operator != _msgSender(), \"ERC721ABurnable: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public override {\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public override {\r\n        _transfer(from, to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(from, to, tokenId, _data),\r\n            \"ERC721ABurnable: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     */\r\n    function _exists(uint256 tokenId) internal view returns (bool) {\r\n        return tokenId < indexSupply.currentIndex;\r\n    }\r\n\r\n    function _safeMint(address to, uint256 quantity) internal {\r\n        _safeMint(to, quantity, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `quantity` tokens and transfers them to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `quantity` cannot be larger than the max batch size.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 quantity,\r\n        bytes memory _data\r\n    ) internal {\r\n        uint128 startTokenId = indexSupply.currentIndex;\r\n        require(to != address(0), \"ERC721ABurnable: mint to the zero address\");\r\n        // We know if the first token in the batch doesn't exist, the other ones don't as well, because of serial ordering.\r\n        require(\r\n            !_exists(startTokenId),\r\n            \"ERC721ABurnable: token already minted\"\r\n        );\r\n        require(\r\n            quantity <= maxBatchSize,\r\n            \"ERC721ABurnable: quantity to mint too high\"\r\n        );\r\n\r\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\r\n\r\n        AddressData memory addressData = _addressData[to];\r\n        _addressData[to] = AddressData(\r\n            addressData.balance + uint128(quantity),\r\n            addressData.numberMinted + uint128(quantity)\r\n        );\r\n        _ownerships[startTokenId] = TokenOwnership(to, uint64(block.timestamp));\r\n\r\n        uint128 updatedIndex = startTokenId;\r\n\r\n        for (uint256 i = 0; i < quantity; i++) {\r\n            emit Transfer(address(0), to, updatedIndex);\r\n            require(\r\n                _checkOnERC721Received(address(0), to, updatedIndex, _data),\r\n                \"ERC721ABurnable: transfer to non ERC721Receiver implementer\"\r\n            );\r\n            updatedIndex++;\r\n        }\r\n\r\n        indexSupply.currentIndex += uint128(quantity);\r\n        indexSupply.totalSupply += uint128(quantity);\r\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        TokenOwnership memory owner = ERC721ABurnable.ownershipOf(tokenId);\r\n\r\n        bool isApprovedOrOwner = (_msgSender() == owner.addr ||\r\n            getApproved(tokenId) == _msgSender() ||\r\n            isApprovedForAll(owner.addr, _msgSender()));\r\n\r\n        require(\r\n            isApprovedOrOwner,\r\n            \"ERC721ABurnable: transfer caller is not owner nor approved\"\r\n        );\r\n\r\n        _beforeTokenTransfers(owner.addr, address(BURN_ADDRESS), tokenId, 1);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId, owner.addr);\r\n\r\n        _addressData[owner.addr].balance -= 1;\r\n        _ownerships[tokenId] = TokenOwnership(\r\n            BURN_ADDRESS,\r\n            uint64(block.timestamp)\r\n        );\r\n\r\n        // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\r\n        // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\r\n        uint256 nextTokenId = tokenId + 1;\r\n        if (_ownerships[nextTokenId].addr == address(0)) {\r\n            if (_exists(nextTokenId)) {\r\n                _ownerships[nextTokenId] = TokenOwnership(\r\n                    owner.addr,\r\n                    owner.startTimestamp\r\n                );\r\n            }\r\n        }\r\n\r\n        // Decrement from total supply\r\n        indexSupply.totalSupply--;\r\n\r\n        emit Transfer(owner.addr, BURN_ADDRESS, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) private {\r\n        TokenOwnership memory prevOwnership = ownershipOf(tokenId);\r\n\r\n        bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr ||\r\n            getApproved(tokenId) == _msgSender() ||\r\n            isApprovedForAll(prevOwnership.addr, _msgSender()));\r\n\r\n        require(\r\n            isApprovedOrOwner,\r\n            \"ERC721ABurnable: transfer caller is not owner nor approved\"\r\n        );\r\n\r\n        require(\r\n            prevOwnership.addr == from,\r\n            \"ERC721ABurnable: transfer from incorrect owner\"\r\n        );\r\n        require(\r\n            to != address(0),\r\n            \"ERC721ABurnable: transfer to the zero address\"\r\n        );\r\n\r\n        _beforeTokenTransfers(from, to, tokenId, 1);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId, prevOwnership.addr);\r\n\r\n        _addressData[from].balance -= 1;\r\n        _addressData[to].balance += 1;\r\n        _ownerships[tokenId] = TokenOwnership(to, uint64(block.timestamp));\r\n\r\n        // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\r\n        // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\r\n        uint256 nextTokenId = tokenId + 1;\r\n        if (_ownerships[nextTokenId].addr == address(0)) {\r\n            if (_exists(nextTokenId)) {\r\n                _ownerships[nextTokenId] = TokenOwnership(\r\n                    prevOwnership.addr,\r\n                    prevOwnership.startTimestamp\r\n                );\r\n            }\r\n        }\r\n\r\n        emit Transfer(from, to, tokenId);\r\n        _afterTokenTransfers(from, to, tokenId, 1);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(\r\n        address to,\r\n        uint256 tokenId,\r\n        address owner\r\n    ) private {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(owner, to, tokenId);\r\n    }\r\n\r\n    uint256 public nextOwnerToExplicitlySet = 0;\r\n\r\n    /**\r\n     * @dev Explicitly set `owners` to eliminate loops in future calls of ownerOf().\r\n     */\r\n    function _setOwnersExplicit(uint256 quantity) internal {\r\n        uint256 oldNextOwnerToSet = nextOwnerToExplicitlySet;\r\n        require(quantity > 0, \"quantity must be nonzero\");\r\n        uint256 endIndex = oldNextOwnerToSet + quantity - 1;\r\n        if (endIndex > indexSupply.currentIndex - 1) {\r\n            endIndex = indexSupply.currentIndex - 1;\r\n        }\r\n        // We know if the last one in the group exists, all in the group exist, due to serial ordering.\r\n        require(_exists(endIndex), \"not enough minted yet for this cleanup\");\r\n        for (uint256 i = oldNextOwnerToSet; i <= endIndex; i++) {\r\n            if (_ownerships[i].addr == address(0)) {\r\n                TokenOwnership memory ownership = ownershipOf(i);\r\n                _ownerships[i] = TokenOwnership(\r\n                    ownership.addr,\r\n                    ownership.startTimestamp\r\n                );\r\n            }\r\n        }\r\n        nextOwnerToExplicitlySet = endIndex + 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try\r\n                IERC721Receiver(to).onERC721Received(\r\n                    _msgSender(),\r\n                    from,\r\n                    tokenId,\r\n                    _data\r\n                )\r\n            returns (bytes4 retval) {\r\n                return retval == IERC721Receiver(to).onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\r\n                        \"ERC721ABurnable: transfer to non ERC721Receiver implementer\"\r\n                    );\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\r\n     *\r\n     * startTokenId - the first token id to be transferred\r\n     * quantity - the amount to be transferred\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     */\r\n    function _beforeTokenTransfers(\r\n        address from,\r\n        address to,\r\n        uint256 startTokenId,\r\n        uint256 quantity\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\r\n     * minting.\r\n     *\r\n     * startTokenId - the first token id to be transferred\r\n     * quantity - the amount to be transferred\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero.\r\n     * - `from` and `to` are never both zero.\r\n     */\r\n    function _afterTokenTransfers(\r\n        address from,\r\n        address to,\r\n        uint256 startTokenId,\r\n        uint256 quantity\r\n    ) internal virtual {}\r\n}\r\n"
    },
    "contracts/Royalty.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\r\nimport \"./IERC2981.sol\";\r\n\r\nabstract contract Royalty is Ownable, ERC165, IERC2981 {\r\n    address public royaltyReceiver;\r\n    uint32 public royaltyBasisPoints; // A integer representing 1/100th of 1% (fixed point with 100 = 1.00%)\r\n\r\n    constructor(address _receiver, uint32 _basisPoints) {\r\n        royaltyReceiver = _receiver;\r\n        royaltyBasisPoints = _basisPoints;\r\n    }\r\n\r\n    function setRoyaltyReceiver(address _receiver) external virtual onlyOwner {\r\n        royaltyReceiver = _receiver;\r\n    }\r\n\r\n    function setRoyaltyBasisPoints(uint32 _basisPoints)\r\n        external\r\n        virtual\r\n        onlyOwner\r\n    {\r\n        royaltyBasisPoints = _basisPoints;\r\n    }\r\n\r\n    function royaltyInfo(uint256, uint256 _salePrice)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (address receiver, uint256 amount)\r\n    {\r\n        // All tokens return the same royalty amount to the receiver\r\n        uint256 _royaltyAmount = (_salePrice * royaltyBasisPoints) / 10000; // Normalises in basis points reference. (10000 = 100.00%)\r\n        return (royaltyReceiver, _royaltyAmount);\r\n    }\r\n\r\n    // Compulsory overrides\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        override(ERC165, IERC165)\r\n        returns (bool)\r\n    {\r\n        return\r\n            interfaceId == type(IERC2981).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n}\r\n"
    },
    "contracts/IContractURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\r\n\r\n///\r\n/// @dev Interface for the proposed contractURI standard\r\n///\r\ninterface IContractURI is IERC165 {\r\n    /// ERC165 bytes to add to interface array - set in parent contract\r\n    /// implementing this standard\r\n    ///\r\n    /// bytes4(keccak256(\"contractURI()\")) == 0xe8a3d485\r\n\r\n    /// @notice Called to return the URI pertaining to the contract metadata\r\n    /// @return contractURI - the URI that pertaining to the contract metadata\r\n    function contractURI() external view returns (string memory);\r\n}\r\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Trees proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\n            }\n        }\n        return computedHash;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/IERC2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\r\n\r\n///\r\n/// @dev Interface for the NFT Royalty Standard\r\n///\r\ninterface IERC2981 is IERC165 {\r\n    /// ERC165 bytes to add to interface array - set in parent contract\r\n    /// implementing this standard\r\n    ///\r\n    /// bytes4(keccak256(\"royaltyInfo(uint256,uint256)\")) == 0x2a55205a\r\n    /// bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\r\n    /// _registerInterface(_INTERFACE_ID_ERC2981);\r\n\r\n    /// @notice Called with the sale price to determine how much royalty\r\n    //          is owed and to whom.\r\n    /// @param _tokenId - the NFT asset queried for royalty information\r\n    /// @param _salePrice - the sale price of the NFT asset specified by _tokenId\r\n    /// @return receiver - address of who should be sent the royalty payment\r\n    /// @return royaltyAmount - the royalty payment amount for _salePrice\r\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\r\n        external\r\n        view\r\n        returns (address receiver, uint256 royaltyAmount);\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}