{{
  "language": "Solidity",
  "sources": {
    "contracts/CyberBrokers.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\";\n\nimport \"./CyberBrokersMetadata.sol\";\n\ncontract CyberBrokers is ERC721Burnable, Ownable\n{\n\t// Contracts\n\tCyberBrokersMetadata public cyberBrokersMetadata;\n\n\t// Metadata information\n\tstring private _baseUri = 'https://cyberbrokers.io/api/cyberbroker/';\n\n\t// Minter address\n\taddress public cyberBrokersMintContract;\n\n\t// Constants\n\tuint256 constant public TOTAL_CYBERBROKERS = 10001;\n\n\t// Keeping track\n\tuint256 public totalMinted = 0;\n\tuint256 public totalUnplugged = 0;\n\n\t// Metadata provenance hash\n\tstring public provenanceHash = \"c235983e3a4834b2fe7c153da0123f03b7d50e1e80537782fa8d73e642d799fa\";\n\n\tconstructor(\n\t\taddress _CyberBrokersMetadataAddress\n\t)\n\t\tERC721(\"CyberBrokers\", \"CYBERBROKERS\")\n\t{\n\t\t// Set the addresses\n\t\tsetCyberBrokersMetadataAddress(_CyberBrokersMetadataAddress);\n\n\t\t// Mint Asherah to Josie\n\t\t_mintCyberBroker(0x2999377CD7A7b5FC9Fd61dB33610C891602Ce037, 0);\n\t}\n\n\n\t/**\n\t * Metadata functionality\n\t **/\n\tfunction setCyberBrokersMetadataAddress(address _CyberBrokersMetadataAddress) public onlyOwner {\n\t\tcyberBrokersMetadata = CyberBrokersMetadata(_CyberBrokersMetadataAddress);\n\t}\n\n\tfunction setBaseUri(string calldata _uri) public onlyOwner {\n\t\t_baseUri = _uri;\n\t}\n\n\tfunction _baseURI() internal view virtual override returns (string memory) {\n\t\treturn _baseUri;\n\t}\n\n\tfunction tokenURI(uint256 tokenId) public view override returns (string memory) {\n\t\trequire(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n\t\tif (cyberBrokersMetadata.hasOnchainMetadata(tokenId)) {\n\t\t\treturn cyberBrokersMetadata.tokenURI(tokenId);\n\t\t}\n\n\t\treturn super.tokenURI(tokenId);\n\t}\n\n\tfunction render(uint256 _tokenId)\n\t\texternal view\n\t\treturns (string memory)\n\t{\n\t\trequire(_exists(_tokenId), \"Non-existent token to render.\");\n\t\treturn cyberBrokersMetadata.render(_tokenId);\n\t}\n\n\n\t/**\n\t * Wrapper for Enumerable functions: totalSupply & getTokens\n\t **/\n\tfunction totalSupply() public view returns (uint256) {\n\t\treturn totalMinted - totalUnplugged;\n\t}\n\n\t// Do not use this on-chain, it's O(N)\n\t// This is why we use a non-standard name instead of tokenOfOwnerByIndex\n\tfunction getTokens(address addr) public view returns (uint256[] memory) {\n\t\t// Prepare array of tokens\n\t\tuint256 numTokensOwned = balanceOf(addr);\n\t\tuint[] memory tokens = new uint[](numTokensOwned);\n\n\t\tuint256 currentTokensIdx;\n\t\tfor (uint256 idx; idx < TOTAL_CYBERBROKERS; idx++) {\n\t\t\tif (_exists(idx) && ownerOf(idx) == addr) {\n\t\t\t\ttokens[currentTokensIdx++] = idx;\n\n\t\t\t\tif (currentTokensIdx == numTokensOwned) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn tokens;\n\t}\n\n\n\t/**\n\t * Minting functionality\n\t **/\n\tfunction setMintContractAddress(address _mintContract) public onlyOwner {\n\t\tcyberBrokersMintContract = _mintContract;\n\t}\n\n\tfunction mintCyberBrokerFromMintContract(address to, uint256 tokenId) external {\n\t\trequire(msg.sender == cyberBrokersMintContract, \"Only mint contract can mint\");\n\t\t_mintCyberBroker(to, tokenId);\n\t}\n\n\tfunction _mintCyberBroker(address to, uint256 tokenId) private {\n\t\trequire(totalMinted < TOTAL_CYBERBROKERS, \"Max CyberBrokers minted\");\n\t\t_mint(to, tokenId);\n\t\ttotalMinted++;\n\t}\n\n\n\t/**\n\t * Burn & unplug: alias for burn\n\t **/\n\tfunction burn(uint256 tokenId) public virtual override {\n\t\tsuper.burn(tokenId);\n\t\ttotalUnplugged++;\n\t}\n\n\tfunction unplug(uint256 tokenId) public {\n\t\tburn(tokenId);\n\t}\n\n\n\t/**\n\t * Withdraw functions\n\t **/\n\tfunction withdraw() public onlyOwner {\n\t\tuint256 balance = address(this).balance;\n\t\t(bool success,) = msg.sender.call{value: balance}('');\n\t\trequire(success, 'Fail Transfer');\n\t}\n\n\n\t/**\n\t * On-Chain Royalties & Interface\n\t **/\n\tfunction supportsInterface(bytes4 interfaceId)\n\t\tpublic\n\t\tview\n\t\toverride\n\t\treturns (bool)\n\t{\n\t\treturn\n\t\t\tinterfaceId == this.royaltyInfo.selector ||\n\t\t\tsuper.supportsInterface(interfaceId);\n\t}\n\n\tfunction royaltyInfo(uint256, uint256 amount)\n\t\tpublic\n\t\tview\n\t\treturns (address, uint256)\n\t{\n\t\t// 5% royalties\n\t\treturn (owner(), (amount * 500) / 10000);\n\t}\n\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @title ERC721 Burnable Token\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\n */\nabstract contract ERC721Burnable is Context, ERC721 {\n    /**\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\n     *\n     * Requirements:\n     *\n     * - The caller must own `tokenId` or be an approved operator.\n     */\n    function burn(uint256 tokenId) public virtual {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721Burnable: caller is not owner nor approved\");\n        _burn(tokenId);\n    }\n}\n"
    },
    "contracts/CyberBrokersMetadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"./ContractDataStorage.sol\";\nimport \"./SvgParser.sol\";\n\ncontract CyberBrokersMetadata is Ownable {\n  using Strings for uint256;\n\n  bool private _useOnChainMetadata = false;\n\n  string private _externalUri = \"https://cyberbrokers.io/\";\n  string private _imageCacheUri = \"\";\n\n  // Contracts\n  ContractDataStorage public contractDataStorage;\n  SvgParser public svgParser;\n\n  constructor(\n    address _contractDataStorageAddress,\n    address _svgParserAddress\n  ) {\n    // Set the addresses\n    setContractDataStorageAddress(_contractDataStorageAddress);\n    setSvgParserAddress(_svgParserAddress);\n  }\n\n  function setContractDataStorageAddress(address _contractDataStorageAddress) public onlyOwner {\n    contractDataStorage = ContractDataStorage(_contractDataStorageAddress);\n  }\n\n  function setSvgParserAddress(address _svgParserAddress) public onlyOwner {\n    svgParser = SvgParser(_svgParserAddress);\n  }\n\n\n  /**\n   * On-Chain Metadata Construction\n   **/\n\n  function hasOnchainMetadata(uint256 tokenId) public view returns (bool) {\n    return _useOnChainMetadata;\n  }\n\n  function setOnChainMetadata(bool _state) public onlyOwner {\n    _useOnChainMetadata = _state;\n  }\n\n  function setExternalUri(string calldata _uri) public onlyOwner {\n    _externalUri = _uri;\n  }\n\n  function setImageCacheUri(string calldata _uri) public onlyOwner {\n    _imageCacheUri = _uri;\n  }\n\n  function tokenURI(uint256 tokenId) public view returns (string memory) {\n    return string(\n        abi.encodePacked(\n            abi.encodePacked(\n                bytes('data:application/json;utf8,{\"name\":\"'),\n                getName(tokenId),\n                bytes('\",\"description\":\"'),\n                getDescription(tokenId),\n                bytes('\",\"external_url\":\"'),\n                getExternalUrl(tokenId),\n                bytes('\",\"image\":\"'),\n                getImageCache(tokenId)\n            ),\n            abi.encodePacked(\n                bytes('\",\"attributes\":['),\n                getAttributes(tokenId),\n                bytes(']}')\n            )\n        )\n    );\n  }\n\n  function getName(uint256 tokenId) public view returns (string memory) {\n    return \"Test Name\";\n  }\n\n  function getDescription(uint256 tokenId) public view returns (string memory) {\n    return \"Test Description\";\n  }\n\n  function getExternalUrl(uint256 tokenId) public view returns (string memory) {\n    return string(abi.encodePacked(_externalUri, tokenId.toString()));\n  }\n\n  function getImageCache(uint256 tokenId) public view returns (string memory) {\n    return string(abi.encodePacked(_imageCacheUri, tokenId.toString()));\n  }\n\n  function getAttributes(uint256 tokenId) public view returns (string memory) {\n    return string(\n      abi.encodePacked(\n        bytes('{\"trait_type\": \"Mind\", \"value\": 30}')\n      )\n    );\n  }\n\n\n  /**\n   * On-Chain Token SVG Rendering\n   **/\n\n  function renderData(string memory _key, uint256 _startIndex)\n    public\n    view\n    returns (\n      string memory _output,\n      uint256 _endIndex\n    )\n  {\n    require(contractDataStorage.hasKey(_key));\n    return svgParser.parse(contractDataStorage.getData(_key), _startIndex);\n  }\n\n  function render(uint256 _tokenId)\n    public\n    pure\n    returns (string memory)\n  {\n    require(_tokenId >= 0 && _tokenId <= 10000, \"Can only render valid token ID\");\n    return string(\"\");\n  }\n\n\n  /**\n   * Off-Chain Token SVG Rendering\n   **/\n\n  function getTokenData(uint256 _tokenId)\n    public\n    pure\n    returns (string memory)\n  {\n    require(_tokenId >= 0 && _tokenId <= 10000, \"Can only render valid token ID\");\n    return string(\"\");\n  }\n\n  function getOffchainSvgParser()\n    public\n    view\n    returns (\n      string memory _output\n    )\n  {\n    string memory _key = 'svg-parser.js';\n    require(contractDataStorage.hasKey(_key), \"Off-chain SVG Parser not uploaded\");\n    return string(contractDataStorage.getData(_key));\n  }\n\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/ContractDataStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * Explaining the `init` variable within saveData:\n *\n * 61_00_00 -- PUSH2 (size)\n * 60_00 -- PUSH1 (code position)\n * 60_00 -- PUSH1 (mem position)\n * 39 CODECOPY\n * 61_00_00 PUSH2 (size)\n * 60_00 PUSH1 (mem position)\n * f3 RETURN\n *\n **/\n\ncontract ContractDataStorage is Ownable {\n\n  struct ContractData {\n    address rawContract;\n    uint128 size;\n    uint128 offset;\n  }\n\n  struct ContractDataPages {\n    uint256 maxPageNumber;\n    bool exists;\n    mapping (uint256 => ContractData) pages;\n  }\n\n  mapping (string => ContractDataPages) internal _contractDataPages;\n\n  mapping (address => bool) internal _controllers;\n\n  constructor() {\n    updateController(_msgSender(), true);\n  }\n\n  /**\n   * Access Control\n   **/\n  function updateController(address _controller, bool _status) public onlyOwner {\n    _controllers[_controller] = _status;\n  }\n\n  modifier onlyController() {\n    require(_controllers[_msgSender()], \"ContractDataStorage: caller is not a controller\");\n    _;\n  }\n\n  /**\n   * Storage & Revocation\n   **/\n\n  function saveData(\n    string memory _key,\n    uint128 _pageNumber,\n    bytes memory _b\n  )\n    public\n    onlyController\n  {\n    require(_b.length < 24576, \"SvgStorage: Exceeded 24,576 bytes max contract size\");\n\n    // Create the header for the contract data\n    bytes memory init = hex\"610000_600e_6000_39_610000_6000_f3\";\n    bytes1 size1 = bytes1(uint8(_b.length));\n    bytes1 size2 = bytes1(uint8(_b.length >> 8));\n    init[2] = size1;\n    init[1] = size2;\n    init[10] = size1;\n    init[9] = size2;\n\n    // Prepare the code for storage in a contract\n    bytes memory code = abi.encodePacked(init, _b);\n\n    // Create the contract\n    address dataContract;\n    assembly {\n      dataContract := create(0, add(code, 32), mload(code))\n      if eq(dataContract, 0) {\n        returndatacopy(0, 0, returndatasize())\n        revert(0, returndatasize())\n      }\n    }\n\n    // Store the record of the contract\n    saveDataForDeployedContract(\n      _key,\n      _pageNumber,\n      dataContract,\n      uint128(_b.length),\n      0\n    );\n  }\n\n  function saveDataForDeployedContract(\n    string memory _key,\n    uint256 _pageNumber,\n    address dataContract,\n    uint128 _size,\n    uint128 _offset\n  )\n    public\n    onlyController\n  {\n    // Pull the current data for the contractData\n    ContractDataPages storage _cdPages = _contractDataPages[_key];\n\n    // Store the maximum page\n    if (_cdPages.maxPageNumber < _pageNumber) {\n      _cdPages.maxPageNumber = _pageNumber;\n    }\n\n    // Keep track of the existance of this key\n    _cdPages.exists = true;\n\n    // Add the page to the location needed\n    _cdPages.pages[_pageNumber] = ContractData(\n      dataContract,\n      _size,\n      _offset\n    );\n  }\n\n  function revokeContractData(\n    string memory _key\n  )\n    public\n    onlyController\n  {\n    delete _contractDataPages[_key];\n  }\n\n  function getSizeOfPages(\n    string memory _key\n  )\n    public\n    view\n    returns (uint256)\n  {\n    // For all data within the contract data pages, iterate over and compile them\n    ContractDataPages storage _cdPages = _contractDataPages[_key];\n\n    // Determine the total size\n    uint256 totalSize;\n    for (uint256 idx; idx <= _cdPages.maxPageNumber; idx++) {\n      totalSize += _cdPages.pages[idx].size;\n    }\n\n    return totalSize;\n  }\n\n  function getData(\n    string memory _key\n  )\n    public\n    view\n    returns (bytes memory)\n  {\n    // Get the total size\n    uint256 totalSize = getSizeOfPages(_key);\n\n    // Create a region large enough for all of the data\n    bytes memory _totalData = new bytes(totalSize);\n\n    // Retrieve the pages\n    ContractDataPages storage _cdPages = _contractDataPages[_key];\n\n    // For each page, pull and compile\n    uint256 currentPointer = 32;\n    for (uint256 idx; idx <= _cdPages.maxPageNumber; idx++) {\n      ContractData storage dataPage = _cdPages.pages[idx];\n      address dataContract = dataPage.rawContract;\n      uint256 size = uint256(dataPage.size);\n      uint256 offset = uint256(dataPage.offset);\n\n      // Copy directly to total data\n      assembly {\n        extcodecopy(dataContract, add(_totalData, currentPointer), offset, size)\n      }\n\n      // Update the current pointer\n      currentPointer += size;\n    }\n\n    return _totalData;\n  }\n\n  function getDataForAll(string[] memory _keys)\n    public\n    view\n    returns (bytes memory)\n  {\n    // Get the total size of all of the keys\n    uint256 totalSize;\n    for (uint256 idx; idx < _keys.length; idx++) {\n      totalSize += getSizeOfPages(_keys[idx]);\n    }\n\n    // Create a region large enough for all of the data\n    bytes memory _totalData = new bytes(totalSize);\n\n    // For each key, pull down all data\n    uint256 currentPointer = 32;\n    for (uint256 idx; idx < _keys.length; idx++) {\n      // Retrieve the set of pages\n      ContractDataPages storage _cdPages = _contractDataPages[_keys[idx]];\n\n      // For each page, pull and compile\n      for (uint256 innerIdx; innerIdx <= _cdPages.maxPageNumber; innerIdx++) {\n        ContractData storage dataPage = _cdPages.pages[innerIdx];\n        address dataContract = dataPage.rawContract;\n        uint256 size = uint256(dataPage.size);\n        uint256 offset = uint256(dataPage.offset);\n\n        // Copy directly to total data\n        assembly {\n          extcodecopy(dataContract, add(_totalData, currentPointer), offset, size)\n        }\n\n        // Update the current pointer\n        currentPointer += size;\n      }\n    }\n\n    return _totalData;\n  }\n\n  function hasKey(string memory _key)\n    public\n    view\n    returns (bool)\n  {\n    return _contractDataPages[_key].exists;\n  }\n\n}\n"
    },
    "contracts/SvgParser.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./Utils.sol\";\n\ncontract SvgParser {\n\n    // Limits\n    uint256 constant DEFAULT_THRESHOLD_COUNTER = 2500;\n\n    // Bits & Masks\n    bytes1 constant tagBit            = bytes1(0x80);\n    bytes1 constant startTagBit       = bytes1(0x40);\n    bytes1 constant tagTypeMask       = bytes1(0x3F);\n    bytes1 constant attributeTypeMask = bytes1(0x7F);\n\n    bytes1 constant dCommandBit       = bytes1(0x80);\n    bytes1 constant percentageBit     = bytes1(0x40);\n    bytes1 constant negativeBit       = bytes1(0x20);\n    bytes1 constant decimalBit        = bytes1(0x10);\n\n    bytes1 constant numberMask        = bytes1(0x0F);\n\n    bytes1 constant filterInIdBit     = bytes1(0x80);\n\n    bytes1 constant filterInIdMask    = bytes1(0x7F);\n\n    // SVG tags\n    bytes constant SVG_OPEN_TAG = bytes('<?xml version=\"1.0\" encoding=\"UTF-8\"?><svg width=\"1320px\" height=\"1760px\" viewBox=\"0 0 1320 1760\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">');\n    bytes constant SVG_CLOSE_TAG = bytes(\"</svg>\");\n\n    bytes[25] TAGS = [\n        bytes(\"g\"),\n        bytes(\"polygon\"),\n        bytes(\"path\"),\n        bytes(\"circle\"),\n        bytes(\"defs\"),\n        bytes(\"linearGradient\"),\n        bytes(\"stop\"),\n        bytes(\"rect\"),\n        bytes(\"polyline\"),\n        bytes(\"text\"),\n        bytes(\"tspan\"),\n        bytes(\"mask\"),\n        bytes(\"use\"),\n        bytes(\"ellipse\"),\n        bytes(\"radialGradient\"),\n        bytes(\"filter\"),\n        bytes(\"feColorMatrix\"),\n        bytes(\"feComposite\"),\n        bytes(\"feGaussianBlur\"),\n        bytes(\"feMorphology\"),\n        bytes(\"feOffset\"),\n        bytes(\"pattern\"),\n        bytes(\"feMergeNode\"),\n        bytes(\"feMerge\"),\n        bytes(\"INVALIDTAG\")\n    ];\n\n    bytes[54] ATTRIBUTES = [\n        bytes(\"d\"),\n        bytes(\"points\"),\n        bytes(\"transform\"),\n        bytes(\"cx\"),\n        bytes(\"cy\"),\n        bytes(\"r\"),\n        bytes(\"stroke\"),\n        bytes(\"stroke-width\"),\n        bytes(\"fill\"),\n        bytes(\"fill-opacity\"),\n        bytes(\"translate\"),\n        bytes(\"rotate\"),\n        bytes(\"scale\"),\n        bytes(\"x1\"),\n        bytes(\"y1\"),\n        bytes(\"x2\"),\n        bytes(\"y2\"),\n        bytes(\"stop-color\"),\n        bytes(\"offset\"),\n        bytes(\"stop-opacity\"),\n        bytes(\"width\"),\n        bytes(\"height\"),\n        bytes(\"x\"),\n        bytes(\"y\"),\n        bytes(\"font-size\"),\n        bytes(\"letter-spacing\"),\n        bytes(\"opacity\"),\n        bytes(\"id\"),\n        bytes(\"xlink:href\"),\n        bytes(\"rx\"),\n        bytes(\"ry\"),\n        bytes(\"mask\"),\n        bytes(\"fx\"),\n        bytes(\"fy\"),\n        bytes(\"gradientTransform\"),\n        bytes(\"filter\"),\n        bytes(\"filterUnits\"),\n        bytes(\"result\"),\n        bytes(\"in\"),\n        bytes(\"in2\"),\n        bytes(\"type\"),\n        bytes(\"values\"),\n        bytes(\"operator\"),\n        bytes(\"k1\"),\n        bytes(\"k2\"),\n        bytes(\"k3\"),\n        bytes(\"k4\"),\n        bytes(\"stdDeviation\"),\n        bytes(\"edgeMode\"),\n        bytes(\"radius\"),\n        bytes(\"fill-rule\"),\n        bytes(\"dx\"),\n        bytes(\"dy\"),\n        bytes(\"INVALIDATTRIBUTE\")\n    ];\n\n    bytes[2] PAIR_NUMBER_SET_ATTRIBUTES = [\n        bytes(\"translate\"),\n        bytes(\"scale\")\n    ];\n\n    bytes[4] PAIR_COLOR_ATTRIBUTES = [\n        bytes(\"stroke\"),\n        bytes(\"fill\"),\n        bytes(\"stop-color\"),\n        bytes(\"mask\")\n    ];\n\n    bytes[23] SINGLE_NUMBER_SET_ATTRIBUTES = [\n        bytes(\"cx\"),\n        bytes(\"cy\"),\n        bytes(\"r\"),\n        bytes(\"rotate\"),\n        bytes(\"x1\"),\n        bytes(\"y1\"),\n        bytes(\"x2\"),\n        bytes(\"y2\"),\n        bytes(\"offset\"),\n        bytes(\"x\"),\n        bytes(\"y\"),\n        bytes(\"rx\"),\n        bytes(\"ry\"),\n        bytes(\"fx\"),\n        bytes(\"fy\"),\n        bytes(\"font-size\"),\n        bytes(\"letter-spacing\"),\n        bytes(\"stroke-width\"),\n        bytes(\"width\"),\n        bytes(\"height\"),\n        bytes(\"fill-opacity\"),\n        bytes(\"stop-opacity\"),\n        bytes(\"opacity\")\n    ];\n\n    bytes[20] D_COMMANDS = [\n        bytes(\"M\"),\n        bytes(\"m\"),\n        bytes(\"L\"),\n        bytes(\"l\"),\n        bytes(\"H\"),\n        bytes(\"h\"),\n        bytes(\"V\"),\n        bytes(\"v\"),\n        bytes(\"C\"),\n        bytes(\"c\"),\n        bytes(\"S\"),\n        bytes(\"s\"),\n        bytes(\"Q\"),\n        bytes(\"q\"),\n        bytes(\"T\"),\n        bytes(\"t\"),\n        bytes(\"A\"),\n        bytes(\"a\"),\n        bytes(\"Z\"),\n        bytes(\"z\")\n    ];\n\n    bytes[2] FILL_RULE = [\n        bytes(\"nonzero\"),\n        bytes(\"evenodd\")\n    ];\n\n    bytes[2] FILTER_UNIT = [\n        bytes(\"userSpaceOnUse\"),\n        bytes(\"objectBoundingBox\")\n    ];\n\n    bytes[6] FILTER_IN = [\n        bytes(\"SourceGraphic\"),\n        bytes(\"SourceAlpha\"),\n        bytes(\"BackgroundImage\"),\n        bytes(\"BackgroundAlpha\"),\n        bytes(\"FillPaint\"),\n        bytes(\"StrokePaint\")\n    ];\n\n    bytes[16] FILTER_TYPE = [\n        bytes(\"translate\"),\n        bytes(\"scale\"),\n        bytes(\"rotate\"),\n        bytes(\"skewX\"),\n        bytes(\"skewY\"),\n        bytes(\"matrix\"),\n        bytes(\"saturate\"),\n        bytes(\"hueRotate\"),\n        bytes(\"luminanceToAlpha\"),\n        bytes(\"identity\"),\n        bytes(\"table\"),\n        bytes(\"discrete\"),\n        bytes(\"linear\"),\n        bytes(\"gamma\"),\n        bytes(\"fractalNoise\"),\n        bytes(\"turbulence\")\n    ];\n\n    bytes[9] FILTER_OPERATOR = [\n        bytes(\"over\"),\n        bytes(\"in\"),\n        bytes(\"out\"),\n        bytes(\"atop\"),\n        bytes(\"xor\"),\n        bytes(\"lighter\"),\n        bytes(\"arithmetic\"),\n        bytes(\"erode\"),\n        bytes(\"dilate\")\n    ];\n\n    bytes[3] FILTER_EDGEMODE = [\n        bytes(\"duplicate\"),\n        bytes(\"wrap\"),\n        bytes(\"none\")\n    ];\n\n\n    function checkTag(bytes1 line) internal pure returns (bool) {\n        return line & tagBit > 0;\n    }\n\n    function checkStartTag(bytes1 line) internal pure returns (bool) {\n        return line & startTagBit > 0;\n    }\n\n    function getTag(bytes1 line) internal view returns (bytes memory) {\n        uint8 key = uint8(line & tagTypeMask);\n\n        if (key >= TAGS.length - 1) {\n            return TAGS[TAGS.length - 1];\n        }\n\n        return TAGS[key];\n    }\n\n    function getAttribute(bytes1 line) internal view returns (bytes memory) {\n        uint8 key = uint8(line & attributeTypeMask);\n\n        if (key >= ATTRIBUTES.length - 1) {\n            return ATTRIBUTES[ATTRIBUTES.length - 1];\n        }\n\n        return ATTRIBUTES[key];\n    }\n\n    function compareAttrib(bytes memory attrib, string memory compareTo) internal pure returns (bool) {\n        return keccak256(attrib) == keccak256(bytes(compareTo));\n    }\n\n    function compareAttrib(bytes memory attrib, bytes storage compareTo) internal pure returns (bool) {\n        return keccak256(attrib) == keccak256(compareTo);\n    }\n\n    function addOutput(bytes memory _output, uint256 _outputIdx, bytes memory _addendum) internal pure returns (uint256) {\n        for (uint256 _idx; _idx < _addendum.length; _idx++) {\n            _output[_outputIdx++] = _addendum[_idx];\n        }\n        return _outputIdx;\n    }\n\n    function addOutput(bytes memory _output, uint256 _outputIdx, bytes memory _addendum1, bytes memory _addendum2)\n        internal pure returns (uint256)\n    {\n        return addOutput(_output, addOutput(_output, _outputIdx, _addendum1), _addendum2);\n    }\n\n    function addOutput(bytes memory _output, uint256 _outputIdx, bytes memory _addendum1, bytes memory _addendum2, bytes memory _addendum3)\n        internal pure returns (uint256)\n    {\n        return addOutput(_output, addOutput(_output, addOutput(_output, _outputIdx, _addendum1), _addendum2), _addendum3);\n    }\n\n    function addOutput(bytes memory _output, uint256 _outputIdx, bytes memory _addendum1, bytes memory _addendum2, bytes memory _addendum3, bytes memory _addendum4)\n        internal pure returns (uint256)\n    {\n        return addOutput(_output, addOutput(_output, addOutput(_output, addOutput(_output, _outputIdx, _addendum1), _addendum2), _addendum3), _addendum4);\n    }\n\n    function parse(bytes memory input, uint256 idx) public view returns (string memory, uint256) {\n        return parse(input, idx, DEFAULT_THRESHOLD_COUNTER);\n    }\n\n    function parse(bytes memory input, uint256 idx, uint256 thresholdCounter) public view returns (string memory, uint256) {\n        // Keep track of what we're returning\n        bytes memory output = new bytes(thresholdCounter * 15); // Plenty of padding\n        uint256 outputIdx = 0;\n\n        bool isTagOpen = false;\n        uint256 counter = idx;\n\n        // Start the output with SVG tags if needed\n        if (idx == 0) {\n            outputIdx = addOutput(output, outputIdx, SVG_OPEN_TAG);\n        }\n\n        // Go through all bytes we want to review\n        while (idx < input.length)\n        {\n            // Get the current byte\n            bytes1 _b = bytes1(input[idx]);\n\n            // If this is a tag, determine if we're creating a new tag\n            if (checkTag(_b)) {\n                // Close the current tag\n                bool closeTag = false;\n                if (isTagOpen) {\n                    closeTag = true;\n                    isTagOpen = false;\n\n                    if ((idx - counter) >= thresholdCounter) {\n                        outputIdx = addOutput(output, outputIdx, bytes(\">\"));\n                        break;\n                    }\n                }\n\n                // Start the next tag\n                if (checkStartTag(_b)) {\n                    isTagOpen = true;\n\n                    if (closeTag) {\n                        outputIdx = addOutput(output, outputIdx, bytes(\"><\"), getTag(_b));\n                    } else {\n                        outputIdx = addOutput(output, outputIdx, bytes(\"<\"), getTag(_b));\n                    }\n                } else {\n                    // If needed, open and close an end tag\n                    if (closeTag) {\n                        outputIdx = addOutput(output, outputIdx, bytes(\"></\"), getTag(_b), bytes(\">\"));\n                    } else {\n                        outputIdx = addOutput(output, outputIdx, bytes(\"</\"), getTag(_b), bytes(\">\"));\n                    }\n                }\n            }\n            else\n            {\n                // Attributes\n                bytes memory attrib = getAttribute(_b);\n\n                if (compareAttrib(attrib, \"transform\") || compareAttrib(attrib, \"gradientTransform\")) {\n                    // Keep track of which transform we're doing\n                    bool isGradientTransform = compareAttrib(attrib, \"gradientTransform\");\n\n                    // Get the next byte & attribute\n                    idx += 2;\n                    _b = bytes1(input[idx]);\n                    attrib = getAttribute(_b);\n\n                    outputIdx = addOutput(output, outputIdx, bytes(\" \"), isGradientTransform ? bytes('gradientTransform=\"') : bytes('transform=\"'));\n                    while (compareAttrib(attrib, 'translate') || compareAttrib(attrib, 'rotate') || compareAttrib(attrib, 'scale')) {\n                        outputIdx = addOutput(output, outputIdx, bytes(\" \"));\n                        (idx, outputIdx) = parseAttributeValues(output, outputIdx, attrib, input, idx);\n\n                        // Get the next byte & attribute\n                        idx += 2;\n                        _b = bytes1(input[idx]);\n                        attrib = getAttribute(_b);\n                    }\n\n                    outputIdx = addOutput(output, outputIdx, bytes('\"'));\n\n                    // Undo the previous index increment\n                    idx -= 2;\n                }\n                else if (compareAttrib(attrib, \"d\")) {\n                    (idx, outputIdx) = packDPoints(output, outputIdx, input, idx);\n                }\n                else if (compareAttrib(attrib, \"points\"))\n                {\n                    (idx, outputIdx) = packPoints(output, outputIdx, input, idx, bytes(' points=\"'));\n                }\n                else if (compareAttrib(attrib, \"values\"))\n                {\n                    (idx, outputIdx) = packPoints(output, outputIdx, input, idx, bytes(' values=\"'));\n                }\n                else\n                {\n                    outputIdx = addOutput(output, outputIdx, bytes(\" \"));\n                    (idx, outputIdx) = parseAttributeValues(output, outputIdx, attrib, input, idx);\n                }\n            }\n\n            idx += 2;\n        }\n\n        if (idx >= input.length) {\n            // Close out the SVG tags\n            outputIdx = addOutput(output, outputIdx, SVG_CLOSE_TAG);\n            idx = 0;\n        }\n\n        // Pack everything down to the size that actually fits\n        bytes memory finalOutput = new bytes(outputIdx);\n        for (uint256 _idx; _idx < outputIdx; _idx++) {\n            finalOutput[_idx] = output[_idx];\n        }\n\n        return (string(finalOutput), idx);\n    }\n\n    function packDPoints(bytes memory output, uint256 outputIdx, bytes memory input, uint256 idx) internal view returns (uint256, uint256) {\n        outputIdx = addOutput(output, outputIdx, bytes(' d=\"'));\n\n        // Due to the open-ended nature of points, we concat directly to local_output\n        idx += 2;\n        uint256 count = uint256(uint8(input[idx + 1])) * 2**8 + uint256(uint8(input[idx]));\n        for (uint256 countIdx = 0; countIdx < count; countIdx++) {\n            idx += 2;\n\n            // Add the d command prior to any bits\n            if (uint8(input[idx + 1] & dCommandBit) > 0) {\n                outputIdx = addOutput(output, outputIdx, bytes(\" \"), D_COMMANDS[uint8(input[idx])]);\n            }\n            else\n            {\n                countIdx++;\n                outputIdx = addOutput(output, outputIdx, bytes(\" \"), parseNumberSetValues(input[idx], input[idx + 1]), bytes(\",\"), parseNumberSetValues(input[idx + 2], input[idx + 3]));\n                idx += 2;\n            }\n        }\n\n        outputIdx = addOutput(output, outputIdx, bytes('\"'));\n\n        return (idx, outputIdx);\n    }\n\n    function packPoints(bytes memory output, uint256 outputIdx, bytes memory input, uint256 idx, bytes memory attributePreface) internal view returns (uint256, uint256) {\n        outputIdx = addOutput(output, outputIdx, attributePreface);\n\n        // Due to the open-ended nature of points, we concat directly to local_output\n        idx += 2;\n        uint256 count = uint256(uint8(input[idx + 1])) * 2**8 + uint256(uint8(input[idx]));\n        for (uint256 countIdx = 0; countIdx < count; countIdx++) {\n            idx += 2;\n            bytes memory numberSet = parseNumberSetValues(input[idx], input[idx + 1]);\n\n            if (countIdx > 0) {\n                outputIdx = addOutput(output, outputIdx, bytes(\" \"), numberSet);\n            } else {\n                outputIdx = addOutput(output, outputIdx, numberSet);\n            }\n        }\n\n        outputIdx = addOutput(output, outputIdx, bytes('\"'));\n\n        return (idx, outputIdx);\n    }\n\n    function parseAttributeValues(\n        bytes memory output,\n        uint256 outputIdx,\n        bytes memory attrib,\n        bytes memory input,\n        uint256 idx\n    )\n        internal\n        view\n        returns (uint256, uint256)\n    {\n        // Handled in main function\n        if (compareAttrib(attrib, \"d\") || compareAttrib(attrib, \"points\") || compareAttrib(attrib, \"values\") || compareAttrib(attrib, 'transform')) {\n            return (idx + 2, outputIdx);\n        }\n\n        if (compareAttrib(attrib, 'id') || compareAttrib(attrib, 'xlink:href') || compareAttrib(attrib, 'filter') || compareAttrib(attrib, 'result'))\n        {\n            bytes memory number = Utils.uint2bytes(uint256(uint8(input[idx + 3])) * 2**8 + uint256(uint8(input[idx + 2])));\n\n            if (compareAttrib(attrib, 'xlink:href')) {\n                outputIdx = addOutput(output, outputIdx, attrib, bytes('=\"#id-'), number, bytes('\"'));\n            } else if (compareAttrib(attrib, 'filter')) {\n                outputIdx = addOutput(output, outputIdx, attrib, bytes('=\"url(#id-'), number, bytes(')\"'));\n            } else {\n                outputIdx = addOutput(output, outputIdx, attrib, bytes('=\"id-'), number, bytes('\"'));\n            }\n\n            return (idx + 2, outputIdx);\n        }\n\n        for (uint256 attribIdx = 0; attribIdx < PAIR_NUMBER_SET_ATTRIBUTES.length; attribIdx++) {\n            if (compareAttrib(attrib, PAIR_NUMBER_SET_ATTRIBUTES[attribIdx])) {\n                outputIdx = addOutput(output, outputIdx, attrib, bytes('('), parseNumberSetValues(input[idx + 2], input[idx + 3]), bytes(','));\n                outputIdx = addOutput(output, outputIdx, parseNumberSetValues(input[idx + 4], input[idx + 5]), bytes(')'));\n                return (idx + 4, outputIdx);\n            }\n        }\n\n        for (uint256 attribIdx = 0; attribIdx < PAIR_COLOR_ATTRIBUTES.length; attribIdx++) {\n            if (compareAttrib(attrib, PAIR_COLOR_ATTRIBUTES[attribIdx])) {\n                outputIdx = addOutput(output, outputIdx, attrib, bytes('=\"'), parseColorValues(input[idx + 2], input[idx + 3], input[idx + 4], input[idx + 5]), bytes('\"'));\n                return (idx + 4, outputIdx);\n            }\n        }\n\n        if (compareAttrib(attrib, 'rotate')) {\n            // Default, single number set values\n            outputIdx = addOutput(output, outputIdx, attrib, bytes('('), parseNumberSetValues(input[idx + 2], input[idx + 3]), bytes(')'));\n            return (idx + 2, outputIdx);\n        }\n\n        // Dictionary lookups\n        if (compareAttrib(attrib, 'in') || compareAttrib(attrib, 'in2')) {\n            // Special case for the dictionary lookup for in & in2 => allow for ID lookup\n            if (uint8(input[idx + 3] & filterInIdBit) > 0) {\n                bytes memory number = Utils.uint2bytes(uint256(uint8(input[idx + 3] & filterInIdMask)) * 2**8 + uint256(uint8(input[idx + 2])));\n                outputIdx = addOutput(output, outputIdx, attrib, bytes('=\"id-'), number, bytes('\"'));\n            } else {\n                outputIdx = addOutput(output, outputIdx, attrib, bytes('=\"'), FILTER_IN[uint8(input[idx + 2])], bytes('\"'));\n            }\n\n            return (idx + 2, outputIdx);\n        } else if (compareAttrib(attrib, 'type')) {\n            outputIdx = addOutput(output, outputIdx, attrib, bytes('=\"'), FILTER_TYPE[uint8(input[idx + 2])], bytes('\"'));\n            return (idx + 2, outputIdx);\n        } else if (compareAttrib(attrib, 'operator')) {\n            outputIdx = addOutput(output, outputIdx, attrib, bytes('=\"'), FILTER_OPERATOR[uint8(input[idx + 2])], bytes('\"'));\n            return (idx + 2, outputIdx);\n        } else if (compareAttrib(attrib, 'edgeMode')) {\n            outputIdx = addOutput(output, outputIdx, attrib, bytes('=\"'), FILTER_EDGEMODE[uint8(input[idx + 2])], bytes('\"'));\n            return (idx + 2, outputIdx);\n        } else if (compareAttrib(attrib, 'fill-rule')) {\n            outputIdx = addOutput(output, outputIdx, attrib, bytes('=\"'), FILL_RULE[uint8(input[idx + 2])], bytes('\"'));\n            return (idx + 2, outputIdx);\n        } else if (compareAttrib(attrib, 'filterUnits')) {\n            outputIdx = addOutput(output, outputIdx, attrib, bytes('=\"'), FILTER_UNIT[uint8(input[idx + 2])], bytes('\"'));\n            return (idx + 2, outputIdx);\n        }\n\n        // Default, single number set values\n        outputIdx = addOutput(output, outputIdx, attrib, bytes('=\"'), parseNumberSetValues(input[idx + 2], input[idx + 3]), bytes('\"'));\n        return (idx + 2, outputIdx);\n    }\n\n    function parseColorValues(bytes1 one, bytes1 two, bytes1 three, bytes1 four) internal pure returns (bytes memory) {\n        if (uint8(two) == 0xFF && uint8(one) == 0 && uint8(four) == 0 && uint8(three) == 0) {\n            // None identifier case\n            return bytes(\"none\");\n        }\n        else if (uint8(two) == 0x80 && uint8(one) == 0)\n        {\n            // URL identifier case\n            bytes memory number = Utils.uint2bytes(uint256(uint8(four)) * 2**8 + uint256(uint8(three)));\n            return abi.encodePacked(\"url(#id-\", number, \")\");\n        } else {\n            return Utils.unpackHexColorValues(uint8(one), uint8(four), uint8(three));\n        }\n    }\n\n    function parseNumberSetValues(bytes1 one, bytes1 two) internal pure returns (bytes memory) {\n        return Utils.unpackNumberSetValues(\n            uint256(uint8(two & numberMask)) * 2**8 + uint256(uint8(one)), // number\n            uint8(two & decimalBit) > 0, // decimal\n            uint8(two & negativeBit) > 0, // negative\n            uint8(two & percentageBit) > 0 // percent\n        );\n    }\n\n}\n"
    },
    "contracts/Utils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nlibrary Utils {\n\n  /**\n   * From https://github.com/provable-things/ethereum-api/blob/master/oraclizeAPI_0.5.sol\n   **/\n\n   function uint2bytes(uint _i) internal pure returns (bytes memory) {\n    if (_i == 0) {\n      return \"0\";\n    }\n    uint j = _i;\n    uint len;\n    while (j != 0) {\n      len++;\n      j /= 10;\n    }\n    bytes memory bstr = new bytes(len);\n    uint k = len - 1;\n    while (_i != 0) {\n      unchecked {\n        bstr[k--] = bytes1(uint8(48 + _i % 10));\n      }\n\n      _i /= 10;\n    }\n    return bstr;\n  }\n\n  function unpackNumberSetValues(uint _i, bool decimal, bool negative, bool percent) internal pure returns (bytes memory) {\n    // Base case\n    if (_i == 0) {\n      if (percent) {\n        return \"0%\";\n      } else {\n        return \"0\";\n      }\n    }\n\n    // Kick off length with the slots needed to make room for, considering certain bits\n    uint j = _i;\n    uint len = (negative ? 1 : 0) + (percent ? 1 : 0) + (decimal ? 2 : 0);\n\n    // See how many tens we need\n    uint numTens;\n    while (j != 0) {\n      numTens++;\n      j /= 10;\n    }\n\n    // Expand length\n    // Special case: if decimal & numTens is less than 3, need to pad by 3 since we'll left-pad zeroes\n    if (decimal && numTens < 3) {\n      len += 3;\n    } else {\n      len += numTens;\n    }\n\n    // Now create the byte \"string\"\n    bytes memory bstr = new bytes(len);\n\n    // Index from right-most to left-most\n    uint k = len - 1;\n\n    // Percent character\n    if (percent) {\n      bstr[k--] = bytes1(\"%\");\n    }\n\n    // The entire number\n    while (_i != 0) {\n      unchecked {\n        bstr[k--] = bytes1(uint8(48 + _i % 10));\n      }\n\n      _i /= 10;\n    }\n\n    // If a decimal, we need to left-pad if the numTens isn't enough\n    if (decimal) {\n      while (numTens < 3) {\n        bstr[k--] = bytes1(\"0\");\n        numTens++;\n      }\n      bstr[k--] = bytes1(\".\");\n\n      unchecked {\n        bstr[k--] = bytes1(\"0\");\n      }\n    }\n\n    // If negative, the last byte should be negative\n    if (negative) {\n      bstr[0] = bytes1(\"-\");\n    }\n\n    return bstr;\n  }\n\n  /**\n   * Reference pulled from https://gist.github.com/okwme/f3a35193dc4eb9d1d0db65ccf3eb4034\n   **/\n\n  function unpackHexColorValues(uint8 r, uint8 g, uint8 b) internal pure returns (bytes memory) {\n    bytes memory rHex = Utils.uint2hexchar(r);\n    bytes memory gHex = Utils.uint2hexchar(g);\n    bytes memory bHex = Utils.uint2hexchar(b);\n    bytes memory bstr = new bytes(7);\n    bstr[6] = bHex[1];\n    bstr[5] = bHex[0];\n    bstr[4] = gHex[1];\n    bstr[3] = gHex[0];\n    bstr[2] = rHex[1];\n    bstr[1] = rHex[0];\n    bstr[0] = bytes1(\"#\");\n    return bstr;\n  }\n\n  function uint2hexchar(uint8 _i) internal pure returns (bytes memory) {\n    uint8 mask = 15;\n    bytes memory bstr = new bytes(2);\n    bstr[1] = (_i & mask) > 9 ? bytes1(uint8(55 + (_i & mask))) : bytes1(uint8(48 + (_i & mask)));\n    bstr[0] = ((_i >> 4) & mask) > 9 ? bytes1(uint8(55 + ((_i >> 4) & mask))) : bytes1(uint8(48 + ((_i >> 4) & mask)));\n    return bstr;\n  }\n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}