{{
  "language": "Solidity",
  "sources": {
    "contracts/staking/LordsAndco.sol": {
      "content": "// SPDX-License-Identifier: MIT\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\npragma solidity ^0.8.7;\n\n\n//  /$$                                 /$$               /$$$         /$$$$$$              \n// | $$                                | $$              /$$ $$       /$$__  $$             \n// | $$        /$$$$$$   /$$$$$$   /$$$$$$$  /$$$$$$$   |  $$$       | $$  \\__/  /$$$$$$    \n// | $$       /$$__  $$ /$$__  $$ /$$__  $$ /$$_____/    /$$ $$/$$   | $$       /$$__  $$   \n// | $$      | $$  \\ $$| $$  \\__/| $$  | $$|  $$$$$$    | $$  $$_/   | $$      | $$  \\ $$   \n// | $$      | $$  | $$| $$      | $$  | $$ \\____  $$   | $$\\  $$    | $$    $$| $$  | $$   \n// | $$$$$$$$|  $$$$$$/| $$      |  $$$$$$$ /$$$$$$$/   |  $$$$/$$   |  $$$$$$/|  $$$$$$//$$\n// |________/ \\______/ |__/       \\_______/|_______/     \\____/\\_/    \\______/  \\______/|__/                                                                           \n\n\ninterface ILoomi  {\n  function depositLoomiFor(address user, uint256 amount) external;\n  function activeTaxCollectedAmount() external view returns (uint256);\n}\n\ninterface IStaking {\n  function ownerOf(address contractAddress, uint256 tokenId) external view returns (address);\n}\n\ncontract LordsAndCo is Ownable, ReentrancyGuard {\n    \n    // Creepz Contracts\n    IERC721 public loomiVault;\n    IERC721 public creepz;\n    ILoomi public loomi;\n    IStaking public staking;\n\n    // Variables for daily yield\n    uint256 public constant SECONDS_IN_DAY = 24 * 60 * 60;\n    uint256 public constant DIVIDER = 10000;\n    uint256 public baseYield;\n\n    // Config bools\n    bool public isPaused;\n    bool public creepzRestriction;\n\n    struct Staker {\n      uint256 accumulatedAmount;\n      uint256 lastCheckpoint;\n      uint256 loomiPotSnapshot;\n      uint256[] stakedVault;\n    }\n\n    mapping(address => Staker) private _stakers;\n    mapping(uint256 => address) private _ownerOfToken;\n\n    event Deposit(address indexed staker,uint256 tokensAmount);\n    event Withdraw(address indexed staker,uint256 tokensAmount);\n    event Claim(address indexed staker,uint256 tokensAmount);\n    event WithdrawStuckERC721(address indexed receiver, address indexed tokenAddress, uint256 indexed tokenId);\n\n    constructor(\n      address _loomiVault,\n      address _loomi,\n      address _creepz,\n      address _staking\n    ) {\n        loomiVault = IERC721(_loomiVault);\n        loomi = ILoomi(_loomi);\n        creepz = IERC721(_creepz);\n        staking = IStaking(_staking);\n\n        isPaused = true;\n        creepzRestriction = true;\n        baseYield = 500 ether;\n    }\n\n    modifier whenNotPaused() {\n      require(!isPaused, \"Contract paused\");\n        _;\n    }\n\n    /**\n    * @dev Function for loomiVault deposit\n    */\n    function deposit(uint256[] memory tokenIds) public nonReentrant whenNotPaused {\n      require(tokenIds.length > 0, \"Empty array\");\n      Staker storage user = _stakers[_msgSender()];\n\n      if (user.stakedVault.length == 0) {\n        uint256 currentLoomiPot = _getLoomiPot();\n        user.loomiPotSnapshot = currentLoomiPot;\n      } \n      accumulate(_msgSender());\n\n      for (uint256 i; i < tokenIds.length; i++) {\n        require(loomiVault.ownerOf(tokenIds[i]) == _msgSender(), \"Not the owner\");\n        loomiVault.safeTransferFrom(_msgSender(), address(this), tokenIds[i]);\n\n        _ownerOfToken[tokenIds[i]] = _msgSender();\n\n        user.stakedVault.push(tokenIds[i]);\n      }\n\n      emit Deposit(_msgSender(), tokenIds.length);\n    }\n\n    /**\n    * @dev Function for loomiVault withdraw\n    */\n    function withdraw(uint256[] memory tokenIds) public nonReentrant whenNotPaused {\n      require(tokenIds.length > 0, \"Empty array\");\n\n      Staker storage user = _stakers[_msgSender()];\n      accumulate(_msgSender());\n\n      for (uint256 i; i < tokenIds.length; i++) {\n        require(loomiVault.ownerOf(tokenIds[i]) == address(this), \"Not the owner\");\n\n        _ownerOfToken[tokenIds[i]] = address(0);\n        user.stakedVault = _moveTokenInTheList(user.stakedVault, tokenIds[i]);\n        user.stakedVault.pop();\n\n        loomiVault.safeTransferFrom(address(this), _msgSender(), tokenIds[i]);\n      }\n\n      emit Withdraw(_msgSender(), tokenIds.length);\n    }\n\n    /**\n    * @dev Function for loomi reward claim\n    * @notice caller must own a Genesis Creepz\n    */\n    function claim(uint256 tokenId) public nonReentrant whenNotPaused {\n      Staker storage user = _stakers[_msgSender()];\n      accumulate(_msgSender());\n\n      require(user.accumulatedAmount > 0, \"Insufficient funds\");\n      require(_validateCreepzOwner(tokenId, _msgSender()), \"!Creepz owner\");\n\n      uint256 currentLoomiPot = _getLoomiPot();\n      uint256 prevLoomiPot = user.loomiPotSnapshot;\n      uint256 change = currentLoomiPot * DIVIDER / prevLoomiPot;\n      uint256 finalAmount = user.accumulatedAmount * change / DIVIDER;\n\n      user.loomiPotSnapshot = currentLoomiPot;\n      user.accumulatedAmount = 0;\n      loomi.depositLoomiFor(_msgSender(), finalAmount);\n\n      emit Claim(_msgSender(), finalAmount);\n    }\n\n    /**\n    * @dev Function for Genesis Creepz ownership validation\n    */\n    function _validateCreepzOwner(uint256 tokenId, address user) internal view returns (bool) {\n      if (!creepzRestriction) return true;\n      if (staking.ownerOf(address(creepz), tokenId) == user) {\n        return true;\n      }\n      return creepz.ownerOf(tokenId) == user;\n    }\n\n    /**\n    * @dev Returns accumulated $loomi amount for user based on baseRate\n    */\n    function getAccumulatedAmount(address staker) external view returns (uint256) {\n      return _stakers[staker].accumulatedAmount + getCurrentReward(staker);\n    }\n\n    /**\n    * @dev Returnes pot change from the last user claim\n    */\n    function getPriceChange(address user) public view returns (uint256) {\n      if (_stakers[user].loomiPotSnapshot == 0) return 0;\n      uint256 currentLoomiPot = _getLoomiPot();\n      uint256 change = currentLoomiPot * DIVIDER / _stakers[user].loomiPotSnapshot;\n\n      return change;\n    }\n\n    /**\n    * @dev Returnes $loomi yield rate for user based on baseRate\n    */\n    function getStakerYield(address staker) public view returns (uint256) {\n      return _stakers[staker].stakedVault.length * baseYield;\n    }\n\n    /**\n    * @dev Returns array of IDs staked by address\n    */\n    function getStakerTokens(address staker) public view returns (uint256[] memory) {\n      return _stakers[staker].stakedVault;\n    }\n\n    /**\n    * @dev Returns current $loomi pot\n    */\n    function getLoomiPot() public view returns (uint256) {\n      return _getLoomiPot();\n    }\n\n    /**\n    * @dev Helper function for arrays\n    */\n    function _moveTokenInTheList(uint256[] memory list, uint256 tokenId) internal pure returns (uint256[] memory) {\n      uint256 tokenIndex = 0;\n      uint256 lastTokenIndex = list.length - 1;\n      uint256 length = list.length;\n\n      for(uint256 i = 0; i < length; i++) {\n        if (list[i] == tokenId) {\n          tokenIndex = i + 1;\n          break;\n        }\n      }\n      require(tokenIndex != 0, \"msg.sender is not the owner\");\n\n      tokenIndex -= 1;\n\n      if (tokenIndex != lastTokenIndex) {\n        list[tokenIndex] = list[lastTokenIndex];\n        list[lastTokenIndex] = tokenId;\n      }\n\n      return list;\n    }\n\n    /**\n    * @dev Returns current $loomi pot\n    */\n    function _getLoomiPot() internal view returns (uint256) {\n      uint256 pot = loomi.activeTaxCollectedAmount();\n      return pot;\n    }\n\n    /**\n    * @dev Returns accumulated amount from last snapshot based on baseRate\n    */\n    function getCurrentReward(address staker) public view returns (uint256) {\n      Staker memory user = _stakers[staker];\n      if (user.lastCheckpoint == 0) { return 0; }\n      return (block.timestamp - user.lastCheckpoint) * (baseYield * user.stakedVault.length) / SECONDS_IN_DAY;\n    }\n\n    /**\n    * @dev Aggregates accumulated $loomi amount from last snapshot to user total accumulatedAmount\n    */\n    function accumulate(address staker) internal {\n      _stakers[staker].accumulatedAmount += getCurrentReward(staker);\n      _stakers[staker].lastCheckpoint = block.timestamp;\n    }\n\n    /**\n    * @dev Returns token owner address (returns address(0) if token is not inside the gateway)\n    */\n    function ownerOf(uint256 tokenId) public view returns (address) {\n      return _ownerOfToken[tokenId];\n    }\n\n    function updateCreepzRestriction(bool _restrict) public onlyOwner {\n      creepzRestriction = _restrict;\n    }\n\n    /**\n    * @dev Function allows admin withdraw ERC721 in case of emergency.\n    */\n    function emergencyWithdraw(address tokenAddress, uint256[] memory tokenIds) public onlyOwner {\n      require(tokenIds.length <= 50, \"50 is max per tx\");\n      for (uint256 i; i < tokenIds.length; i++) {\n        address receiver = _ownerOfToken[tokenIds[i]];\n        if (receiver != address(0) && IERC721(tokenAddress).ownerOf(tokenIds[i]) == address(this)) {\n          IERC721(tokenAddress).transferFrom(address(this), receiver, tokenIds[i]);\n          emit WithdrawStuckERC721(receiver, tokenAddress, tokenIds[i]);\n        }\n      }\n    }\n\n    /**\n    * @dev Function allows to pause deposits if needed. Withdraw remains active.\n    */\n    function pause(bool _pause) public onlyOwner {\n      isPaused = _pause;\n    }\n\n    /**\n    * @dev Function allows admin to update the base yield for users.\n    */\n    function updateBaseYield(uint256 _yield) public onlyOwner {\n      baseYield = _yield;\n    }\n\n    function onERC721Received(address, address, uint256, bytes calldata) external pure returns(bytes4){\n      return bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"));\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}