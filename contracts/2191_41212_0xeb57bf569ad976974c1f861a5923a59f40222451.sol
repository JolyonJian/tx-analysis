{{
  "language": "Solidity",
  "sources": {
    "contracts/Illuminati/loomi.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.3.2 (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\n\n  //      /$$          /$$        /$$$$$$   /$$$$$$  /$$      /$$ /$$$$$$\n  //    /$$$$$$       | $$       /$$__  $$ /$$__  $$| $$$    /$$$|_  $$_/\n  //   /$$__  $$      | $$      | $$  \\ $$| $$  \\ $$| $$$$  /$$$$  | $$  \n  //  | $$  \\__/      | $$      | $$  | $$| $$  | $$| $$ $$/$$ $$  | $$  \n  //  |  $$$$$$       | $$      | $$  | $$| $$  | $$| $$  $$$| $$  | $$  \n  //   \\____  $$      | $$      | $$  | $$| $$  | $$| $$\\  $ | $$  | $$  \n  //   /$$  \\ $$      | $$$$$$$$|  $$$$$$/|  $$$$$$/| $$ \\/  | $$ /$$$$$$\n  //  |  $$$$$$/      |________/ \\______/  \\______/ |__/     |__/|______/\n  //   \\_  $$_/                                                          \n  //     \\__/                                                                                         \n      \n      \n/**\n * @dev Interface for checking active staked balance of a user.\n */\ninterface ILoomiSource {\n  function getAccumulatedAmount(address staker) external view returns (uint256);\n}\n\n/**\n * @dev Implementation of the {IERC20} interface.\n */\ncontract Loomi is ERC20, ReentrancyGuard, Ownable {\n    ILoomiSource public LoomiSource;\n\n    uint256 public MAX_SUPPLY;\n    uint256 public constant MAX_TAX_VALUE = 100;\n\n    uint256 public spendTaxAmount;\n    uint256 public withdrawTaxAmount;\n\n    uint256 public bribesDistributed;\n    uint256 public activeTaxCollectedAmount;\n\n    bool public tokenCapSet;\n\n    bool public withdrawTaxCollectionStopped;\n    bool public spendTaxCollectionStopped;\n\n    bool public isPaused;\n    bool public isDepositPaused;\n    bool public isWithdrawPaused;\n    bool public isTransferPaused;\n\n    mapping (address => bool) private _isAuthorised;\n    address[] public authorisedLog;\n\n    mapping(address => uint256) public depositedAmount;\n    mapping(address => uint256) public spentAmount;\n\n    modifier onlyAuthorised {\n      require(_isAuthorised[_msgSender()], \"Not Authorised\");\n      _;\n    }\n\n    modifier whenNotPaused {\n      require(!isPaused, \"Transfers paused!\");\n      _;\n    }\n\n    event Withdraw(address indexed userAddress, uint256 amount, uint256 tax);\n    event Deposit(address indexed userAddress, uint256 amount);\n    event DepositFor(address indexed caller, address indexed userAddress, uint256 amount);\n    event Spend(address indexed caller, address indexed userAddress, uint256 amount, uint256 tax);\n    event ClaimTax(address indexed caller, address indexed userAddress, uint256 amount);\n    event InternalTransfer(address indexed from, address indexed to, uint256 amount);\n\n    constructor(address _source) ERC20(\"LOOMI\", \"LOOMI\") {\n      _isAuthorised[_msgSender()] = true;\n      isPaused = true;\n      isTransferPaused = true;\n\n      withdrawTaxAmount = 25;\n      spendTaxAmount = 25;\n\n      LoomiSource = ILoomiSource(_source);\n    }\n\n    /**\n    * @dev Returnes current spendable balance of a specific user. This balance can be spent by user for other collections without\n    *      withdrawal to ERC-20 LOOMI OR can be withdrawn to ERC-20 LOOMI.\n    */\n    function getUserBalance(address user) public view returns (uint256) {\n      return (LoomiSource.getAccumulatedAmount(user) + depositedAmount[user] - spentAmount[user]);\n    }\n\n    /**\n    * @dev Function to deposit ERC-20 LOOMI to the game balance.\n    */\n    function depositLoomi(uint256 amount) public nonReentrant whenNotPaused {\n      require(!isDepositPaused, \"Deposit Paused\");\n      require(balanceOf(_msgSender()) >= amount, \"Insufficient balance\");\n\n      _burn(_msgSender(), amount);\n      depositedAmount[_msgSender()] += amount;\n\n      emit Deposit(\n        _msgSender(),\n        amount\n      );\n    }\n\n    /**\n    * @dev Function to withdraw game LOOMI to ERC-20 LOOMI.\n    */\n    function withdrawLoomi(uint256 amount) public nonReentrant whenNotPaused {\n      require(!isWithdrawPaused, \"Withdraw Paused\");\n      require(getUserBalance(_msgSender()) >= amount, \"Insufficient balance\");\n      uint256 tax = withdrawTaxCollectionStopped ? 0 : (amount * withdrawTaxAmount) / 100;\n\n      spentAmount[_msgSender()] += amount;\n      activeTaxCollectedAmount += tax;\n      _mint(_msgSender(), (amount - tax));\n\n      emit Withdraw(\n        _msgSender(),\n        amount,\n        tax\n      );\n    }\n\n    /**\n    * @dev Function to transfer game LOOMI from one account to another.\n    */\n    function transferLoomi(address to, uint256 amount) public nonReentrant whenNotPaused {\n      require(!isTransferPaused, \"Transfer Paused\");\n      require(getUserBalance(_msgSender()) >= amount, \"Insufficient balance\");\n\n      spentAmount[_msgSender()] += amount;\n      depositedAmount[to] += amount;\n\n      emit InternalTransfer(\n        _msgSender(),\n        to,\n        amount\n      );\n    }\n\n    /**\n    * @dev Function to spend user balance. Can be called by other authorised contracts. To be used for internal purchases of other NFTs, etc.\n    */\n    function spendLoomi(address user, uint256 amount) external onlyAuthorised nonReentrant {\n      require(getUserBalance(user) >= amount, \"Insufficient balance\");\n      uint256 tax = spendTaxCollectionStopped ? 0 : (amount * spendTaxAmount) / 100;\n\n      spentAmount[user] += amount;\n      activeTaxCollectedAmount += tax;\n\n      emit Spend(\n        _msgSender(),\n        user,\n        amount,\n        tax\n      );\n    }\n\n    /**\n    * @dev Function to deposit tokens to a user balance. Can be only called by an authorised contracts.\n    */\n    function depositLoomiFor(address user, uint256 amount) public onlyAuthorised nonReentrant {\n      _depositLoomiFor(user, amount);\n    }\n\n    /**\n    * @dev Function to tokens to the user balances. Can be only called by an authorised users.\n    */\n    function distributeLoomi(address[] memory user, uint256[] memory amount) public onlyAuthorised nonReentrant {\n      require(user.length == amount.length, \"Wrong arrays passed\");\n\n      for (uint256 i; i < user.length; i++) {\n        _depositLoomiFor(user[i], amount[i]);\n      }\n    }\n\n    function _depositLoomiFor(address user, uint256 amount) internal {\n      require(user != address(0), \"Deposit to 0 address\");\n      depositedAmount[user] += amount;\n\n      emit DepositFor(\n        _msgSender(),\n        user,\n        amount\n      );\n    }\n\n    /**\n    * @dev Function to mint tokens to a user balance. Can be only called by an authorised contracts.\n    */\n    function mintFor(address user, uint256 amount) external onlyAuthorised nonReentrant {\n      if (tokenCapSet) require(totalSupply() + amount <= MAX_SUPPLY, \"You try to mint more than max supply\");\n      _mint(user, amount);\n    }\n\n    /**\n    * @dev Function to claim tokens from the tax accumulated pot. Can be only called by an authorised contracts.\n    */\n    function claimLoomiTax(address user, uint256 amount) public onlyAuthorised nonReentrant {\n      require(activeTaxCollectedAmount >= amount, \"Insufficiend tax balance\");\n\n      activeTaxCollectedAmount -= amount;\n      depositedAmount[user] += amount;\n      bribesDistributed += amount;\n\n      emit ClaimTax(\n        _msgSender(),\n        user,\n        amount\n      );\n    }\n\n    /**\n    * @dev Function returns maxSupply set by admin. By default returns error (Max supply is not set).\n    */\n    function getMaxSupply() public view returns (uint256) {\n      require(tokenCapSet, \"Max supply is not set\");\n      return MAX_SUPPLY;\n    }\n\n    /*\n      ADMIN FUNCTIONS\n    */\n\n    /**\n    * @dev Function allows admin to set total supply of LOOMI token.\n    */\n    function setTokenCap(uint256 tokenCup) public onlyOwner {\n      require(totalSupply() < tokenCup, \"Value is smaller than the number of existing tokens\");\n      require(!tokenCapSet, \"Token cap has been already set\");\n\n      MAX_SUPPLY = tokenCup;\n    }\n\n    /**\n    * @dev Function allows admin add authorised address. The function also logs what addresses were authorised for transparancy.\n    */\n    function authorise(address addressToAuth) public onlyOwner {\n      _isAuthorised[addressToAuth] = true;\n      authorisedLog.push(addressToAuth);\n    }\n\n    /**\n    * @dev Function allows admin add unauthorised address.\n    */\n    function unauthorise(address addressToUnAuth) public onlyOwner {\n      _isAuthorised[addressToUnAuth] = false;\n    }\n\n    /**\n    * @dev Function allows admin update the address of staking address.\n    */\n    function changeLoomiSourceContract(address _source) public onlyOwner {\n      LoomiSource = ILoomiSource(_source);\n      authorise(_source);\n    }\n\n    /**\n    * @dev Function allows admin to update limmit of tax on withdraw.\n    */\n    function updateWithdrawTaxAmount(uint256 _taxAmount) public onlyOwner {\n      require(_taxAmount < MAX_TAX_VALUE, \"Wrong value passed\");\n      withdrawTaxAmount = _taxAmount;\n    }\n\n    /**\n    * @dev Function allows admin to update tax amount on spend.\n    */\n    function updateSpendTaxAmount(uint256 _taxAmount) public onlyOwner {\n      require(_taxAmount < MAX_TAX_VALUE, \"Wrong value passed\");\n      spendTaxAmount = _taxAmount;\n    }\n\n    /**\n    * @dev Function allows admin to stop tax collection on withdraw.\n    */\n    function stopTaxCollectionOnWithdraw(bool _stop) public onlyOwner {\n      withdrawTaxCollectionStopped = _stop;\n    }\n\n    /**\n    * @dev Function allows admin to stop tax collection on spend.\n    */\n    function stopTaxCollectionOnSpend(bool _stop) public onlyOwner {\n      spendTaxCollectionStopped = _stop;\n    }\n\n    /**\n    * @dev Function allows admin to pause all in game loomi transfactions.\n    */\n    function pauseGameLoomi(bool _pause) public onlyOwner {\n      isPaused = _pause;\n    }\n\n    /**\n    * @dev Function allows admin to pause in game loomi transfers.\n    */\n    function pauseTransfers(bool _pause) public onlyOwner {\n      isTransferPaused = _pause;\n    }\n\n    /**\n    * @dev Function allows admin to pause in game loomi withdraw.\n    */\n    function pauseWithdraw(bool _pause) public onlyOwner {\n      isWithdrawPaused = _pause;\n    }\n\n    /**\n    * @dev Function allows admin to pause in game loomi deposit.\n    */\n    function pauseDeposits(bool _pause) public onlyOwner {\n      isDepositPaused = _pause;\n    }\n\n    /**\n    * @dev Function allows admin to withdraw ETH accidentally dropped to the contract.\n    */\n    function rescue() external onlyOwner {\n      payable(owner()).transfer(address(this).balance);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}